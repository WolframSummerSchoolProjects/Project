(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[   2924942,      52618]
NotebookOptionsPosition[   2897966,      52182]
NotebookOutlinePosition[   2898538,      52205]
CellTagsIndexPosition[   2898459,      52200]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Rooftop Recognition for Solar Energy Potential", "Title",ExpressionUUID->"6eb8d7e2-68b2-40b9-8975-a91f4583550b"],

Cell["Last modified on: Sunday, July 8, 2018 at 17:15", "TemplateInstructions",
 Deployed->True,
 Background->RGBColor[0.75, 0.75, 0.75],
 CellTags->
  "LastModified",ExpressionUUID->"b4592abc-43f8-42aa-b1b7-e79936ced8f2"],

Cell["\<\
The aim of this project is to detect the rooftop of buildings to determine \
the available area at different locations and to identify the most suitable \
ones for solar energy application such as solar PV using Neural Networks and \
satellite imagery.\
\>", "Text",ExpressionUUID->"ad89a79b-2f79-4340-8328-8983ddc25c86"],

Cell[CellGroupData[{

Cell["The Dataset", "Chapter",
 CellChangeTimes->{{3.740260984742394*^9, 
  3.740260985844239*^9}},ExpressionUUID->"9aa16036-8f0f-48d0-9de3-\
e5a48e306255"],

Cell["\<\
The Inria Aerial Image Labeling addresses a core topic in remote sensing: the \
automatic pixelwise labeling of aerial imagery (link to paper). Dataset \
features:\
\>", "Text",
 CellChangeTimes->{{3.74025701027188*^9, 3.740257028964264*^9}, {
  3.740264140858994*^9, 3.7402641709864883`*^9}, {3.740264246768154*^9, 
  3.7402642510699472`*^9}},ExpressionUUID->"e746b011-a4ad-492e-b188-\
c0f52cfaab33"],

Cell[CellGroupData[{

Cell["\<\
Coverage of 810 km\.b2 (405 km\.b2 for training and 405 km\.b2 for testing)\
\>", "Item",
 CellChangeTimes->{{3.740257030203229*^9, 3.740257043224208*^9}, 
   3.740264254329458*^9},ExpressionUUID->"a4358594-8c26-4359-8d01-\
3d262fdfdfec"],

Cell["\<\
Aerial orthorectified color imagery with a spatial resolution of 0.3 m\
\>", "Item",
 CellChangeTimes->{{3.740257030203229*^9, 
  3.740257045660904*^9}},ExpressionUUID->"d8a22e75-01aa-4e71-a725-\
6b93d523efb0"],

Cell["\<\
Ground truth data for two semantic classes : building and not building \
(publicly disclosed only for the training subset)\
\>", "Item",
 CellChangeTimes->{{3.740257030203229*^9, 
  3.74025704523792*^9}},ExpressionUUID->"96034f19-4ae2-4ca9-a44e-\
39ec552e547a"]
}, Open  ]],

Cell["https : // project.inria.fr/aerialimagelabeling/", "Text",
 CellChangeTimes->{{3.740264172666609*^9, 
  3.740264175084717*^9}},ExpressionUUID->"c4bee893-4629-48a8-873a-\
d4993680a4ef"],

Cell[CellGroupData[{

Cell["Import", "Subchapter",
 CellChangeTimes->{{3.740263083814749*^9, 
  3.7402630841052637`*^9}},ExpressionUUID->"3b322aa5-fd32-4385-9846-\
db4e9fb055b5"],

Cell["Set the working directory:", "CodeText",ExpressionUUID->"6089ff53-b34f-4060-9668-33998972c222"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740273148557796*^9, 3.740273154515079*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"1eef466e-62d1-4695-a794-ad7223102db7"],

Cell[BoxData["\<\"/Users/enricocastro/Documents/GitHub/Project\"\>"], "Output",
 CellChangeTimes->{3.74023714607133*^9, 3.740255307434119*^9, 
  3.7402731691153183`*^9, 3.740273413090753*^9, 3.7402740184331493`*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"290bcf4b-e13e-41b8-8d36-ccffc4a1e31a"]
}, Open  ]],

Cell["Select the images for the input and those for the results:", "CodeText",ExpressionUUID->"5224de34-2b88-43a3-a37f-4968eece5fdc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainFilesInput", "=", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"FileNames", "[", "\"\<image/*.tif\>\"", "]"}], ",", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"StringMatchQ", "[", 
        RowBox[{"#", ",", 
         RowBox[{"___", "~~", "\"\<._\>\"", "~~", "___"}]}], "]"}]}], "&"}]}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainFilesResult", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"StringReplace", "[", 
      RowBox[{"#", ",", 
       RowBox[{"\"\<image/\>\"", "\[Rule]", "\"\<mask/\>\""}]}], "]"}], "&"}],
     "/@", "trainFilesInput"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.740273305581407*^9, 3.740273313122006*^9}, {
  3.740273395953129*^9, 3.7402734060807123`*^9}, {3.7402734720710583`*^9, 
  3.740273474847918*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"4edc6a39-8de7-46fc-8301-8a4558d6ca73"],

Cell["Import an image to test:", "CodeText",ExpressionUUID->"2f4c354e-c924-454d-a6a3-f139ee149bfb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"imgInput", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "trainFilesInput", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"imgResult", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "trainFilesResult", "\[LeftDoubleBracket]", "1", 
     "\[RightDoubleBracket]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.740273355846744*^9, 3.740273360121477*^9}, {
  3.740273493607332*^9, 3.740273504909196*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"dfa9911b-e2eb-4528-916e-f7061aa3d363"],

Cell["\<\
Partition of the images in 100 from a 5000x5000 to images 500x500 :\
\>", "CodeText",ExpressionUUID->"1492a59f-437b-4ed5-8ec7-94ee6135e38a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"splicesInput", "=", 
   RowBox[{"Join", "@@", 
    RowBox[{"ImagePartition", "[", 
     RowBox[{"imgInput", ",", "500"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"splicesResults", "=", 
   RowBox[{"Join", "@@", 
    RowBox[{"ImagePartition", "[", 
     RowBox[{"imgResult", ",", "500"}], "]"}]}]}], ";"}]}], "Input",
 CellLabel->"In[71]:=",ExpressionUUID->"e65828dc-4251-414d-ba5d-ecd1a1455d44"],

Cell["Check the size of the file:", "CodeText",ExpressionUUID->"36eea839-09a3-4594-b86d-164c443b740e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Round", "[", 
   RowBox[{"ImageData", "[", 
    RowBox[{
    "splicesResults", "\[LeftDoubleBracket]", "10", "\[RightDoubleBracket]"}],
     "]"}], "]"}], " ", "//", " ", "ByteCount"}]], "Input",
 CellLabel->"In[73]:=",ExpressionUUID->"1a6f468d-0782-4051-b815-c5a34a5f8fae"],

Cell[BoxData["2000152"], "Output",
 CellChangeTimes->{3.74023714848742*^9, 3.7402553102387447`*^9, 
  3.740273518210977*^9, 3.740274030731495*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"b39ea155-117d-450e-a685-5ba7f06b79fb"]
}, Open  ]],

Cell["\<\
Due to the Join we have a list of 100 files that contain the 10x10 images \
that compose the original:\
\>", "CodeText",ExpressionUUID->"ba41efe3-1315-4577-8c51-7176412085c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "splicesInput", "]"}]], "Input",
 CellLabel->"In[74]:=",ExpressionUUID->"2a39101b-a811-4095-9a56-20030a30f6b2"],

Cell[BoxData["100"], "Output",
 CellChangeTimes->{3.7402371485713167`*^9, 3.740255310358609*^9, 
  3.740273521464499*^9, 3.74027403316943*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"4f69c6ae-d044-41c6-8b91-2e70f5324ab4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Assemble Images", "Section",ExpressionUUID->"b71203ef-8de2-4d85-b90e-a1874d711b1f"],

Cell["Assemble images in sets of ten to verify:", "CodeText",
 CellChangeTimes->{{3.740264312221815*^9, 
  3.740264395963709*^9}},ExpressionUUID->"ccb435df-2e41-4c62-a63f-\
2f1762146d26"],

Cell[BoxData[
 RowBox[{"assambleImage", "=", 
  RowBox[{"ImageAssemble", "[", 
   RowBox[{"splicesInput", "\[LeftDoubleBracket]", 
    RowBox[{"41", ";;", "50"}], "\[RightDoubleBracket]"}], "]"}]}]], "Input",
 CellLabel->"In[75]:=",ExpressionUUID->"d43a2ca4-596b-4e36-b904-550908aa596e"],

Cell["Assemble mask images in sets of ten to verify:", "CodeText",
 CellChangeTimes->{{3.740264374215955*^9, 
  3.740264398410717*^9}},ExpressionUUID->"79348fdb-00d5-4aa6-99ad-\
d5b2b0eb5fa1"],

Cell[BoxData[
 RowBox[{"assambleMask", "=", 
  RowBox[{"ImageAssemble", "[", 
   RowBox[{"Image", "/@", 
    RowBox[{"Round", "[", 
     RowBox[{"ImageData", "/@", 
      RowBox[{"splicesResults", "\[LeftDoubleBracket]", 
       RowBox[{"41", ";;", "50"}], "\[RightDoubleBracket]"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"c11a142e-09df-496f-9100-8778cc59814f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Compose ", "Section",ExpressionUUID->"bc292344-c874-47fc-aa3b-daec9a4ab95c"],

Cell["Compose the images to verify image matching:", "CodeText",
 CellChangeTimes->{{3.740264411670682*^9, 
  3.740264420592795*^9}},ExpressionUUID->"622aa79b-6b7e-44c9-a3c1-\
00d7c466fc57"],

Cell[BoxData[
 RowBox[{"ImageCompose", "[", 
  RowBox[{"assambleImage", ",", 
   RowBox[{"{", 
    RowBox[{"assambleMask", ",", "0.5"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[77]:=",ExpressionUUID->"348ae733-b7bc-45f7-b790-450278a25234"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"rand", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "100"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ImageCompose", "[", 
  RowBox[{
   RowBox[{
   "splicesInput", "\[LeftDoubleBracket]", "rand", "\[RightDoubleBracket]"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
     "splicesResults", "\[LeftDoubleBracket]", "rand", 
      "\[RightDoubleBracket]"}], ",", "0.5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.740264471223096*^9, 3.7402644800464783`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"f68865b2-5502-44e2-ba6d-42cded56ea35"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Association", "Section",ExpressionUUID->"4ea55356-bf1b-48a8-a4ee-fa354471679a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mxTrain", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"splicesInput", "\[Rule]", " ", "splicesResults"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[80]:=",ExpressionUUID->"89a8b1f0-8a87-4781-9e1c-5d6bd4bb6c50"],

Cell[BoxData[
 RowBox[{"ImageCompose", "[", 
  RowBox[{
   RowBox[{"Keys", "[", 
    RowBox[{
    "mxTrain", "\[LeftDoubleBracket]", "rand", "\[RightDoubleBracket]"}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Values", "[", 
      RowBox[{
      "mxTrain", "\[LeftDoubleBracket]", "rand", "\[RightDoubleBracket]"}], 
      "]"}], ",", "0.4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7402645132656183`*^9, 3.740264516170796*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"f571e71d-2992-42d1-b26c-f3bad7e62c96"],

Cell[CellGroupData[{

Cell["Export test", "Subsubsection",
 CellChangeTimes->{{3.7402645349304037`*^9, 
  3.740264537238214*^9}},ExpressionUUID->"97cf3c62-f1cf-43a2-aa31-\
de0fdcd83ffe"],

Cell["First try to export the MX file:", "CodeText",ExpressionUUID->"6b0cffd3-a8c9-4253-bd6d-65332cdc178e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<File.mx\>\"", ",", "mxTrain"}], "]"}]], "Input",
 CellLabel->"In[82]:=",ExpressionUUID->"838c25cd-1a5f-4578-b784-f6822b1ff187"],

Cell[BoxData["\<\"File.mx\"\>"], "Output",
 CellChangeTimes->{3.740237211197764*^9, 3.740255353039975*^9, 
  3.740274090265697*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"b9f6b1bb-5ac6-4629-bd03-c648c6e960d7"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Export", "Subchapter",
 CellChangeTimes->{{3.740263070979205*^9, 
  3.740263075528973*^9}},ExpressionUUID->"4efcc86f-2c2d-4ddc-a02e-\
089f1cb81eaf"],

Cell[CellGroupData[{

Cell["mxFileCreator", "Section",ExpressionUUID->"e557db27-c514-4a08-9842-fd25135ebd81"],

Cell["\<\
The first approach to organize the data was to make MX files, one per image, \
each file contain the 100 images with their respective mask. In order to do \
that a function mxFileCreator was build.\
\>", "Text",
 CellChangeTimes->{{3.74026313176229*^9, 
  3.740263228211347*^9}},ExpressionUUID->"6277ec90-6498-4999-930d-\
d6c0a53ab860"],

Cell["Function that creates a MX file per each 5000x5000 image:", "CodeText",
 CellChangeTimes->{{3.740263233909696*^9, 
  3.740263255365264*^9}},ExpressionUUID->"bf18ccb7-efb9-47ed-a1cc-\
c66543de4080"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mxFileCreator", "[", 
   RowBox[{"trainFilesInput_", ",", "trainFilesResult_", ",", "i_"}], "]"}], ":=", 
  RowBox[{"Block", "[", "\[IndentingNewLine]", "\t", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "Flag", ",", "imgInput", ",", "imgResult", ",", "splicesInput", ",", 
      "splicesResults", ",", "mxTrain"}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"Flag", "=", 
      RowBox[{"TextString", "[", "i", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"imgInput", "=", 
      RowBox[{"Import", "[", "trainFilesInput", "]"}]}], ";", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"imgResult", "=", 
      RowBox[{"Import", "[", "trainFilesResult", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\t", 
     RowBox[{"splicesInput", "=", 
      RowBox[{"Join", "@@", 
       RowBox[{"ImagePartition", "[", 
        RowBox[{"imgInput", ",", "500"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"splicesResults", "=", 
      RowBox[{"Round", "[", 
       RowBox[{"ImageData", "/@", 
        RowBox[{"(", 
         RowBox[{"Join", "@@", 
          RowBox[{"ImagePartition", "[", 
           RowBox[{"imgResult", ",", "500"}], "]"}]}], ")"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\t", 
     RowBox[{"mxTrain", "=", 
      RowBox[{"Thread", "[", 
       RowBox[{"splicesInput", "\[Rule]", " ", "splicesResults"}], "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", "\t", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"\"\<MXFiles/File\>\"", "<>", "Flag", "<>", "\"\<.mx\>\""}], 
       ",", "mxTrain"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Code",
 CellChangeTimes->{{3.740274100746058*^9, 3.740274101543767*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"648a0aa0-b3a9-4400-8cda-4d86e61a8bdf"],

Cell["Test the function", "CodeText",
 CellChangeTimes->{{3.740263118743321*^9, 
  3.740263120115697*^9}},ExpressionUUID->"ec8bfb0f-06a4-440b-9efa-\
d77f64a22b86"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mxFileCreator", "[", 
  RowBox[{
   RowBox[{
   "trainFilesInput", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
   ",", 
   RowBox[{
   "trainFilesResult", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
    ",", "1"}], "]"}]], "Input",
 CellLabel->"In[84]:=",ExpressionUUID->"10c6e71a-68af-4224-9c5a-5478f3379b88"],

Cell[BoxData["\<\"MXFiles/File1.mx\"\>"], "Output",
 CellChangeTimes->{3.740237220539548*^9, 3.740255374007431*^9, 
  3.7402741073665237`*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"844f2f3c-6bd1-4faf-b456-32f08b3f3ac9"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"file", "=", 
   RowBox[{"Import", "[", "\"\<MXFiles/File1.mx\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"file", "\[LeftDoubleBracket]", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "100"}], "}"}], "]"}], 
  "\[RightDoubleBracket]"}]}], "Input",
 CellChangeTimes->{{3.7402741072454767`*^9, 3.7402741082784023`*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"bcdb8c9e-8658-4051-8561-7afd944281b0"],

Cell[BoxData[
 RowBox[{"ImageCompose", "[", 
  RowBox[{
   RowBox[{"Keys", "[", 
    RowBox[{"file", "\[LeftDoubleBracket]", "rand", "\[RightDoubleBracket]"}],
     "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Image", "[", 
      RowBox[{"Values", "[", 
       RowBox[{
       "file", "\[LeftDoubleBracket]", "rand", "\[RightDoubleBracket]"}], 
       "]"}], "]"}], ",", "0.5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.740263355265312*^9, 3.7402633559546957`*^9}, {
  3.740264459310018*^9, 3.7402644601494417`*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"6891584e-21b6-4a69-a0c8-f1962105b991"],

Cell["\<\
To Map all the images and convert them into association in a MX files : \
\>", "Text",
 CellChangeTimes->{{3.740237307377832*^9, 
  3.740237342838778*^9}},ExpressionUUID->"1e494a3f-def2-4085-b63c-\
564180ec301f"],

Cell["\<\
MapIndexed[mxFileCreator[#[[1]], #[[2]], Echo[#2[[1]]]] &, \
Transpose[{trainFilesInput, trainFilesResult}]]\
\>", "Item",
 CellChangeTimes->{{3.740237335935391*^9, 
  3.740237340652907*^9}},ExpressionUUID->"12a4f295-4c71-4540-aa23-\
b22ab7bceb07"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Importing the created files", "Section",
 CellChangeTimes->{{3.740255610777532*^9, 3.740255610779826*^9}, 
   3.740255641810308*^9},ExpressionUUID->"2e853638-8bb2-410e-b45c-\
e8c7ffc0110f"],

Cell["Import one random set of data for verification porpoises:", "Text",
 CellChangeTimes->{{3.740264582437461*^9, 
  3.740264606435437*^9}},ExpressionUUID->"7e3fc508-04ba-4f73-b7d2-\
a82da7027ffb"],

Cell["Import the MX file created:", "CodeText",ExpressionUUID->"31c176e3-24a4-490c-af98-939837a74e8c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fileImported", "=", 
   RowBox[{"Import", "@", 
    RowBox[{
     RowBox[{"FileNames", "[", "\"\<MXFiles/*.mx\>\"", "]"}], 
     "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.740255877505621*^9, 3.740255899456563*^9}, {
  3.7402741196102657`*^9, 3.740274127112937*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"a0f86900-c676-4621-b23f-e2dd8e7b7da0"],

Cell[TextData[StyleBox["Test the image association", "CodeText"]], "CodeText",ExpressionUUID->"425c2f60-58fe-4231-ae62-1c712a28606b"],

Cell[BoxData[
 RowBox[{"ImageCompose", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Keys", "[", "fileImported", "]"}], "\[LeftDoubleBracket]", 
    "rand", "\[RightDoubleBracket]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Values", "[", "fileImported", "]"}], "\[LeftDoubleBracket]", 
       "rand", "\[RightDoubleBracket]"}], "//", "Image"}], ",", "0.5"}], 
    "}"}]}], "]"}]], "Input",
 CellLabel->"In[89]:=",ExpressionUUID->"af7e71f9-a6da-4711-ad5c-e2650d729373"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The net", "Chapter",ExpressionUUID->"70ef821b-333a-4d27-b65f-fc94bbed1d15"],

Cell[CellGroupData[{

Cell["Net selection", "Subchapter",ExpressionUUID->"b7792add-1b2d-49ac-b515-c3c08ec79db1"],

Cell[TextData[{
 "The net selected for this project was at ",
 StyleBox["Wolfram Neural Net Repository",
  FontWeight->"Bold"],
 " for ",
 StyleBox["Semantic Segmentation",
  FontWeight->"Bold"],
 ". Released in 2016 by the University of Adelaide, ",
 StyleBox["Ademxapp Model A1 Trained on PASCAL VOC2012 and MS-COCO",
  FontSlant->"Italic"],
 " ",
 StyleBox["Data",
  FontSlant->"Italic"],
 " was modify to identify two classes instead of 21."
}], "Text",
 CellChangeTimes->{{3.740255946308928*^9, 3.740255958329061*^9}, {
  3.740256010083682*^9, 3.740256023844866*^9}, {3.740256202971484*^9, 
  3.740256241852839*^9}, {3.740256300756093*^9, 
  3.740256338045835*^9}},ExpressionUUID->"9ed36de7-8705-48f3-9c6a-\
635180f6aaaf"],

Cell["\<\
Take the net model for Semantic Segmentation from the repositories:\
\>", "CodeText",
 CellChangeTimes->{
  3.740264671495636*^9},ExpressionUUID->"7aa4c8ac-a952-4993-9f30-\
5c13e099bdf5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netModel", "=", 
  RowBox[{
  "NetModel", "[", 
   "\"\<Ademxapp Model A1 Trained on PASCAL VOC2012 and MS-COCO Data\>\"", 
   "]"}]}]], "Input",
 CellLabel->"In[90]:=",ExpressionUUID->"e2972e30-e0b9-4e7d-8211-d1f0acd67ddc"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["25", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 3, 
                    "$GroupNumber" -> 1, "$InputSize" -> {504, 504}, 
                    "$OutputSize" -> {504, 504}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 504, 504}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 504, 504}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "conv1a" -> 
                    NeuralNetworks`TensorT[{64, 504, 504}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {504, 504}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 504, 504}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 504, 504}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 504, 504}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 504, 504}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 504, 504}, 
                    NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {504, 504}, 
                    "$OutputSize" -> {252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 504, 504}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {504, 504}, 
                    "$OutputSize" -> {252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 504, 504}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {252, 252}, 
                    "$OutputSize" -> {252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "2a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "conv1a"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus", "Outputs", "Output"]}], "2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2a_plus" -> 
                    NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {252, 252}, 
                    "$OutputSize" -> {252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {252, 252}, 
                    "$OutputSize" -> {252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "2b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Outputs", "Output"]}], "2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b1_plus" -> 
                    NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {252, 252}, 
                    "$OutputSize" -> {252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {252, 252}, 
                    "$OutputSize" -> {252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "2b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Outputs", "Output"]}], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b2_plus" -> 
                    NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 252, 252}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {252, 252}, 
                    "$OutputSize" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {252, 252}, 
                    "$OutputSize" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 252, 252}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {126, 126}, 
                    "$OutputSize" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "3a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3a_plus" -> 
                    NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {126, 126}, 
                    "$OutputSize" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {126, 126}, 
                    "$OutputSize" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "3b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b1_plus" -> 
                    NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {126, 126}, 
                    "$OutputSize" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {126, 126}, 
                    "$OutputSize" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "3b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Outputs", "Output"]}], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b2_plus" -> 
                    NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 126, 126}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {126, 126}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {126, 126}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 126, 126}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a_plus", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4a_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b1_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b2_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b3_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b3_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b3_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b4_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b4_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b4_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b5_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b5_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Outputs", "Output"]}], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b5_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b5_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a_plus", "Outputs", "Output"]}], "5b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5a_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Outputs", "Output"]}], "5b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b1_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Outputs", "Output"]}], "6a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b2_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn6a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_do" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.3, "Method" -> "Dropout"], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "6a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a_plus", "Outputs", "Output"]}], "7a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "6a_plus" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn7a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{4096, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 4096, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_do" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{4096, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 4096, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "7a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "6a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a_plus", "Outputs", "Output"]}], "bn7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 4096, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4096, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "linear21" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{21, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{21}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 21, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{21, 63, 63}, 
                    NeuralNetworks`RealT]]], "softmax/1" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{21, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{63, 63, 21}, 
                    NeuralNetworks`RealT]]], "softmax/2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{63, 63, 21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{63, 63, 21}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "conv1a"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Inputs", "2a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Inputs", "2b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Inputs", "2b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Inputs", "3a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Inputs", "3b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Inputs", "3b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Inputs", "4a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Inputs", "4b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Inputs", "4b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Inputs", "4b3_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Inputs", "4b4_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Inputs", "4b5_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Inputs", "5a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Inputs", "5b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Inputs", "5b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Inputs", "6a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {504, 504}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, 
                    "VarianceImage" -> {0.052441, 0.050176, 0.050625}], 
                    
                    NeuralNetworks`TensorT[{3, 504, 504}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
                    14, 15, 16, 17, 18, 19, 20, 21}, "InputDepth" -> 3, 
                    "Dimensions" -> 21, "$Rank" -> 2], 
                    
                    NeuralNetworks`TensorT[{63, 63, 21}, 
                    NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"504\"", "\"504\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"504\"", "\"504\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"252\"", "\"252\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"252\"", "\"252\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"252\"", "\"252\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"126\"", "\"126\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "12", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "12", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"bn7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv6a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv6a_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear21\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"21\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax/1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"63\"", 
                    "\"63\"", "\"21\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax/2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"63\"", 
                    "\"63\"", "\"21\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.74023739250299*^9, 3.74025644443123*^9, 
  3.740274142151209*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"c5a8bd58-8a3d-4f8c-b6d1-8edb70c64a7d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Net surgery", "Section",
 CellChangeTimes->{{3.740262311122645*^9, 
  3.740262313003985*^9}},ExpressionUUID->"1029d31d-c184-4a63-af5a-\
aa49fbf15b95"],

Cell[CellGroupData[{

Cell["Modify the Input for the size of the images", "Subsection",
 CellChangeTimes->{{3.740262290629107*^9, 
  3.740262299238243*^9}},ExpressionUUID->"fc58ad2a-ba71-4c14-96e2-\
2e97789e3554"],

Cell["Replace the encoder to accept images 500x500:", "CodeText",ExpressionUUID->"76bebb61-c311-4bbf-9e43-88545a117156"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netModel500", "=", 
  RowBox[{"NetReplacePart", "[", 
   RowBox[{"netModel", ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"500", ",", "500"}], "}"}], ",", 
        RowBox[{"\"\<MeanImage\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"0.485", ",", "0.456", ",", "0.406"}], "}"}]}]}], "}"}], 
      "]"}]}]}], " ", "]"}]}]], "Input",
 CellLabel->"In[91]:=",ExpressionUUID->"948ee0a2-c099-4307-a405-61677c30e7c4"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"63\"", "\"63\"", "\"21\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["25", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 3, "$InputSize" -> {500, 500}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "conv1a" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 64, "$InputSize" -> {500, 500}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 64, "$InputSize" -> {500, 500}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "conv1a"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus", "Outputs", "Output"]}], "2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2a_plus" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Outputs", "Output"]}], "2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b1_plus" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Outputs", "Output"]}], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b2_plus" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3a_plus" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b1_plus" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Outputs", "Output"]}], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b2_plus" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a_plus", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4a_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b1_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b2_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b3_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b3_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b3_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b4_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b4_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b4_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b5_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b5_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Outputs", "Output"]}], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b5_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b5_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a_plus", "Outputs", "Output"]}], "5b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5a_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 1024, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Outputs", "Output"]}], "5b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b1_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 1024, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Outputs", "Output"]}], "6a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b2_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn6a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 1024, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 1024, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_do" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.3, "Method" -> "Dropout"], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 1024, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "6a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a_plus", "Outputs", "Output"]}], "7a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "6a_plus" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn7a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{4096, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 4096, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 2048, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 2048, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 1024, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_do" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{4096, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 4096, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 2048, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "7a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "6a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a_plus", "Outputs", "Output"]}], "bn7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 4096, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 4096, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "linear21" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{21, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{21}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 21, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{21, 63, 63}, 
                    NeuralNetworks`RealT]]], "softmax/1" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{21, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{63, 63, 21}, 
                    NeuralNetworks`RealT]]], "softmax/2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{63, 63, 21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{63, 63, 21}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "conv1a"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Inputs", "2a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Inputs", "2b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Inputs", "2b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Inputs", "3a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Inputs", "3b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Inputs", "3b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Inputs", "4a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Inputs", "4b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Inputs", "4b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Inputs", "4b3_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Inputs", "4b4_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Inputs", "4b5_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Inputs", "5a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Inputs", "5b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Inputs", "5b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Inputs", "6a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {500, 500}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, "VarianceImage" -> 
                    None], 
                    
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{63, 63, 21}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"250\"", "\"250\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"250\"", "\"250\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"250\"", "\"250\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"125\"", "\"125\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"125\"", "\"125\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"125\"", "\"125\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "12", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "12", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"bn7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv6a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv6a_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear21\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"21\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax/1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"63\"", 
                    "\"63\"", "\"21\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax/2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"63\"", 
                    "\"63\"", "\"21\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"63\"", 
                    "\"63\"", "\"21\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740237538425293*^9, 3.740256445168662*^9, 
  3.740274145547263*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"507e253b-89b3-4738-ba55-e1ea41fb38c8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Resize the layer", "Subsection",
 CellChangeTimes->{
  3.740262148581003*^9},ExpressionUUID->"b4803689-f318-4d0a-8cf6-\
7abd4a561cb4"],

Cell["Drop the last three layer to modify the net:", "CodeText",
 CellChangeTimes->{{3.740256384581959*^9, 
  3.74025638874026*^9}},ExpressionUUID->"b91a2fe4-fd0e-4eae-94ab-\
0cf7ecce3c14"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"firstPartNet", "=", 
  RowBox[{"NetDrop", "[", 
   RowBox[{"netModel500", ",", 
    RowBox[{"-", "3"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740256449303941*^9, 3.740256449951378*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"3ead8a7b-64dc-4ce6-9091-0c24ec492c7c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"63\"", 
                    "\"63\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["22", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 3, "$InputSize" -> {500, 500}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "conv1a" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 64, "$InputSize" -> {500, 500}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 64, "$InputSize" -> {500, 500}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "conv1a"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus", "Outputs", "Output"]}], "2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2a_plus" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Outputs", "Output"]}], "2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b1_plus" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Outputs", "Output"]}], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b2_plus" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 128, "$InputSize" -> {250, 250}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3a_plus" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b1_plus" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Outputs", "Output"]}], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b2_plus" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 256, "$InputSize" -> {125, 125}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a_plus", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4a_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b1_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b2_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b3_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b3_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b3_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b4_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b4_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b4_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b5_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b5_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Outputs", "Output"]}], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b5_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b5_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a_plus", "Outputs", "Output"]}], "5b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5a_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b1_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 1024, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b1_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Outputs", "Output"]}], "5b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b1_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b2_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 1024, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {2, 2}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b2_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Outputs", "Output"]}], "6a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b2_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn6a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 1024, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 1024, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    512, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 512, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_do" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.3, "Method" -> "Dropout"], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 1024, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "6a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a_plus", "Outputs", "Output"]}], "7a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "6a_plus" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn7a_branch2a" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{4096, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 4096, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 2048, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{1024, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 2048, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{2048, 
                    1024, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {4, 4}, 
                    "Dilation" -> {4, 4}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 1024, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_do" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{4096, 
                    2048, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 4096, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 2048, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "7a_plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "6a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a_plus", "Outputs", "Output"]}], "bn7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 4096, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 4096, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "conv1a"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Inputs", "2a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Inputs", "2b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Inputs", "2b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Inputs", "3a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Inputs", "3b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Inputs", "3b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Inputs", "4a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Inputs", "4b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Inputs", "4b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Inputs", "4b3_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Inputs", "4b4_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Inputs", "4b5_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Inputs", "5a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Inputs", "5b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Inputs", "5b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Inputs", "6a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {500, 500}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, "VarianceImage" -> 
                    None], 
                    
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"250\"", "\"250\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"250\"", "\"250\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"250\"", "\"250\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"125\"", "\"125\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"125\"", "\"125\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"125\"", "\"125\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5b1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5b2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "12", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "12", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"bn7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "bn7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv6a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv6a_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv6a_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7402375410254107`*^9, 3.7402564507407846`*^9, 
  3.7402741482872677`*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"9053c9d7-33f9-4a9b-9090-a1ce7b5d2197"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Convolution layer", "Subsection",
 CellChangeTimes->{{3.740262153619235*^9, 
  3.740262163901144*^9}},ExpressionUUID->"e43fe892-f5b4-4a6b-9f14-\
e4cff49cb28b"],

Cell["Add a convolution layer to have two outputs:", "CodeText",
 CellChangeTimes->{{3.7402564183007593`*^9, 
  3.740256422480133*^9}},ExpressionUUID->"cd0d3ff6-bc54-4114-81a1-\
a4b518a70ebc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"convLayer", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{"firstPartNet", ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"2", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"12", ",", "12"}], "}"}]}], ",", 
        RowBox[{"\"\<Dilation\>\"", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"12", ",", "12"}], "}"}]}]}], "]"}], ",", 
      RowBox[{"ResizeLayer", "[", 
       RowBox[{"{", 
        RowBox[{"500", ",", "500"}], "}"}], "]"}]}], "}"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{3.7402564304177217`*^9},
 CellLabel->"In[93]:=",ExpressionUUID->"1ac40f1d-b38b-4092-b87c-61fa477fbfe0"],

Cell["Take the last two layers from the one with the new encoder:", "CodeText",ExpressionUUID->"ff3a3785-e83c-428d-b2a5-0e79343461d7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lastPartNet", "=", 
  RowBox[{"NetReplacePart", "[", 
   RowBox[{
    RowBox[{"NetTake", "[", 
     RowBox[{"netModel500", ",", 
      RowBox[{"-", "2"}]}], "]"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "Automatic"}]}], "]"}]}]], "Input",
 CellLabel->"In[94]:=",ExpressionUUID->"4d5bf403-48a8-44e3-91ea-3fc8ead1407b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "softmax/1" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "softmax/2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax/2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"tensor\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax/1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox["\"tensor\"", 
                    Annotation[#, {"Nodes", "softmax/1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax/2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"tensor\"", 
                    Annotation[#, {"Nodes", "softmax/2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"tensor\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740237545146796*^9, 3.740256583318068*^9, 
  3.740274152979726*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"a1fd24b7-c5d9-4d85-865c-b98190489ff6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["SoftmaxLayer", "Subsection",
 CellChangeTimes->{{3.740262187105338*^9, 
  3.740262199127829*^9}},ExpressionUUID->"bb6322f8-4818-4bfc-86ff-\
1ad05e801b76"],

Cell["\<\
Append the last layers and Softmax Layer with a net decoder of classes:\
\>", "CodeText",ExpressionUUID->"cc0975d9-3335-44d8-bd8a-d819ae4f3ed5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"finalNet", "=", 
  RowBox[{"NetAppend", "[", 
   RowBox[{"convLayer", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
      "lastPartNet", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
      ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"\"\<InputDepth\>\"", "\[Rule]", "3"}]}], "}"}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[95]:=",ExpressionUUID->"181b5c3b-7ec8-461b-9fb7-4e9e0673e497"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 3, "$InputSize" -> {500, 500}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "conv1a" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "conv1a"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus", "Outputs", "Output"]}], "2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2a_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Outputs", "Output"]}], "2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b1_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Outputs", "Output"]}], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b2_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3a_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b1_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Outputs", "Output"]}], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b2_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a_plus", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4a_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b1_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b2_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b3_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b3_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b3_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b4_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b4_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b4_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b5_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b5_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Outputs", "Output"]}], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b5_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b5_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a_plus", "Outputs", "Output"]}], "5b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5a_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Outputs", "Output"]}], "5b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b1_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Outputs", "Output"]}], "6a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b2_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn6a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.3, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "6a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a_plus", "Outputs", "Output"]}], "7a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "6a_plus" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn7a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "7a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "6a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a_plus", "Outputs", "Output"]}], "bn7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    4096, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 4096, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "conv1a"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Inputs", "2a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Inputs", "2b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Inputs", "2b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Inputs", "3a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Inputs", "3b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Inputs", "3b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Inputs", "4a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Inputs", "4b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Inputs", "4b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Inputs", "4b3_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Inputs", "4b4_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Inputs", "4b5_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Inputs", "5a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Inputs", "5b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Inputs", "5b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Inputs", "6a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{2, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Resize", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{500, 500}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "$Channels" -> 2, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {500, 500}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, "VarianceImage" -> 
                    None], 
                    
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {0, 1}, "InputDepth" -> 3, "Dimensions" -> 2, 
                    "$Rank" -> 2], 
                    
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "22", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ResizeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.74023756328653*^9, 3.7402565902682657`*^9, 
  3.740274158526409*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"8698867c-5853-453e-9edd-01f4aaedf739"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initialize the net", "Subsection",
 CellChangeTimes->{{3.740262273891255*^9, 
  3.7402622783675013`*^9}},ExpressionUUID->"457706a8-31b0-4e34-9e01-\
ddb2df8d6ab1"],

Cell["Initialize the final net to check for errors:", "CodeText",
 CellChangeTimes->{{3.740256596366399*^9, 
  3.740256601044447*^9}},ExpressionUUID->"e5c223ff-ee13-4e34-922a-\
6ffee660145e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"iniFinalNet", "=", 
  RowBox[{"NetInitialize", "[", "finalNet", "]"}]}]], "Input",
 CellLabel->"In[96]:=",ExpressionUUID->"a01fab52-10fa-4a9d-a938-8719631622e9"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 3, "$InputSize" -> {500, 500}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "conv1a" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "conv1a"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus", "Outputs", "Output"]}], "2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2a_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Outputs", "Output"]}], "2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b1_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Outputs", "Output"]}], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b2_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3a_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b1_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Outputs", "Output"]}], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b2_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a_plus", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4a_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b1_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b2_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b3_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b3_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b3_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b4_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b4_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b4_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b5_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b5_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Outputs", "Output"]}], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b5_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b5_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a_plus", "Outputs", "Output"]}], "5b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5a_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Outputs", "Output"]}], "5b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b1_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Outputs", "Output"]}], "6a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b2_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn6a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.3, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "6a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a_plus", "Outputs", "Output"]}], "7a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "6a_plus" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn7a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "7a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "6a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a_plus", "Outputs", "Output"]}], "bn7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    4096, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 4096, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "conv1a"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Inputs", "2a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Inputs", "2b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Inputs", "2b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Inputs", "3a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Inputs", "3b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Inputs", "3b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Inputs", "4a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Inputs", "4b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Inputs", "4b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Inputs", "4b3_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Inputs", "4b4_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Inputs", "4b5_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Inputs", "5a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Inputs", "5b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Inputs", "5b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Inputs", "6a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{2}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Resize", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{500, 500}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "$Channels" -> 2, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {500, 500}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, "VarianceImage" -> 
                    None], 
                    
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {0, 1}, "InputDepth" -> 3, "Dimensions" -> 2, 
                    "$Rank" -> 2], 
                    
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "22", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ResizeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox["\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740237564994741*^9, 3.740256603250368*^9, 
  3.7402741616650953`*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"e312fdd1-f876-4f4d-89ef-79cbca672676"]
}, Open  ]],

Cell["Test the encoders and decoders of the initialize net:", "CodeText",
 CellChangeTimes->{{3.7402566563083467`*^9, 3.7402566841624603`*^9}, {
  3.740256754947112*^9, 
  3.74025675607063*^9}},ExpressionUUID->"f3c0d72a-e980-4ea7-8dbf-\
e5ee6d4fa105"],

Cell[BoxData[
 RowBox[{"Image", "[", 
  RowBox[{
   RowBox[{"iniFinalNet", "[", 
    RowBox[{
     RowBox[{"Keys", "[", "fileImported", "]"}], "\[LeftDoubleBracket]", 
     "rand", "\[RightDoubleBracket]"}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Small"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.740237593130468*^9, 3.740237602470068*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"6e6a478e-561c-4e52-981a-5aab227b07ac"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Net to train", "Section",
 CellChangeTimes->{{3.740262959240334*^9, 
  3.740262962102436*^9}},ExpressionUUID->"ef3d612d-8d12-4265-bca9-\
c2d57a6ccfa6"],

Cell[CellGroupData[{

Cell["Loss Function", "Subsection",
 CellChangeTimes->{{3.740262965841907*^9, 
  3.740262969665165*^9}},ExpressionUUID->"c64564cb-2047-442f-9791-\
c16e8b884949"],

Cell["Connect the final net to a loss function:", "CodeText",ExpressionUUID->"804b7a98-15e4-479a-ab71-095ea70740eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LossNet", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<eval\>\"", "\[Rule]", "finalNet"}], ",", 
      RowBox[{"\"\<loss\>\"", "\[Rule]", 
       RowBox[{"CrossEntropyLossLayer", "[", "\"\<Index\>\"", "]"}]}]}], 
     "|>"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<eval\>\"", "\[Rule]", "\"\<loss\>\""}], "}"}]}], " ", 
   "]"}]}]], "Input",
 CellLabel->"In[98]:=",ExpressionUUID->"b08e2096-d14d-4c2a-9ba9-6b99b3cb8f5b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    0.6}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., 1.8369701987210297`*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{12, 12}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, BaseStyle -> 
                    GrayLevel[0.4], ImageMargins -> 0., ImagePadding -> 0, 
                    ImageSize -> 16, PlotRange -> All, PlotRangePadding -> 
                    1], {-2., 1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"eval\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["eval", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[5]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    Hue[0, 0.7, 0.9]], 
                    FaceForm[
                    RGBColor[
                    0.9333333333333333, 0.5133333333333334, 
                    0.5133333333333334]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox["\"CE\"", 
                    Offset[{0, -1}, {-0.9999999999999999, 1.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CrossEntropyLossLayer", "[", 
                    RowBox[{"\"Index\"", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"500", ",", "500", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Target\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"500", ",", "500", ",", 
                    RowBox[{"Restricted", "[", 
                    RowBox[{"\"Integer\"", ",", "2"}], "]"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["loss", Bold], 
                    Style[
                    HoldForm[
                    CrossEntropyLossLayer[
                    "Index", "Input" -> {500, 500, 2}, 
                    "Target" -> {500, 500, 
                    Restricted["Integer", 2]}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2., 1.0000000000000002`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-3., 1.8369701987210297`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox["\"eval\"", 
                    Offset[{0, -15}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"loss\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Target\"", 
                    Offset[{0, -7}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Loss\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"500\"", 
                    "\"500\""}, "RowWithSeparators"], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"500\"", "\"500\"", 
                    "\"2\""}, "RowWithSeparators"], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    0.6}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"500\"", "\"500\""}, 
                    "RowWithSeparators"], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 
                    1.}, {-2., 1.0000000000000002`}, {6.123233995736766*^-17, 
                    1.}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 20, 8, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {29., 18.}}, 
                    ImageSize -> {221., 102.}, PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "eval"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {500, 500}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, "VarianceImage" -> 
                    None], 
                    
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Target" -> 
                    NeuralNetworks`TensorT[{500, 500}, 
                    NeuralNetworks`IndexIntegerT[2]]], 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "eval" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["conv1a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 3, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {500, 500}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["conv1a" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn2a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {500, 500}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{64, 500, 
                    500}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{64, 500, 
                    500}, NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 500, 500}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{64, 500, 
                    500}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{64, 500, 
                    500}, NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "2a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{128, 250, 250},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "conv1a"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus", "Outputs", "Output"]}], "2b1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["2a_plus" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn2b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "2b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{128, 250, 250},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Outputs", "Output"]}], "2b2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["2b1_plus" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn2b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "2b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{128, 250, 250},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Outputs", "Output"]}], "3a" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["2b2_plus" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn3a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    256}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "3a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{256, 125, 125},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus", "Outputs", "Output"]}], "3b1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["3a_plus" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn3b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    256}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    256}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "3b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{256, 125, 125},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Outputs", "Output"]}], "3b2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["3b1_plus" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn3b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    256}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    256}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "3b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{256, 125, 125},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Outputs", "Output"]}], "4a" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["3b2_plus" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn4a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    256}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "4a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a_plus", "Outputs", "Output"]}], "4b1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["4a_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn4b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "4b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Outputs", "Output"]}], "4b2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["4b1_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn4b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "4b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Outputs", "Output"]}], "4b3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["4b2_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn4b3_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "4b3_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Outputs", "Output"]}], "4b4" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["4b3_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn4b4_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "4b4_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Outputs", "Output"]}], "4b5" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["4b4_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn4b5_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "4b5_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Outputs", "Output"]}], "5a" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["4b5_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn5a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "5a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b5_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a_plus", "Outputs", "Output"]}], "5b1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["5a_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn5b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "5b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Outputs", "Output"]}], "5b2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["5b1_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn5b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "5b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Outputs", "Output"]}], "6a" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["5b2_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn6a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.3, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "6a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a_plus", "Outputs", "Output"]}], "7a" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["6a_plus" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn7a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4096, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4096, 63, 
                    63}, NeuralNetworks`RealT]]], "7a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4096, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "6a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a_plus", "Outputs", "Output"]}], "bn7" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    4096}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 4096, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 4096, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "conv1a"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Inputs", "2a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Inputs", "2b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Inputs", "2b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Inputs", "3a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Inputs", "3b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Inputs", "3b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Inputs", "4a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Inputs", "4b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Inputs", "4b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Inputs", "4b3_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Inputs", "4b4_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Inputs", "4b5_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Inputs", "5a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Inputs", "5b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Inputs", "5b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Inputs", "6a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 2, "KernelSize" -> {3, 3},
                     "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Resize", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{500, 500}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "$Channels" -> 2, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]], "loss" -> 
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {500, 500},
                     "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{500, 500}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "\" of \"", 
                    TemplateBox[{"\"indices\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"range\"",
                     "\":\"", "\" \"", 
                    TemplateBox[{"1", "\"..\"", "2"}, "RowDefault"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"], "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {353., {20.1669921875, 25.3330078125}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7402376597380743`*^9, 3.7402567801945868`*^9, 
  3.7402742513858852`*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"70157105-1d7b-4b83-be58-72e5670e3a98"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initialize and export the net to train", "Subsection",
 CellChangeTimes->{{3.7402634824674053`*^9, 
  3.740263511747629*^9}},ExpressionUUID->"e77bc74f-7547-4eee-883d-\
4d128f8d81c6"],

Cell["Initialize the LossNet:", "CodeText",ExpressionUUID->"91fe5b57-90e3-4097-bf89-3be6419d21cf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"iniLossNet", "=", 
  RowBox[{"NetInitialize", "[", "LossNet", "]"}]}]], "Input",
 CellLabel->"In[99]:=",ExpressionUUID->"32cdd7e4-3f77-4d2c-ae13-55f99770c0bc"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    0.6}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., 1.8369701987210297`*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{12, 12}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-2., 
                    1.2246467991473532`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"eval\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["eval", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[5]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9333333333333333, 0.5133333333333334, 
                    0.5133333333333334]], 
                    EdgeForm[
                    Hue[0, 0.7, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox[
                    FormBox["\"CE\"", TraditionalForm], 
                    Offset[{0, -1}, {-0.9999999999999999, 1.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"CrossEntropyLossLayer", "[", 
                    RowBox[{"\"Index\"", ",", 
                    RowBox[{"\"Input\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"500", ",", "500", ",", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Target\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"500", ",", "500", ",", 
                    RowBox[{"Restricted", "[", 
                    RowBox[{"\"Integer\"", ",", "2"}], "]"}]}], "}"}]}]}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["loss", Bold], 
                    Style[
                    HoldForm[
                    CrossEntropyLossLayer[
                    "Index", "Input" -> {500, 500, 2}, 
                    "Target" -> {500, 500, 
                    Restricted["Integer", 2]}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2., 1.0000000000000002`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-3., 1.8369701987210297`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"eval\"", TraditionalForm], 
                    Offset[{0, -15}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"loss\"", TraditionalForm], 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    Offset[{0, -7}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"3\"", "\"500\"", 
                    "\"500\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"500\"", "\"500\"", 
                    "\"2\""}, "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    0.6}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Cross]", "\"\[Cross]\"", "\"500\"", "\"500\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, FontColor -> GrayLevel[0.7], 
                    FontSize -> 8, FontWeight -> "Thin", StripOnInput -> 
                    False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 
                    1.}, {-2., 1.0000000000000002`}, {6.123233995736766*^-17, 
                    1.}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 20, 8, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {221., 102.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {29., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "eval"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {500, 500}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, "VarianceImage" -> 
                    None], 
                    
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Target" -> 
                    NeuralNetworks`TensorT[{500, 500}, 
                    NeuralNetworks`IndexIntegerT[2]]], 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], 
                    Association[
                    "eval" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["conv1a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 3, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {500, 500}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["conv1a" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn2a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {500, 500}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{64, 500, 
                    500}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{64, 500, 
                    500}, NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 500, 500}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{64, 500, 
                    500}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{64, 500, 
                    500}, NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "2a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{128, 250, 250},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "conv1a"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus", "Outputs", "Output"]}], "2b1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["2a_plus" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn2b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "2b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{128, 250, 250},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Outputs", "Output"]}], "2b2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["2b1_plus" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn2b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "2b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{128, 250, 250},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Outputs", "Output"]}], "3a" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["2b2_plus" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn3a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{128, 250, 
                    250}, NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    256}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "3a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{256, 125, 125},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus", "Outputs", "Output"]}], "3b1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["3a_plus" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn3b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    256}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    256}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "3b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{256, 125, 125},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Outputs", "Output"]}], "3b2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["3b1_plus" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn3b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    256}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    256}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "3b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{256, 125, 125},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Outputs", "Output"]}], "4a" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["3b2_plus" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn4a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    256}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{256, 125, 
                    125}, NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "4a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a_plus", "Outputs", "Output"]}], "4b1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["4a_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn4b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "4b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Outputs", "Output"]}], "4b2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["4b1_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn4b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "4b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Outputs", "Output"]}], "4b3" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["4b2_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn4b3_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "4b3_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Outputs", "Output"]}], "4b4" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["4b3_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn4b4_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "4b4_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Outputs", "Output"]}], "4b5" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["4b4_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn4b5_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "4b5_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Outputs", "Output"]}], "5a" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["4b5_plus" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn5a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "5a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b5_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "1"] -> N\
euralNetworks`NetPath["Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a_plus", "Outputs", "Output"]}], "5b1" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["5a_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn5b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "5b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Outputs", "Output"]}], "5b2" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["5b1_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn5b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "5b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Outputs", "Output"]}], "6a" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["5b2_plus" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn6a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> NeuralNetworks`Private`DummyRawArray[{
                    512}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{512, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.3, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "6a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a_plus", "Outputs", "Output"]}], "7a" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["6a_plus" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["bn7a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4096, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{1024, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{2048, 63, 
                    63}, NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4096, 63, 
                    63}, NeuralNetworks`RealT]]], "7a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{4096, 63, 
                    63}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "6a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a_plus", "Outputs", "Output"]}], "bn7" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    4096}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 4096, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 4096, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "conv1a"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Inputs", "2a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Inputs", "2b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Inputs", "2b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Inputs", "3a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Inputs", "3b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Inputs", "3b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Inputs", "4a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Inputs", "4b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Inputs", "4b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Inputs", "4b3_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Inputs", "4b4_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Inputs", "4b5_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Inputs", "5a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Inputs", "5b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Inputs", "5b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Inputs", "6a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{2}]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 2, "KernelSize" -> {3, 3},
                     "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Resize", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{500, 500}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "$Channels" -> 2, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]], "loss" -> 
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {500, 500},
                     "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{500, 500}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "\" of \"", 
                    TemplateBox[{"\"indices\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"range\"",
                     "\":\"", "\" \"", 
                    TemplateBox[{"1", "\"..\"", "2"}, "RowDefault"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"], "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740237660972139*^9, 3.740256793076517*^9, 
  3.740274255484334*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"e403d47c-bd6c-46da-af28-4957c5245f28"]
}, Open  ]],

Cell["Export the complete net for training:", "CodeText",
 CellChangeTimes->{{3.7402568001166763`*^9, 
  3.740256805228807*^9}},ExpressionUUID->"72dab291-480d-4eaa-b652-\
0dbdd14d2dbc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<iniLossNet.wlnet\>\"", ",", "iniLossNet"}], "]"}]], "Input",
 CellChangeTimes->{{3.7402376849193573`*^9, 3.74023772222617*^9}, 
   3.740274266089855*^9},
 CellLabel->
  "In[100]:=",ExpressionUUID->"e4502c17-f471-4b32-b244-057fcf519cc3"],

Cell[BoxData["\<\"iniLossNet.wlnet\"\>"], "Output",
 CellChangeTimes->{3.740237737216077*^9, 3.7402568271356153`*^9, 
  3.7402742708684483`*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"d86567fb-9f89-4ac6-9e6a-37972d3eab1e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Test the LossNet", "Subsubsection",
 CellChangeTimes->{{3.740263517533349*^9, 
  3.740263530927209*^9}},ExpressionUUID->"ff1d2bd7-4d51-4480-9260-\
cedc6cf18b78"],

Cell["Test the LossNet with two input forms:", "CodeText",
 CellChangeTimes->{{3.740263543313458*^9, 
  3.740263555642091*^9}},ExpressionUUID->"18b07605-307f-40be-9488-\
3978231d024e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"iniLossNet", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
     RowBox[{"fileImported", "\[LeftDoubleBracket]", 
      RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}]}], ",", 
    RowBox[{"\"\<Target\>\"", "\[Rule]", " ", 
     RowBox[{"fileImported", "\[LeftDoubleBracket]", 
      RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}]}]}], "|>"}], 
  "]"}]], "Input",
 CellLabel->
  "In[101]:=",ExpressionUUID->"a011fe51-7d3a-4371-87a3-72592ae86bec"],

Cell[BoxData["0.6230511665344238`"], "Output",
 CellChangeTimes->{3.740237765340736*^9, 3.740274297891716*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"e0be0152-7e28-4729-b426-b2bcc1c7b83c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"iniLossNet", "[", 
  RowBox[{
  "fileImported", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
  "]"}]], "Input",
 CellLabel->
  "In[102]:=",ExpressionUUID->"f976eb43-1c88-4b76-b85e-62091816cdd6"],

Cell[BoxData["0.6230511665344238`"], "Output",
 CellChangeTimes->{3.740237788979609*^9, 3.740274388594049*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"68eea331-922c-4942-a7bd-ef59fbdddd65"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generator function", "Chapter",ExpressionUUID->"afabc96c-6480-4a5c-8a91-b0edb93c2964"],

Cell[CellGroupData[{

Cell["Reduce Dataset Size", "Subchapter",
 CellChangeTimes->{{3.740263005005333*^9, 
  3.7402630166194696`*^9}},ExpressionUUID->"16ca443a-0b40-4c5d-afe0-\
190bc837914a"],

Cell["From the MX files created in section", "Text",
 CellChangeTimes->{{3.7402630270911493`*^9, 
  3.740263046054851*^9}},ExpressionUUID->"61bb5500-4fcf-4f55-8722-\
0f14f871e446"],

Cell["Set the file path for the MX files:", "CodeText",ExpressionUUID->"34bff1df-7be4-489a-8749-164b0301e15d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"path", "=", "\"\<MXFiles/\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mxFiles", "=", 
   RowBox[{"FileNames", "[", 
    RowBox[{"path", "<>", "\"\<*.mx\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"mxFiles", ",", "1"}], "]"}], "\[LeftDoubleBracket]", "1", 
  "\[RightDoubleBracket]"}]}], "Input",
 CellChangeTimes->{3.7402745776994267`*^9},
 CellLabel->
  "In[103]:=",ExpressionUUID->"5c699b60-1ec7-47d8-aeab-38743840c580"],

Cell[BoxData["\<\"MXFiles/File1.mx\"\>"], "Output",
 CellChangeTimes->{3.740241785783037*^9, 3.740264706363813*^9, 
  3.740274579220735*^9},
 CellLabel->
  "Out[105]=",ExpressionUUID->"1c6cdcc6-d6c6-45e0-8a09-990a7f8a0463"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Binary Files", "Section",ExpressionUUID->"74164fd8-f240-4d80-b54c-a9b13c251c17"],

Cell["\<\
Binary files are a way to reduce of the size while importing the train set. \
Once the files are binarize the file size reduces and ones read in can be \
deserialize. At the same time TIF images were converted to JPG to remove \
unnecessary information while reducing size. \
\>", "Text",
 CellChangeTimes->{{3.740264718186911*^9, 3.740264860397263*^9}, {
  3.740264914273271*^9, 
  3.740265032288308*^9}},ExpressionUUID->"b6b333ee-97c6-4b2e-9a1e-\
481b181b13c9"],

Cell[CellGroupData[{

Cell["Binary write", "Subsection",ExpressionUUID->"d8596816-a0bd-49e7-9b86-323df97d9a18"],

Cell["Binary write:", "CodeText",ExpressionUUID->"45526cc8-a93b-47ba-a939-aba5dd6709a1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"binaryWrite", "[", 
   RowBox[{"file_", ",", "expr_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"bytes", "=", 
      RowBox[{"BinaryWrite", "[", 
       RowBox[{"file", ",", 
        RowBox[{"BinarySerialize", "[", "expr", "]"}]}], "]"}]}], "}"}], ",", 
    
    RowBox[{
     RowBox[{"Close", "[", "file", "]"}], ";", "\[IndentingNewLine]", 
     "bytes"}]}], "]"}]}]], "Code",
 CellLabel->"In[62]:=",ExpressionUUID->"07fcbf73-3fe3-413c-b395-d89092e54542"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Import and Reexport Function", "Subsection",ExpressionUUID->"28ca32e5-eb2c-41ea-ba0b-162aa962bac0"],

Cell["Function to convert TIF images to JPG and matrix to Binary:", "CodeText",ExpressionUUID->"0db7d084-3db1-49d3-b1fe-9d756b910e36"],

Cell[BoxData[
 RowBox[{
  RowBox[{"importAndReExport", "[", 
   RowBox[{"path_", ",", "folder_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"imported", ",", "imgs", ",", "masks", ",", "hashes"}], "}"}], 
    ",", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"imported", "=", 
      RowBox[{"Import", "[", "path", "]"}]}], ";", "\[IndentingNewLine]", 
     "\t", 
     RowBox[{"imgs", "=", 
      RowBox[{"imported", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]",
      "\t", 
     RowBox[{"masks", "=", 
      RowBox[{"imported", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]",
      "\t", 
     RowBox[{"hashes", "=", 
      RowBox[{"Hash", "/@", "imgs"}]}], ";", "\[IndentingNewLine]", "\t", 
     "\n", "\t", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Export", "[", 
            RowBox[{
             RowBox[{"folder", "<>", "\"\</\>\"", "<>", 
              RowBox[{"ToString", "[", "#1", "]"}], "<>", "\"\<.jpg\>\""}], 
             ",", "#2"}], "]"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"hashes", ",", "imgs"}], "}"}]}], "]"}], ";"}], "//", 
       "AbsoluteTiming"}], "]"}], ";", "\[IndentingNewLine]", "\t", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"binaryWrite", "[", 
            RowBox[{
             RowBox[{"folder", "<>", "\"\</\>\"", "<>", 
              RowBox[{"ToString", "[", "#1", "]"}], "<>", "\"\<.bin\>\""}], 
             ",", "#2"}], "]"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"hashes", ",", "masks"}], "}"}]}], "]"}], ";"}], "//", 
       "AbsoluteTiming"}], "]"}], ";", "\[IndentingNewLine]", "\t", "\n", 
     "\t", 
     RowBox[{"Clear", "[", 
      RowBox[{"imported", ",", "imgs", ",", "masks", ",", "hashes"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Code",
 CellChangeTimes->{{3.740241811505365*^9, 3.740241812368166*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"fa2c85d2-5978-4a72-9f05-bdf743d1c6d9"],

Cell["\<\
Take each MX file and create the correspondent JPG and BIN file :\
\>", "Text",
 CellChangeTimes->{{3.7402419120013227`*^9, 
  3.740241914616363*^9}},ExpressionUUID->"8dacb109-e97f-4fa5-87a3-\
81d0e75b0b06"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"importAndReExport", "[", 
    RowBox[{
     RowBox[{"mxFiles", "[", 
      RowBox[{"[", "i", "]"}], "]"}], ",", " ", "\"\<binFiles\>\""}], "]"}], 
   ",", " ", 
   RowBox[{"{", 
    RowBox[{"i", ",", " ", "1", ",", " ", 
     RowBox[{"Length", "[", "mxFiles", "]"}], ",", " ", "1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.740241908954829*^9, 3.74024191966827*^9}, {
  3.740274608311524*^9, 3.74027462379445*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"c0a73cb9-bb09-4787-961b-6567b36649ce"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"11.740287`", ",", "Null"}], "}"}]], "Print",
 CellChangeTimes->{3.74027481768237*^9},
 CellLabel->
  "During evaluation of \
In[109]:=",ExpressionUUID->"9bfad53b-3adf-4473-bbe3-c230df5d6ffe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.526345`", ",", "Null"}], "}"}]], "Print",
 CellChangeTimes->{3.740274818202477*^9},
 CellLabel->
  "During evaluation of \
In[109]:=",ExpressionUUID->"9df52c47-ce7b-40c6-99e6-2f58e20ba4d3"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", "Null", "}"}]], "Output",
 CellChangeTimes->{3.740274630768588*^9, 3.7402747654030724`*^9, 
  3.74027481822294*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"d37b4035-1d90-4a7c-b427-059ca18dd1fe"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Binary Read", "Subsection",ExpressionUUID->"8fdb7428-2d2e-42dd-b436-992c65c60038"],

Cell["Read the binary file and Deserialize the file:", "CodeText",ExpressionUUID->"d19e1440-db9d-4bd2-a6e9-62f42e046d25"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"BinaryDeserialize", "[", 
   RowBox[{
   "ReadByteArray", "[", 
    "\"\</Users/enricocastro/Documents/GitHub/Project/binFiles/\
74004748475675200.bin\>\"", "]"}], "]"}], "//", "Dimensions"}]], "Input",
 CellChangeTimes->{{3.740242218708037*^9, 3.7402422856884317`*^9}, {
  3.7402749417182283`*^9, 3.7402749634860773`*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"30722d1c-3f3e-440f-b290-fe979ca0dd32"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"500", ",", "500"}], "}"}]], "Output",
 CellChangeTimes->{{3.7402422239374332`*^9, 3.740242286979823*^9}, 
   3.740274965204134*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"e3d89b37-7426-4fb7-922e-892e4f2f34de"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "FileNames", "[", 
   "\"\</Users/enricocastro/Documents/GitHub/Project/binFiles/*.bin\>\"", 
   "]"}], "//", "Length"}]], "Input",
 CellChangeTimes->{{3.740274968488009*^9, 3.74027498016539*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"660cb822-1de4-4849-913b-5769b077397e"],

Cell[BoxData["100"], "Output",
 CellChangeTimes->{{3.7402749750634623`*^9, 3.740274980616132*^9}},
 CellLabel->
  "Out[112]=",ExpressionUUID->"52b24864-ad22-4724-8c34-b9db8e7ed34c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Training Out of Core", "Chapter",ExpressionUUID->"8fe39e5a-780a-4b9a-9576-c1c4fea5b1a4"],

Cell[CellGroupData[{

Cell["Partitional Function", "Subchapter",ExpressionUUID->"1fb6bce5-f8ed-4535-997f-4218267cba81"],

Cell[CellGroupData[{

Cell["Data from MX files", "Subsection",
 CellChangeTimes->{{3.74026507208465*^9, 3.740265072469234*^9}, {
  3.7402657338501987`*^9, 
  3.740265737375581*^9}},ExpressionUUID->"4e56395e-8fb4-4a1d-97c3-\
d9beff1bfbc3"],

Cell["Take the name of the JPG and BIN files:", "CodeText",
 CellChangeTimes->{{3.740242779590252*^9, 
  3.740242805637068*^9}},ExpressionUUID->"97442194-44b4-472e-bf9b-\
697f89c8e999"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingDataSet", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
     "FileNames", "[", 
      "\"\</Users/enricocastro/Documents/GitHub/Project/binFiles/*.jpg\>\"", 
      "]"}], ",", " ", 
     RowBox[{
     "FileNames", "[", 
      "\"\</Users/enricocastro/Documents/GitHub/Project/binFiles/*.bin\>\"", 
      "]"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740274993291408*^9, 3.740274998601948*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"7309f90f-f9cb-4957-81eb-70d75e448e0a"],

Cell["Set the data to train:", "CodeText",
 CellChangeTimes->{{3.740242854077458*^9, 
  3.740242860420114*^9}},ExpressionUUID->"b47649d6-2795-45eb-8d7a-\
0278297815ff"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"imageDataSet", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"File", "[", 
      RowBox[{"trainingDataSet", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "i"}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "10"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"imageDataSet", "//", "ByteCount"}]}], "Input",
 CellChangeTimes->{{3.740242868119214*^9, 3.740242868689576*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"b87732a6-bd50-41f9-b2a4-e1ee4f7a45bf"],

Cell[BoxData["1640"], "Output",
 CellChangeTimes->{3.740242869167259*^9, 3.740265782658729*^9, 
  3.7402750049782267`*^9},
 CellLabel->
  "Out[115]=",ExpressionUUID->"88065fc6-95dd-4eb7-99ea-94f8cd80b74b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"maskDataSet", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"ReadByteArray", "[", 
      RowBox[{"trainingDataSet", "[", 
       RowBox[{"[", 
        RowBox[{"2", ",", "i"}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "10"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"maskDataSet", "//", "ByteCount"}]}], "Input",
 CellChangeTimes->{{3.740242884386856*^9, 3.740242929528125*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"d19636d2-a03f-4769-ae38-270cb60d5595"],

Cell[BoxData["2501170"], "Output",
 CellChangeTimes->{{3.740242903657103*^9, 3.7402429198655033`*^9}, 
   3.7402429502019577`*^9, 3.740265783855528*^9, 3.740275007137476*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"c4e3aab5-5059-418d-a949-802308d7f751"]
}, Open  ]],

Cell["\<\
Associate the image with his respective mask and take a random sample:\
\>", "CodeText",
 CellChangeTimes->{{3.7402429717469463`*^9, 
  3.7402430165875883`*^9}},ExpressionUUID->"06fd4f7b-9464-4202-b736-\
c4d07cee60be"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"RandomSample", "@", 
    RowBox[{"Thread", "[", 
     RowBox[{"imageDataSet", "\[Rule]", "maskDataSet"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"data", "\[LeftDoubleBracket]", "2", 
  "\[RightDoubleBracket]"}]}], "Input",
 CellChangeTimes->{{3.7402430252681417`*^9, 3.740243025573854*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"4ba87484-9a1d-439c-8395-539d93216144"],

Cell[BoxData[
 RowBox[{
  RowBox[{"File", "[", 
   TemplateBox[{
    "\"/Users/enricocastro/Documents/GitHub/Project/binFiles/\
1704941998246832348.jpg\""},
    "FileArgument"], "]"}], "\[Rule]", 
  InterpretationBox[
   RowBox[{
    TagBox["ByteArray",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
             GridBox[{{
                TagBox["\"250.0 kB\"", "SummaryItem"]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             GridBox[{{
                TagBox["\"250.0 kB\"", "SummaryItem"]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   ByteArray[CompressedData["
1:eJzt1o1xJEUQBWGJswQvCMzABBzAHszBA4w5A4gLCP5OqxvtVHdW18vPgq6X
sSN9//MvP/38+vLy8uvvn15++PG3l+8+f/r86XW4F32FbrIavW9HdJPV6H07
opssRw/cEJ1kOXrghugky9EDN0QnWY9euB+6yHr0wv3QRdajF+6HLrIBPXE7
dJAN6InboYNsQE/cDh1kB3rjbugeO9Abd0P32IHeuBu6xxb0yM3QObagR26G
zrEFPXIzdI496JV7oWvsQa/cC11jD3rlXugam9Azl6g6g46xSc1YpMI72BTb
lGzFqb0D7LBVyViM8jOoBruVjAVYcQexP6Fiq+0W3bF9fErFWFutO2Pv8KCK
sfZZese+0WEFW+2y+o5NizdQMNYOG87YsXYPBWMtt+eO1Uv3cX+rxbbdsXTm
Vu5vtdLOO9Zt3M79sVbZfMeaeVsqiLPC/jsWbNtVQZ9yyCHFu7ZWEakSdUfl
pt1VdCoD3lE26AEqUtVgDykZ8xQlvW7D77j/gIOUJLunwx0lbzhFSbUOYzd5
xhFq0vFL93lJfzX1+JlbPaa5moANNu72ns6KKuIDN3xSW0Uh8XGbPqulopj8
sn1f1k9VUXrW1o9rpioqvWn393VS1RUf9IAntlEWF17zjFf2UNYXnvKYhzZQ
lpje8aS30uo6syMe9lxUXWp2wfNezKmrDc935KMhI4LfuQN+N2FE8Dt30A8H
jAj+xdmv32tE8Febf8SI4K82/4gRwb8YcsYWU5ay+XVTZrL5dWM2svl1Uway
+XVT1rH5dWOmsfl1U3ax+XVjNrH5ZWMGsfl1U9aw+XVjprD5ZWN2sPl1U0aw
+XVDFngi+eEX3zDh/GeCH3/0Haff/mTw6OYne763zY90L7jNj3M7uM3PUhHc
5gcpCm7zU9QFt/kRSoPbvL/q4DZvbkFwm3e2JrjN21oW3OY9rQxu834W97Z5
NxuC27yTPcFt3sa24DbvYWdwmzewObjNafuD2xyFBLc5hwpucwgY3OYENrjN
t6N7f0FvEIWO/Rd6hhx06X/QS4SgM/8HPUYCuvH/0XuMRwd+Az3JbHTdt9Gr
DEanfYgeZiq663vobUaio34DPc88dNFvoxcahs55CT3SJHTLq+idxqBDfgA9
1Qh0xA+i5zofXfDj6MUOR+d7Cj3ayeh2z6J3OxYd7gZ6ujPR1e6h1zsQnew2
esDT0L0q0BsehY5VhJ7xHHSpOvSSh6AzlaLHPAHdqBq9Z3t0oAXoSXuj66xB
r9oYnWYZetiu6C4r0du2REdZjJ63H7rIevTCzdA5tqBH7oRusQu9cxt0iI3o
qXugK+xFr90AnWA7enAavT+B3pxEb0+hd8fQw4Po6Rn06ix6fQA9OY4OsBu9
dwd0g63osZugM+xDL90HXWITeuZW6Bg70Bt3Q/dYjh64ITrJWvS6PdFVFqKn
bYsOswq9a2d0myXoUZuj89SjF+2PLlSMnvMIdKRK9JanoDuVoYc8CJ2qBr3i
WehaBegJj0MHu4ve70R0s1vo8Q5FZ3sevdy56HJPomc7Gh3vGfRmp6P7fRS9
1wR0ww+hxxqCzngdvdQcdMmL6JlGoWNeQW80Dd3zm+iBBqKTvo9eZya66jvo
acaiwz5C7zIZ3fZN9CjD0Xm/Ri8yH134f+g5ItCR/43eIgXd+W/0EEHo1H+i
V8hC1341+HYGz2PwPAbPY/A8Bs9j8DwGz2PwPAbPY+88Bs9j8DwGz2PwPAbP
Y/A8Bs9j8DwGz2PwPAbPY/A8Bs9j8DwGz2PwPAbPY/A4Bk9j8DAGT2PwNAZP
Y/A09g5j8DQGT2PwNA8SG3yshz9qg8/03lfc4BO9/3fb4PP4n1oai4cxeBqL
p7F4GouHeTO4xQczeBqLp7F4GP+MpzF4GounsXgYg6exeBqLh3kzuMUHM3ga
i4fxo57G4GksHsaPehqDp7F4GD/qaQwexp94GouHMXgai4d5O7jF5zJ4GH/i
YQyexuJhDJ7G4mEMHuZBcIuPZfAw/sTTGDyMwcP4TQ9j8DQWD2PwMAYP8yi4
xacyeBiDh/GbHsbgYQyexuBh/ImHMXgYg4cxeJiHwS0+k8HDGDyMwcMYPIzB
wxg8jMHDPA5u8ZEMHsbgYQwexuBhDB7G4GEMHsbgYewdxuBhDB7G4GEMHsbg
YQwexuBhDJ7lcW+Dj2TwMAYPY/AwBg9j8DAGD2PwMAYPY/AwBg9j8DAGD2Pw
MAYPY/AwBg9j8DD2DmPwMAYPY/AwBg9j8DAGD2PwLI97G3wkg4cxeBiDhzF4
GIOHMXgYg4cxeBiDhzF4GIOHMXgYg4cxeBiDhzF4GIOHsXcYg4cxeBiDhzF4
GIOHMXgYg2d53NvgIxk8jMHDGDyMwcMYPIzBwxg8jMHDGDyMwcMYPIzBwxg8
jMHDGDyMwcMYPIy9wxg8jMHDGDyMwcMYPIzBwxg8jcHzGDyPwfMYPI/B8xg8
j8HzGDyPwSVJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJknr5A7PC9KA=

    "]],
   Editable->False,
   SelectWithContents->True,
   Selectable->False]}]], "Output",
 CellChangeTimes->{3.740243027516632*^9, 3.740265785345833*^9, 
  3.740275012266233*^9},
 CellLabel->
  "Out[119]=",ExpressionUUID->"b83141f1-c3fb-42a0-9a00-734f0430ff40"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generator", "Subchapter",ExpressionUUID->"c1136be3-7041-4ccd-a840-3883810ddb5f"],

Cell[TextData[{
 "In order to train the net with a big amount of data a generator function \
was created. The generator function load a single batch of data from an \
external source to train each time. NetTrain[net, f, \[Ellipsis]] calls f at \
each training batch iteration, thus only keeping a single batch of training \
data in memory. The function can depend on the ",
 StyleBox["batch size",
  FontSlant->"Italic"],
 ", which can be set or set automatic by the computer, the ",
 StyleBox["absolute batch",
  FontSlant->"Italic"],
 " that is the number of batches load during the training and the ",
 StyleBox["round.",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.740243173487002*^9, 3.740243348592925*^9}, {
   3.740243447217785*^9, 3.7402436510441513`*^9}, 
   3.7402438144981956`*^9},ExpressionUUID->"4315ed5c-5772-48b3-be58-\
1b6efbc85af4"],

Cell["\<\
partGenerator associate and load a batch of size BatchSize into the net \
training. In order to do so it takes partitions of the whole dataset in \
batches of size BatchSize and load the element of this partition taking the \
module of the AbsoluteBatch. The function also adds one to the mask matrix to \
get the right values for the net:\
\>", "CodeText",
 CellChangeTimes->{{3.740243655240089*^9, 3.740243738070035*^9}, {
  3.7402438459971437`*^9, 3.740243958794168*^9}, {3.740244874529441*^9, 
  3.740244910658142*^9}},ExpressionUUID->"2e60b5d4-abca-4f14-91e2-\
91fa474b6f93"],

Cell[BoxData[
 RowBox[{
  RowBox[{"partGenerator", "=", 
   RowBox[{"Function", "[", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"batch", ",", "dataSet", ",", "batchData"}], "}"}], ",", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"ValueQ", "[", "partitionedData", "]"}]}], ",", 
         RowBox[{"partitionedData", "=", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"Length", "[", "data", "]"}], "]"}], ",", "#BatchSize", 
            ",", "#BatchSize", ",", "1"}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\t", 
       RowBox[{"Print", "[", 
        RowBox[{"Association", "@", 
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"Keys", "[", "#", "]"}], "\[Rule]", 
           RowBox[{"Values", "[", "#", "]"}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\t", 
       RowBox[{"batch", "=", 
        RowBox[{"Mod", "[", 
         RowBox[{"#AbsoluteBatch", ",", 
          RowBox[{"Floor", "[", 
           RowBox[{
            RowBox[{"Length", "@", "data"}], "/", "#BatchSize"}], "]"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", "\t", 
       RowBox[{"batchData", "=", 
        RowBox[{"data", "\[LeftDoubleBracket]", 
         RowBox[{"partitionedData", "[", 
          RowBox[{"[", 
           RowBox[{"Echo", "@", 
            RowBox[{"(", 
             RowBox[{"batch", "+", "1"}], ")"}]}], "]"}], "]"}], 
         "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", "\t", "\n", 
       "\t", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"Keys", "[", "batchData", "]"}], "\[Rule]", 
         RowBox[{"1", "+", 
          RowBox[{"BinaryDeserialize", "/@", 
           RowBox[{"Values", "[", "batchData", "]"}]}]}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"(*", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", "\[Rule]", 
         RowBox[{"Keys", "[", "batchData", "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "\[Rule]", 
         RowBox[{"BinaryDeserialize", "/@", 
          RowBox[{"Values", "[", "batchData", "]"}]}]}]}], "|>"}], "*)"}], 
     "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Code",
 CellLabel->"In[64]:=",ExpressionUUID->"33679b83-e63c-4b65-b479-3fb8f307a121"],

Cell[CellGroupData[{

Cell["Test of partGenerator", "Subsubsection",
 CellChangeTimes->{{3.740244033194064*^9, 
  3.740244048766527*^9}},ExpressionUUID->"8bd1379d-8df7-4d91-b593-\
d4811d56b669"],

Cell[BoxData[
 RowBox[{"Clear", "[", "partitionedData", "]"}]], "Input",
 CellLabel->
  "In[102]:=",ExpressionUUID->"6af23282-5c1c-407b-9d82-8fc7d1527df3"],

Cell[BoxData[
 RowBox[{"Animate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"partGeneratorData", "=", 
     RowBox[{"partGenerator", "[", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\"\<BatchSize\>\"", "\[Rule]", "2"}], ",", 
        RowBox[{"\"\<Round\>\"", "\[Rule]", "0"}], ",", 
        RowBox[{"\"\<AbsoluteBatch\>\"", "\[Rule]", "i"}]}], 
       "\[RightAssociation]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Keys", "[", "partGeneratorData", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "10", ",", "1"}], "}"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}], ",", 
   RowBox[{"Initialization", "\[RuleDelayed]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.740244070268793*^9, 3.740244134446457*^9}, {
  3.740244169566012*^9, 3.74024420410408*^9}, {3.740244243254519*^9, 
  3.740244259777563*^9}, {3.740244829708787*^9, 3.7402448418723593`*^9}, {
  3.740265795800125*^9, 3.740265798290372*^9}, {3.740272026744832*^9, 
  3.740272032856237*^9}},ExpressionUUID->"8c97bd56-df12-4e70-9dd4-\
d0ef39c8a07f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"partGeneratorData", "\[LeftDoubleBracket]", 
    RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "//", "Flatten"}], "//",
   "DeleteDuplicates"}]], "Input",
 CellLabel->"In[95]:=",ExpressionUUID->"d78b7116-912a-4b17-84bb-20c58dd89ca8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2"}], "}"}]], "Output",
 CellLabel->"Out[95]=",ExpressionUUID->"1b81fff7-9fab-4485-8a4b-1d13954c8c73"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train test", "Section",
 CellChangeTimes->{{3.7402658350625*^9, 
  3.740265838920219*^9}},ExpressionUUID->"01a2f2bb-34f5-48e0-bb3c-\
6f30e35a6e6a"],

Cell["\<\
Before training for a lot of data is always good to try first with a small \
set.\
\>", "Text",
 CellChangeTimes->{{3.740265848121881*^9, 3.74026591566671*^9}, {
  3.7402662073401537`*^9, 
  3.740266210634244*^9}},ExpressionUUID->"540f09fa-41ac-4b33-ae90-\
8711949386ff"],

Cell["Clear partitionedData for different batch sizes:", "CodeText",
 CellChangeTimes->{{3.740266288244788*^9, 
  3.740266305147029*^9}},ExpressionUUID->"b9c4a3e8-539f-4be2-9489-\
eb718a270cec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAll", "[", "partitionedData", "]"}], ";"}]], "Input",
 CellLabel->
  "In[105]:=",ExpressionUUID->"26a6bb4f-3c27-432f-a0fd-e8acea9cb348"],

Cell["Import the net to train:", "CodeText",
 CellChangeTimes->{{3.74026621978518*^9, 
  3.740266227679298*^9}},ExpressionUUID->"064802d8-d0b6-43f1-9f0a-\
cbad5111a89f"],

Cell[BoxData[
 RowBox[{"iniLossNet", "=", 
  RowBox[{
  "Import", "[", "\"\</Volumes/ECG/ProjectWSS/iniLossNet.wlnet\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740248090814055*^9, 3.740248101092111*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"24500fb0-7105-4e81-9d3e-2e10b967730f"],

Cell["Set the checkpoint directory:", "CodeText",
 CellChangeTimes->{{3.740266233231909*^9, 
  3.740266244517456*^9}},ExpressionUUID->"dcf61ec6-e64e-4309-b83f-\
db75e40ff9b1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"checkpointDir", "=", 
  "\"\</Volumes/ECG/ProjectWSS/AerialImageDataset/checkpoint\>\""}]], "Input",\

 CellLabel->
  "In[102]:=",ExpressionUUID->"be30aa53-bc37-473e-8adf-89fddce296b0"],

Cell[BoxData["\<\"/Volumes/ECG/ProjectWSS/AerialImageDataset/checkpoint\"\>"],\
 "Output",
 CellChangeTimes->{3.74024497456536*^9, 3.740248109874216*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"27d08d48-c7c5-43d4-9c32-3afb8ce04ef8"]
}, Open  ]],

Cell["Net training with partGenerator:", "CodeText",
 CellChangeTimes->{{3.740244996369385*^9, 3.74024500128174*^9}, {
  3.7402662503703947`*^9, 3.740266267936103*^9}, {3.740266317788912*^9, 
  3.740266319119144*^9}},ExpressionUUID->"6471d658-bf41-4046-87d4-\
185564487be5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"iniLossTrainNet", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"iniLossNet", ",", 
    RowBox[{"{", 
     RowBox[{"partGenerator", ",", 
      RowBox[{"\"\<RoundLength\>\"", "\[Rule]", "3"}]}], "}"}], ",", "All", 
    ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "3"}], ",", 
    RowBox[{"TrainingProgressCheckpointing", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Directory\>\"", ",", "checkpointDir"}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740248068728908*^9, 3.740248070680189*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"6b926bc7-e768-4ee6-9096-8cdd624582dc"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain","netmem2",
   "\"Insufficient memory to evaluate the network: at least \\!\\(\\*RowBox[{\
\\\"\\\\\\\"3.21 giga\\\\\\\"\\\"}]\\)bytes are required but only \
\\!\\(\\*RowBox[{\\\"\\\\\\\"2.33 giga\\\\\\\"\\\"}]\\)bytes are available \
for TargetDevice -> \\!\\(\\*RowBox[{\\\"\\\\\\\"CPU\\\\\\\"\\\"}]\\).\"",2,
   103,191,27404997103542520461,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.740248074331099*^9, 3.740248181418227*^9},
 CellLabel->
  "During evaluation of \
In[103]:=",ExpressionUUID->"9e5edf52-b64a-4b27-a6ea-586fbe209b7e"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.740248074372353*^9, 3.740248181464045*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"56073a85-fd06-4139-a32b-076bb920e814"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Trained Net", "Subchapter",
 CellChangeTimes->{{3.740190344239471*^9, 3.740190344921117*^9}, {
  3.740227275170216*^9, 3.7402272856707172`*^9}, {3.740252723894614*^9, 
  3.740252726606729*^9}},ExpressionUUID->"081b47af-45d3-47f3-bb33-\
ca6bae970858"],

Cell["\<\
Once trained one can look at the relevant information of the training \
process. \
\>", "Text",
 CellChangeTimes->{{3.740266332058381*^9, 
  3.7402664752281513`*^9}},ExpressionUUID->"820769f5-4afc-4981-b974-\
8f4bdcb39c45"],

Cell["Import the trained net as an object:", "CodeText",
 CellChangeTimes->{{3.7402529214131823`*^9, 
  3.7402529352395763`*^9}},ExpressionUUID->"5a3a46c5-1a37-4213-bb2a-\
8ae80386ee8d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"finalTrainedNet", "=", 
  RowBox[{
  "Import", "[", 
   "\"\</Volumes/ECG/ProjectWSS/AerialImageDataset/TrainedNets/model_\
3740226865.mx\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.740175204587356*^9, 3.740175225132017*^9}, 
   3.740192874461741*^9, {3.740227289924099*^9, 3.7402273165810337`*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"ac48b651-3e0e-4a6e-b7a0-562f8dc6ce66"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetTrainResultsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      PanelBox[
       GridBox[{{
          GridBox[{{
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Total training time\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["\"16 h\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total rounds\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["10", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total batches\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["10000", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Batch size\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["3", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Method\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["\"ADAM\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Final round loss\"", "\":\""}, "RowDefault"],
                  "SummaryItemAnnotation"], 
                StyleBox["0.14352053428485437`", "SummaryItem"]}, {
                StyleBox[
                 
                 TemplateBox[{"\"Final validation loss\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["0.1659658575092908`", "SummaryItem"]}, {
                StyleBox[
                 
                 TemplateBox[{"\"Final round error\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["\"5.56%\"", "SummaryItem"]}, {
                StyleBox[
                 
                 TemplateBox[{"\"Final validation error\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["\"6.50%\"", "SummaryItem"]}}, BaselinePosition -> 
              Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.8}}, "Rows" -> {{0.7}}}], 
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Loss evolution plot\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox[
                 
                 TemplateBox[{"\"Error evolution plot\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"]}, {
                StyleBox[
                 GraphicsBox[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    LineBox[CompressedData["
1:eJwtzw0slHEcB3ALrVlklkVtvUhXmK07rcZM396VJZOiSaXRWoX15qXCEWVM
t3De6szhVEec1/N+5y6FuJDoRTfvOdfWZObt0Mvze7Znzz77/n7f///ZdjnE
M3CVnp4e/r7/vv8fnMaO7Dl2FqtP9t+DNxBnpXpQujLI2DQc4tbp23uuDDH+
zEX8x5bgWe9hxi/jYX3PcZ+xlvLwROh4hfoevBHGrjw4/77uGFlM82tTEBvH
T7URjTK+k4ZIR49jVuZjjAfS4fSpzjtHR/nhLDicWy6YnKC8+BmWLA6MCPjk
9TlgOcxJLgWRXXLBF5qHVXHHGd8SYpdo1N11ww/GhXlwsP82bBtK/pqPUcF9
ifWRCcYmIgglNWYVLPLBQmziGe23Caa+0BdYd7KYlVlJ++KXqNYEeM3k0bz6
Fb5kJXT3D1JuVgT1lIbrGEE+WgxnQ7+C1H7yvdew1XfvdpHTfkkJNOzd9tp5
+p/hUnQdz9NZaOj8JAmEbsZ6Va9pf0cZfq0eHzO9omEsK4M0ME0dKKK+c+W4
IOazPnBofroce09dO2/YS33JFQiRp/a71NH+zkrkG6zT78mm/eZKRAhLrqYn
TjL2rcKxu6o1diDPVOHteMb9lod0X141VgqjjCafU5+NFBNLtj+lFdSnlCI/
LO64RzTlfjVQaV2ttnOob7YGb54UBJTE0/zTWiiW2g6pdTRvV4e9MqVN+2Ny
Sx2kXuy28nmav1gPT2fFtMCU8vl6pOV2JpjVkFMbkGnmH+ENLWP7RtzcODqj
qaTz3zXCfu5H8pSOcv8mdG55oHw/RfliEzCjn9MeRubL0NXn5BNzlunnbpBD
sHmgp8yLybkBcsSKk3o8Q5k+bpkcGYuqBUEteVmOIh/rBV8x2a0ZrZG9Bg0x
1JfZjMPfReozpdQ31oyUBZNHQ5Y0z1GAExQQFSkjRytgvVQb3VpO+x0KRLkF
qtgOtG+pxAnt1vyOUq3sD9g8mPY=
                    "]]}, {}}, {{
                    Hue[0.59, 0.5, 0.9], 
                    
                    LineBox[{{1000, -0.5553833411280915}, {
                    2000, -0.708016051890277}, {3000, -0.6937240465876829}, {
                    4000, -0.6769618081787268}, {5000, -0.7693556327335125}, {
                    6000, -0.7776301899466475}, {7000, -0.650559562407027}, {
                    8000, -0.8072848206472791}, {9000, -0.7632321128855863}, {
                    10000, -0.7799812458178119}}]}, {
                    AbsolutePointSize[3.5], 
                    Hue[0.59, 0.5, 0.76], 
                    
                    PointBox[{{1000, -0.5553833411280915}, {
                    2000, -0.708016051890277}, {3000, -0.6937240465876829}, {
                    4000, -0.6769618081787268}, {5000, -0.7693556327335125}, {
                    6000, -0.7776301899466475}, {7000, -0.650559562407027}, {
                    8000, -0.8072848206472791}, {9000, -0.7632321128855863}, {
                    10000, -0.7799812458178119}}]}}}, ImageSize -> {132, 82}, 
                  Frame -> True, Axes -> None, AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, 
                  PlotRange -> {{0, 9856}, {-1.2, -0.2}}, 
                  GridLines -> {{1000, 2000, 3000, 4000, 5000, 6000, 7000, 
                    8000, 9000, 10000}, {{-2., 
                    GrayLevel[0.9]}, {-1., 
                    GrayLevel[0.9]}, {-1.6989700043360185`, 
                    GrayLevel[0.95]}, {-1.5228787452803374`, 
                    GrayLevel[0.95]}, {-1.3979400086720375`, 
                    GrayLevel[0.95]}, {-1.301029995663981, 
                    GrayLevel[0.95]}, {-1.2218487496163564`, 
                    GrayLevel[0.95]}, {-1.154901959985743, 
                    GrayLevel[0.95]}, {-1.0969100130080565`, 
                    GrayLevel[0.95]}, {-1.045757490560675, 
                    GrayLevel[0.95]}, {-0.6989700043360187, 
                    GrayLevel[0.95]}, {-0.5228787452803375, 
                    GrayLevel[0.95]}, {-0.39794000867203755`, 
                    GrayLevel[0.95]}, {-0.30102999566398114`, 
                    GrayLevel[0.95]}, {-0.22184874961635626`, 
                    GrayLevel[0.95]}, {-0.1549019599857432, 
                    GrayLevel[0.95]}, {-0.09691001300805638, 
                    GrayLevel[0.95]}, {-0.04575749056067506, 
                    GrayLevel[0.95]}}}, PlotRangePadding -> {0, 
                    Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
                  GrayLevel[1], FrameStyle -> GrayLevel[0.5], GridLinesStyle -> 
                  GrayLevel[0.93], FrameLabel -> None, ImagePadding -> 1, 
                  FrameTicks -> None], "SummaryItem"], 
                StyleBox[
                 GraphicsBox[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    LineBox[CompressedData["
1:eJwt0A1MzHEYB/BTRu9ibTeZUq1ieVlMqq36SnJquGlYI7mW2Hqh0GK4f4ZI
VNKLQ0vvdZU6V6ery92FGlneSoUU0qmlid4Uefk9/+2//z77fZ/n9zx/m5BD
2/fr8Xg8/H3/ff8/CMCehMSx2SmNXv/dE4GB98NrFxurmc3jEM/X4wzPNjB3
cNBbXzt3Jq6OufgcwqJmpRybU88cl4jMoLhXBUm1zIJkRC4y/9IvobzJVewt
9k/g7alhPnoNfQUj+bwC8tsMpI4YrQr9RPa5jq0WPocsRuTMZTdQssT1cZt9
NbNFNhzclhvsNCZ75uD0UHHXr+a7zDG3kZ8gXn5KTC7MhbBXJ5yfL2PuykPb
wZnNF1yrmM0K0GYQu6t0A9m7EOfawkr2C6g+tggvfUzdBUFUX1qMh1bOkrJN
lO8uQfuikFThM/ICKex+fS/qFVPetwyeXqpB0RU6P1EOo8sS/r6DlcwVFXD3
ruMJpLTvhzsIic669fUN1V+qhIR/9ZjMlmxfhbBwy+Er1neY71dhyqM1UjZK
/QJlSDF97r0lnfLfZbCZEGQnrKB9Lt/FYumEn6OugtlRDm6ls77JaZpPI0dr
ntSydbqceXc1rJwDDAVCyo9WQ/RE5ejrTv8/uQZCPzOPm+M0zzIFDg84ncno
pHkaFdDVn89ViOg86B7ymooMlEPUb/welEPHo4Y/Uj61FtO98x6866G8kxKd
SZYLpQryQyW0n/2iWoooH1yHpAMbl/ZfJE/WIWdwQ3BeO/VPq0e37Q+XIw5l
zCtUeJHSZ67bRvs1qaBxU2lD9UuZRQ3Q2K3pGeqg/FQD4kXvYyMqKZ9+Hxdd
BBGrQ9k8HF+NR11a67Bodh8XqsbXyaeekh4pc5UajnJ+81gn68/9ViNtJKcw
cCPZXwMT5befrzOpPksD2x26mFEJu4/r02AdJxeHR7B5uNVaGK0abVhwkvqL
tbCTHpXMnqD6Fi0mnrxVJEdS/cJGWE0224dcKPX6Ax+gYWk=
                    
                    "]]}, {}}, {{
                    Hue[0.59, 0.5, 0.9], 
                    
                    LineBox[{{1000, 0.12059382661684746`}, {
                    2000, 0.07799667995112639}, {3000, 0.08584164020294945}, {
                    4000, 0.08610141315497459}, {5000, 0.06657870611796776}, {
                    6000, 0.0650970801897347}, {7000, 0.08295306739397347}, {
                    8000, 0.0595988936473926}, {9000, 0.07288211990147829}, {
                    10000, 0.06504031986308595}}]}, {
                    AbsolutePointSize[3.5], 
                    Hue[0.59, 0.5, 0.76], 
                    
                    PointBox[{{1000, 0.12059382661684746`}, {
                    2000, 0.07799667995112639}, {3000, 0.08584164020294945}, {
                    4000, 0.08610141315497459}, {5000, 0.06657870611796776}, {
                    6000, 0.0650970801897347}, {7000, 0.08295306739397347}, {
                    8000, 0.0595988936473926}, {9000, 0.07288211990147829}, {
                    10000, 0.06504031986308595}}]}}}, ImageSize -> {132, 82}, 
                  Frame -> True, Axes -> None, AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, 
                  PlotRange -> {{0, 9856}, {0, 0.16811588518099893`}}, 
                  GridLines -> {{1000, 2000, 3000, 4000, 5000, 6000, 7000, 
                    8000, 9000, 10000}, {{0.05, 
                    GrayLevel[0.9]}, {0.1, 
                    GrayLevel[0.9]}, {0.15, 
                    GrayLevel[0.9]}, {0.2, 
                    GrayLevel[0.9]}, {0.25, 
                    GrayLevel[0.9]}, {0.3, 
                    GrayLevel[0.9]}, {0.35000000000000003`, 
                    GrayLevel[0.9]}, {0.4, 
                    GrayLevel[0.9]}}}, PlotRangePadding -> {{0, 0}, {
                    Scaled[0.01], 0}}, PlotRangeClipping -> True, Background -> 
                  GrayLevel[1], FrameStyle -> GrayLevel[0.5], GridLinesStyle -> 
                  GrayLevel[0.93], FrameLabel -> None, ImagePadding -> 1, 
                  FrameTicks -> None], "SummaryItem"]}}, BaselinePosition -> 
              Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{1}}, "Rows" -> {{1, 0.1}}}]}}, BaselinePosition -> 
           Automatic, 
           GridBoxAlignment -> {
            "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {
            "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
        GridBoxAlignment -> {"Rows" -> {{Top}}}, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 1}], 
       BaselinePosition -> Baseline, 
       BaseStyle -> {
        ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
         3, ShowSyntaxStyles -> False}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetTrainResultsObject[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7401752333196793`*^9, 3.740192881851018*^9, 
  3.740227326717203*^9, 3.740251929246292*^9, 3.740266541022194*^9},
 CellLabel->
  "Out[107]=",ExpressionUUID->"16e91ac3-c8b0-4ba6-851e-779a4e31107a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Encoder & Decoder", "Subsection",
 CellChangeTimes->{{3.740192107601821*^9, 
  3.740192117627968*^9}},ExpressionUUID->"5a968080-2750-42df-8b2b-\
37a41349e710"],

Cell["Set the encoders and decoders for further tests.", "Text",
 CellChangeTimes->{{3.740266476285631*^9, 
  3.74026650804908*^9}},ExpressionUUID->"1dab89cb-c5f1-4071-b938-\
0236fde3b413"],

Cell[TextData[StyleBox["Set the encoder for image size 500x500 and a \
MeanImage:", "Code",
 FontWeight->"Plain"]], "CodeText",
 CellChangeTimes->{{3.740252771524438*^9, 
  3.74025283592234*^9}},ExpressionUUID->"9a045607-be67-4c2d-804f-\
4cea41ec6d13"],

Cell[BoxData[
 RowBox[{
  RowBox[{"enc", "=", 
   RowBox[{"NetEncoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Image\>\"", ",", 
      RowBox[{"{", 
       RowBox[{"500", ",", "500"}], "}"}], ",", 
      RowBox[{"\"\<MeanImage\>\"", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"0.485", ",", "0.456", ",", "0.406"}], "}"}]}]}], "}"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740252840338992*^9, 3.740252844200223*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"88b96074-5404-4de5-bf97-0012fc787955"],

Cell["\<\
Set the decoder for the classe which 0 means no rooftop and 1 means rooftop:\
\>", "CodeText",
 CellChangeTimes->{{3.740252847788207*^9, 3.740252852103778*^9}, {
  3.7402528834461117`*^9, 
  3.7402529136159773`*^9}},ExpressionUUID->"3df2bd2b-21f6-4048-9fe7-\
408cde55586e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dec", "=", 
   RowBox[{"NetDecoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Class\>\"", ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"\"\<InputDepth\>\"", "\[Rule]", "3"}]}], "}"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[118]:=",ExpressionUUID->"7d38f303-d0ae-4980-a0a3-dfdc04f9385f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Training information", "Subsection",
 CellChangeTimes->{{3.740266550366857*^9, 3.740266555121385*^9}, {
  3.7402669411316853`*^9, 
  3.740266944040092*^9}},ExpressionUUID->"f7d09849-60fe-479b-8f36-\
200050c09dd6"],

Cell["Information by batch:", "CodeText",
 CellChangeTimes->{{3.7402666648218403`*^9, 3.74026666804937*^9}, {
  3.740266709815024*^9, 
  3.740266712947081*^9}},ExpressionUUID->"181b9607-3fe1-4120-9a0c-\
6f71f82e9b15"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{"finalTrainedNet", "[", "\"\<BatchLossList\>\"", "]"}], "]"}], 
   ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"finalTrainedNet", "[", "\"\<BatchErrorRateList\>\"", "]"}], 
    "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.740227950216344*^9, 3.7402279622198353`*^9}, {
  3.7402287254942923`*^9, 3.7402287733541307`*^9}, {3.740266577973234*^9, 
  3.740266585343355*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"c8e73597-d5a9-4e9b-8635-79ec306271b3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1: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
lf7vAGzTYS3fb9rBXuxPo9iebsA+6S/kfQPkY/7qzPb3gf2iaNkv1AEP9NnC
fHCEfMmUycxPZ9hLb/4Nyx8K+Q7Xd8l5f/CVPrI/7gY+MmSl5D/wvQ2zGX+e
sG8+/zc+/3gBfx3tw/z0hrzLk1OyngGf2GEK9yP9UV7BusecDwPAx3WR8xGB
St/KmfEUDL7436msXwiwl7/I65W8UyjrE6bst5L3lxHgzaxesP1rlH/8JjD+
o5T8tSnsrxjw+pu35byM4oOuUz4BuIZVvnzfAOxU34b+T4J+xl5535gMftuU
K+RTgS367ZfvARBfebe7c313DHzbCUOYvxmwN+/tUT4/nFb9Eb6H+WlQ9Z12
kvazgN+5uTGes2Gvo2kq+ydXwz5XRvzNfMlT7Tv5gONTvvJXy3x5XgNuet+f
+sWQf/hNvry/Q3l5cRcZj6Voz87nsh9epvzd7Qvnu6ewNyhtpZxn1bBtr91b
JP9VfOYlcr1WpfI5+Av98RH2Il8PkPV/NMpfI9+bm0QjnyYP5vdzptFYrx2Q
+aoOcHmgfI9mDjxv2V3Jf+DSTiH0h6VmX9+/+Hf61wr2e5Vulfkf5Sd/kvNV
bYAD5q6V/STY+yfOhvXtAJxiNFHOF0DeNawv5bvB/l2vOK6n7MGbN7lD+T7g
d3Zvw/jXqfY2TmH5jpCvMzxP9iOBff+R/cehKL+pe6rsT4M3nExnfrgBe4XE
0B8esH8uMYPleUK/3bTvJP/BP6sn/e8NXGCz+QnzH/acI8rYfn/ov+piJefb
gG37V2c8Bar+OTVc3ncpf73Xs/0hsGcd6i3fHwGfXp9DPgw46mI7WQ8Dx40s
Yjyvgb2iHqmS/+B1t06x/BiFa75ne+Mgb2Y7l/tpCap/BzSV/TPwDulR9F8S
8JZXkyX/4Y/db9I43qWq+j0dKuerID/lUDz1jwFvCmkp+23Afl453C89DXtF
PT+QN6j4XuFEe1kqHpbPYHuzVf9cS2f85gIH6dLk/ayKB8MEyuer9s5wZPwX
or530tMZ78Xg944+wvgsAR761pnzdSnk0xxbyHkulPfniUbMx6fgg58kEFcg
v7Km72S8vdGw7ve45Xx+qlL5fWQ1z0t9RHmRFuHy/fdGzb7zHmP612Qj+m9Q
LutrChz8aD7HozobNX3XhbZyPhj6Tnce0P+NwEcONpbzYuALdv1N/1qBz6m1
guVbg3+S2J/zVRuU59UiivllA1xydCHjqQP04w8clPU/9HuvGMB47Qbc/uAT
5ou9sr9jHeOzD/SP1P0k+w+w3zdbvp9wBE47Lv3lDLxuZTzbO1T5Z/m3kv/K
P19kf9MNOGTpDDmvivLTZ4xhvnkCd3/YXr6PQn3MQgcSe0M/oXS2zP+QN/o+
nOO5P/jEj7LeCQC2D2zA+gcC283/Ivud0H/46wbqh6j6OAVK/qP8qD89WF4Y
9D1SZP6KUPbO3ub3amugfzEwX87HAtcNs9/H/Ie9D/1bsv1xwC7uhYznBOCB
fTbL+xPYjws3pb+TwJ88KN+fJYNf/lTOu6SCL/eX72vTwDv3c2H+HAPvbDGP
9csAb9q7K9t3WsWPfTWZ/8H7r9tHPgvYXJcr72OV/86cY7zlqnisHsv8zoO9
0IvyPiEf8ssW/SbntcA3HraF8VgMfGPxUPk+CfaGjpf9glLo9/UL5PhUBly5
rj3H26fAc42O0t8Vmr511Ns57K834NcG9KL9KuCgx+M5X39Eea6Z38j5jxgN
J/58hPFnEoPns8dv2H7TGKynWt4iXwd88wkbJf+h7/H0KOvXCPJdGsxhf1hC
3njZJ/afFeTtdlzn+tkaOOLMcI5nbSC/aXU9OU8KnNppGPdzO8D+mU892L92
wC9P1pX5H/LxLwLYv/bA9rvkfVgflFcya4e8f1T13xNL3lHVb0w98s7AzvOi
mC9DYc/PU847u4JvfCuX5bsBf95VKeeVUb+d/hH0pydw5c5Oh5n/wBdnvKU9
b+D0lMnMZ1/Ys07swvWCP8r/YFyd/REA+WE1dzGfAiFvYjjO/g8GfvTLAPIh
GtbPeLhNvr+CvU4nN7J+YZq99GEpch4lAny1CEfqr0F53UfYyftxVZ+WC5g/
MeAt2vzNeIzTcMGL5zKeJ4B/t17OnyYCz7pjyv5PAi54XCT7acAb0uU+rVTg
bY/H016a8ldZE5Z3DPUpD5f71jLA76nzkPF+WsmXTJL7MYCvrh0mz//Qj9w4
9hDzX/V3wVCej82FP991/pf+zQP27X+O8Z6v6mcj54sLgesmeRMXQ1734hmf
50rAh2fqZf0PXv+km8z/4GvcjaA/nqr6t/CW833K3iY5L/wG/NzSMeSrwFvu
lfs7PgJbFJrK83+shitG7iU2icX6bpAT/WkKnDmk+lHmP7CbabTcl6Dp6zwi
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
dcY04HjgAvnzbV6xP4ZquHxBU7nfczjq0zGoq9zvpvG2qeWO5Edq2M/Xu4q8
G+xn1D7EeBgNXBbYS/ZXgQsrT9B/44CNzn7ifognyotN7cDxe6LqvwOy3+AF
/sYvbbk+maL6J0T277whPzxV7n+bBuy9R+YnX1VeiS3t+wF77Rkr9zWofDBe
xPXnbPDfVyyW9Rvw6vaBjLd5kM8MSpDvOTXekLMkpELhBSqeTJ/I+x0VvxFh
zLeFqr0n5fxPiKrf3pHs3yWwP27UC7n/QfmjtR/9G6ri3as6x5Mw2Hu2YRjj
aQXw5o7HZH8I8rnPzGgvEnyQ3w55XwS833cS43OdVh/99c1R8nuHKt96yO9V
RqO+bbrK97IxwJ9Xtab9Taq9tUs4H8Wp+DgwivLxKO9gknxvnADsM242/bFd
5cNQuS8qUbU3ooT767uAr+k+8PddkyD/68bGzMe9wOF/tpXzaSh/bNzv9EcK
8C+jv2b7U9F/E+vYcD1xSPl79075fi1RvT+S3zs6Av7lj6nkj8Fe4mljtu+4
qm+XJnKfELCZoSPblwl5j5+3MT9Oq3h4OJ7+PQt8tfd++f1U4LVWWznfnFf5
HuvL8rKUv0L30V+XYN+wbIp8Hwsc8pP8PlcO9FN0i9nfudAf1mYO4/maio+D
JnJ+Fvol2zZzfr0JbBIr5x/yVf3Py+9R3lb5deEn+qsQ2OaOFeO/CLj/qBXy
vR3irXJLNsffe7DXpHs9jmclkLcO383yHoB3vym/d1kK3N35BMezR5BP+rKF
/ivD+NXowkXmTzn4qo+TZb9O00+vaiv3hTyHfwat9GX8VGjyAZVxcj/1KxUP
k/4ifgN7FV16Mh7eQr/V2GVyvlf5+x/5fcwPkE8zk/u5PgK7bphL/rOaT6va
s35GO7X5uGljOQ9krOGg90OM5X3gToxHbu1jOP9rvPvbhvaUN9Vwpdu5kfSf
mSYfWfgmS54XdmK/uFUg+7se7EX2jZP7ZWHv34go5lcD4PL86rTfaCf6e60n
462xpl/ucylKzhfCXujlp/RPU+B1U09yvWQF/Svz4oibw/6sJ3fl940hnzJ8
r8z/kPcY9VDOI6P+3avJ75+1g/y8zXLexQZ4Yct31LeF/fA1+3jfagdlf4M7
56NOqj1xL+T+Asi7Vx5h/HYFX3FtN+OzG/ix+/Tsvx7ggw+Pk/sNYN92Uwv6
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
CcffmuArDXJfkil4rwOHiM2Af375LfO9Duy3bDWQ/VkPvJHnQfaPOfiZG/ZS
vwGwbdcE+rMRyhszIojtbQz9M6860P+WwNY219n/TaHvcFTun7QCXrPrBdd7
zYFjP+TTH9bAjX+fy/GoFco79/Ov9Hcb8J+XCN8OuPywNccbG5Tvav+a9myV
vo9Ozv9BvoNFb9avE+Qrfqvk/GEHbLs4WOZ/Tb+gf9ZWuc8A9i5Gb+Z80gPY
fcOeLZz/YT/nxXPGp4Py34Yf5L5DYLOrfzLe+im+j9wXrwMuWhbF8gfC/rJf
xsp9SMAbMvXs/0Gob9Y2iRdn4OFX5fy+C+TrJVaX53/gCR9y6Y/hwOH6OXJ+
Gnjb78WMl5Goz/W3Mr+4qfZ9+/Vqzv8oz/zOgXjO/ype0zrI/r+K5yr5ft0T
/NyvzRhPEzX9POOeD+X7S/A1wnNY/ymwX+7WXJ7/VX2nyvupabDv57qO46kv
5O1jB9Gen4q/LX/LeW3whre7eX/wbJU/Bwv4PUcAcGzPBMb/POC1CZHyPQfs
LewbwfhZAL52PTn/EQz7heMs6L+FwMPqviAOgf44l3Ws/xLgdvvkPkC9it/K
FeyvUGDfr9rK+T+UNyvlIufPFcAFX8/k+94I2NtUV95fRkLfo28yx7M14F2u
XJP5H/javHCWFwX8wwYZX6JV/z6V35uKAd51UParNin+yF75PW7U527kc+J4
8LrlU+R7cw3ray11l/f/avz5T84XJkL/2Z1vaX+Xyq8Ocn9IErBTrefcn9kL
PGL1zVTO/8BWC4IZDykq3/4yyH11KL9rrNwne0jZXyW/B5sG+cvpjhxvjqjx
5Xot5vMxyD9M3cb+Pg4+LeyF/J6w6p/qW5nvmar9R9txPXka/IkHVxlfZ8Gn
edZl/xrU+N3yNePxPOxHR6+j/7KgH/RHFfe7LgEbPz8mv1eo6huwiPGfo+Hy
8e0+8XkxF/yrX+T3Dq6p8Wyup5z/A7ZY8onl3VTtDZD7iPOVfadvyd8GPn88
Tn5fQ+X7r9Xl+R/tqflzfcZDMXBRgwD67x76Y9/195QvUfH5ax/u7z5Q8bFK
3peWqvxx6879zkcq/0Nrsz5lKt9n6hgf5dAv6Z7L/YanKj7/kvOqz8En7DnJ
+ahC+ePEacbHK5Vf7p7s/zfA3X9bK+f/1Hg9vjnHzyoVv/sO0/4H1Z/fV8p5
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
EvSqDkOY76Kkv9f/1e//0p5CM/T/v9gr/p7+/5d8YteU9Z+X/POkC8eTGMjL
m7eXjv8SD/+u6f9/qe+f3h99Wfw7wpnr0QTU19++CemJkD/ojt4ncl3y00T9
PnMT/LPPPGX+SAJOuaf3NdwB3nC0Cv39nuQbRyf9/4/6Xfs0oP+myHhy/zvr
SxV79rVjPD6W9ruWZv56KvGzaiz7Kw3lb3ZpzvLpwA6VT/P7y0vxr8SO1D8D
9KTPev9opvAf2KX3/6C+Ss457K93Ev/t9f7abNB3ZRXR+/tQ3qevCf3/s+S7
VYXZvq8on9TsLuP7G+hLU6fp/T+ST7YksT25wOlmn1jfb/B3y2mr4z/o/t5x
+v5fGPx/wA3KywvsllKK/p8/zMDv1fQU5RcETmqYzPHGOAz9230E+U1QPuNY
kI7/wFnP9P2q4sDRcduYX0oCL7k0mLg05GfuTqG/lhX5jcx0/x9wnrELGc/m
4F+1pDnbayHteePA+WVF0N29rlGfyqDvz1NL7/8B3fzufdq3Guj+jrp/18qA
rZsc6qP7/0H3NX7N8rWhT1iME/ObNeS5GE/h94h6wGkt9b66BiifW72Ejv+g
79ys96/Ygu7sukPfM4H858OGkL+Zgd/HYaB+b7EDPcDiPfvTHvKCtm3S9w5A
N50/gf8T2kj/TvxL/3MAf/jsOex/R+D8TzeT3gG4Xhtb2qcj5MXM8tDz/8A5
00vxf7Uz8J2ddVm+q7Sn2wdd/4Me2eaMnv8H3XOp3s/uCmy9pRXHo96o/8xN
fb+8L8oHpun7hf2lv7q76fk/0Cf/bcb10SDgW/n/MT6HgP9xcTvW7w4c1iJn
N8d/8A9psI75foTot/EV88Eo0AtM2c/54BgDzhnoOpr95Sn966Lfb8aLP0/V
98knovyENVb6fqu0p8cLHf9R3vuQMecn00Dv87CL7v8D9qveT8d/4Dp9dDzz
Fns07a/vPUj/Bx1lf8wX+3dbpuM/9Ovs1If3HfhKfc76vW2xxFPebbr/H/w+
z/U8yzLw792QTnv5S/0zB7K9K8Hv8DKY/bUK/OdPXWF71oD/4r8S1G8dcErQ
T93/D9y6brze/yP+/eI4x9cg0G0fvqB/BINeoU1ffW8O9U1v/JvytwseHsPx
YSf4R/jspv+HGLBDo+Saev4P/CMPraO8fQZsejRA73MPBX3hweccr8Ogj8mp
0vpendin/X764xHJZztfsn/CgbtkrGT8RgAP7LWC8XYC+s19Hkr/jJJ8duWr
7v8DXj+0L+uPRv3pnUNZ/izovRs1pj+eB47LecX/UTFh8r3In/aMlXzY/ye/
x8ZJ/rcvz/i6DP2q2lxl/ySgfFS6C/0pEfwfVzno/X8SX5UK0h9uiv1b+3P8
SBL/m9eR/XtH4m1UAZa/BxxZqArj7T7KO9npfQYpYo/zSeyvVPDPKh1CfR+D
bnT1IOPpqaF88prW+j83DfRTVStu4vgv/eM+geP9S8jLO2435yMZoL/aOE7P
/wPHx/ZjvsoCnm2+WP//Q37ZImW53yQb+OZ6vY/mo8RLlcV6/h/4yX69T+or
5HX7Zc7vDd+g/+1K+l7vDxlfeqzk+JKL8hO3tuL3pN+gW46ZupXjv+gb7Kvv
/xyEvya1pz3yAk+aOZr+kB84rLb+jyx4EP33Ud+rNz6I+oN1/mECeiePQfr/
H+XTK6YyXooD26ek8v9eSUN5n3Xlyun5P5SPjBvH8aSs6Gdlzvxihvp8xhVn
/jQHvbn5BsaPBejhlXU/YkXIK1N9DvejVhZ9v21leUvQX3UZxvlRNcj7vDOX
9VmJ/s+b0741gS0G9qE9akOew6eNuv6HvF+1J9H/6gndzU///0v5p/a0tw3w
t5KHqZ8tcMhQvX+iCfAP3+q0TzPIcz+WqeM/cG+fi7SvPbBd4kG97xy4f8Bh
+mcb6c/DC3X/H7DvTSP9/g/9Rzoncr7VAbjnx1K6/gf/yVtDmX86Q35Qy9qM
T2fpv6YjmB+6gt//QSvydwe29nHU7//gP/bzIO3vCnlW362436s3+HOndeL5
8b4G/uS6l4czn/UHf0zz4pzvuAF7tfVi/w9CedfBHanfELHfwoP6/jLqbzpU
9xd6iH9sWcx4HyH+FlKJ9h0lePRntmcMyvf5vUvHf+DCrnr/8HjwNzxuy3ia
CPrY4/perBfo3idu6vgPffO+0/depoHf57kF8+EM8GeefM37OGeBHr9Tz4t7
I56KZf/V9x5E3196X+t86Y/b5myvj/j3C40fX9j3lbHuj1kM+d/L5WV/LAGu
VHYG7btM9GkUoff/Am9831j//0N+UFe9X3MVcFYtG30/EvJGO0VyPF53EN8b
AqqRvgH8wdFzqe9Gie9pOYzPIODsGTH6/R/8sUXC2V9bDfJz7k/T85XbUV+B
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
NQv0vKUHcP0zG/I2P2/C+rylfctL0x/miD4vTtF/5kr9Q/dxvj4PeORVJ7Zv
vuSTF0fojwtkfIleqPd/G/gD/7Wfzny1UPJd1zg9/w9/X1bUkvZeZChv/bbK
Db0fTOLttr7X5Cf+90/nO0vQf+/W6Px9Kfx1+OYiev5f/LuFvoe9HPK89hal
v/iD7vpkOPPhCgN2HrmvAfVdCXmtJjWkPgFo/95GR+ifq1D+80rNF6sl/jw2
095roN/Tlokcf9aCPuh4R8pbZygf8s98HP11vcSLdxjbt0Hiq3IrzpcDxf6/
9X2HjQZsumdiIMejTeD3rraX+gVBv/Nz+rG/NqM/lu94rPv/pb8y3lC/LcDu
bVJo763Qv9Py2dR3m8xfDkxhPG031Jf25/x8+s8O8b9NFnr+H/w3fPT97l3Q
d19kD9onBPWl3hzO9fZulM9c2Y/0PcApi6dxPbxX+vPuNT3/D/q72g/Zn/ul
f2xWML5DQZ/UdzPtewB4Qx89vxSG/l0dP5L2PIjyZUJMaP9D4q93MunPh0G/
9y1Z71sHrtq2NePjqPhz9RB9fwX6PtmdTX88JvO9tqmc70VA/mKXmuQ/DnqG
U379/y/znw6+bF+kxPvPC4z3KNDrn9fvVScN8iz7pq/Q99vAv6LSOPbnaeD5
206x/6JR/n7fYbTnGRnPF1lyPDkr9sj4zvaeg753x4yn/c6D/uZzZY7nF0D/
UUm/J8egvi91r9AfL0q+qXJe74MDTuxgS/tcgrxbJcK4fokDjhzwivrFSzw8
jOB8+LLM5z646f5/yQ+dTzN+EzAfPP1N/fcq5PkVHcb6E8EfUbNUsOBrwH2d
M7leui7z++GH2f83ZDzJf1Lfm5Px9UUg++MW8MH2HfT9eei3YvdL5p/bMh+s
lMj4uAP+1g2PsL/vyny8bQHOT+/JeG26h/ZNNmCHgP76vf0+5NmZu9C+D1D+
+Z/lnI+kiH7N9XvhQ8nvZzvT3qkyX3XJ4HjwCPUVW6j3TT1GfNxrm0f//8v4
+bkI9X8q7blahfO9Z2L/NZNYX5rMTwuEcX78XPLj+hucP6Ub8M45xnq/5QsZ
H5+sYz55KfORHLXPK5E3Vu9rysB48WqBnnd5LfNFLwe9Pw/lC/iXoP3eGMpP
X2r6Ud/TAb2g33b691vRr5i+//1O8klLW/K/B575YQfzQzbqt4rtzvo/oHzo
4vb0x4+yPlhszPZ9EvnfhlD/z8I/YTn3n34Bf7cGkXo/v9jX/4q/4Bxpn7sV
v/d+k/HE6zr5v4O/Wl19r+WHzD/P6vsAP4EHO36nf+WCf1XZnYznXyJ/fT2u
D39Lf394RH/6A3z4w3T6/19g057rdf+/rKca1Wd9RpEGeWkDTZlv8kSi/wq1
4Hid10CPCannRf/IF2nQp3KIvn+SH/yvYj5wf0MByCsZu4z5rSBwwv4yev8f
+J0sRrE/jCEv65gT47Mw6E09NtD+JqCHOa6i/kUgz2WsL8sXBV7jP5L2KgZs
8zCB43Fxof+tyvgoAXk138Yxn5cETv/6luefShnqT/a0SmB8lQY9YLoL219G
9OsRwP4oC3r/KsPJbwp68pYA7i8wA/a7OpDxW07K399Ne5tHiv9sZnyWF32P
VGE+tADdelEh6l9B7PdfYY6/FUE3H11Y//8De1+xYz6uDHmPg/T7XRXgoRW1
fywhz9RS7wepKvben0p6NfBXa/uL/lBd5K37yfqswF/aW98PrAG8JzKV7a0J
/tRjmu9qgR5xYgPzW23UP/36Y46PdcT/yjXne9nWBn7rbcl/2Z91UX6DxS72
Rz3xt3h7tq8+6MHnWzC/NAA9s/B76tvQgB2Saul7mTag2w+/wvVeI7GvT6ju
/wf9o09P1t9Y6vvQmv7ZBNj9hf4fbAocc0XvY2wGfe4c2EN7NJfyAx/z/7Id
6M57DtK+LYDdn85mf9iD/0fFvcwXLUG/56Xfy1uBnj6oC+trDf3/fPpB/doA
1+hixvzYFuX99j+h/zqA3sf/HtvXDvLqd9Lz7I6w/z7LftSnPejmcRp/HSAv
xFj3PzkZ5Jm2PnSG/tBR/DdiJvu/E+orX7eGvh8FeZaOHfneSBdgO7MH+p4U
8NZuy/T8P8ovt3ql5/8hf/S7fGxfN+DiP4ry/0J3A//0K/0+sX97SL6p8pb8
LpCfZKXfF3sC+3S9QH90NeCPQxPaM7/0QvnoW7PI39tA99nS4j+2tw/oZp93
0H59pb7YctS3H3DZAQuZH/oDz3h+VM//G+TtnLWiL/OhG+i+p1vTvwai/aUS
Q8g/CPicTQzrHwz9x7zR+22GoD/62JhR/6HgH1lVz9e4Q/65+8cZL8Okf++W
Zr71AD2xud6HNBy4w45anH+NAP48YSrtORLxta/pJNp7lOhz8KuP4NGSn7N1
f/IY6BNwd+hiwWMN2K9yrL2e/zfIzzp8vTj9b5zEY85d5sfxqK9SAT1fOEHi
qWUjzk8nGuTtnV35AemTUN+2J+uXCvYCv2cHff93Mui3Bn1m/04x4JwWByfT
vlNRf/UHLfX+P/Dv7pXC/p0u/mPrxPw2Q+LP+SDXRzNlPJhylfl+lvj/pHKM
p9kyPoQZs/+9EX+eQ0xp/zmg7w/bTX+YK/G3tBf9bZ74w/uVgYLny3hpVpP9
swD0w58Hkt8H5e3OdaK9F4K/8fGC9C9fYKOeXbk/fpHYt7qeB1wM///yM4r2
8wN9UF0L9u8S1Ndiwh39/w+6495AjmfLxB9G6/smy4HXJRzT8/8oH5lvF/Pj
CtDfrQpmPlwp42W1qvSPAJnPLGpLeauk/N0NtNdqyXcjX9Mea8BvdS8v7b0W
+mU20/nwOtA9Z09i/6yXeP44WO8nB7bdf4LzzUAZf+/p97GNsM/m+/3pL5tQ
/+DfP5YJDgL/qA0BbN9mYLcNnbm+C5b2RU6kflsEB3pw/N8q2PQ610fbZHwt
3ob+th10hwJNWX6H+JdpIvPbTtBTXriwfbtkPKvUm/qESLy4dqR9dxvk+6el
6fsweyS/P75LffeCP2dPR/rTPsynaoW8Yzzth/wTGa24fgiV/Ntb9zscEHkP
X3D8D4O8YQ5PWd9BGd+dG7P8Ich/Z72W+eCw1P9wI+PliEF+2rGBXxlvR1Gf
V732bE84+AvEBVLeMeAul97zf20E+DuH/iA+jvr9fd9RnxNir3WzmD8jJT//
ekx7Rkk+LfWa7T8Jen2f0rx/+JTgr00YL6eBu6V/1vdcZX5W2uS54DNin2gj
vf9P8nOeJ5x/nuP4tpffo8/L/GqVI/EFkVfUVO//A249Vu9HuSj+uyiK+TMW
2D5Dzy9fEn17z2V74pCfztkPYP/Hy/yneA+ury5L/ogYz/quiD6DypCeINho
mt7/h/4s9+IB1xOJkB9f9ADte03m1zGlOL+5DvnhrSIp74bkn2BH9v9Nme/v
jaJ9b8n87qaeP0gSf1k/ivFwG/xLe5/V++hl/lqsu97/J+2ZZs7vQ/ewPhp9
ZTj9IVnm860usH/ug7+mk97H/sBQX2CJuvP0/XrJT9dmsP8eonxuqr7PkAr6
5J4baN9H0n/39L7gx5KPu5dn+Scynljpe71Ppb1vL+n9f8B1ih6nPmnin+u/
UP/noE+Yqv6ULuNHYK7u/5fxLbGerv+Br48Lpr1foXyl3R0oL0PWE6vrsv9f
w16Hy0xkf2eKPTtP4/egN4Ifmev9f8ifV1qfI/9bmd/a56U+7wzyPZ8cSGe8
vYe/bDmv5xOyxT7xrT8J/iD9XfE12/dR4j8tiP31SeYjh34xH32W8lNL8r6t
L9K+4Rn0j6+Sj+Y8or45ks966n1I38R+m9tT3nfxj8eRzFc/QJ9Wa7ru/5f4
zlJ/zEV97/e/Ynt+Sb6prPer/AYODdX3Rv4AW/9eS//5K+OrhR2/t/6DvLud
dTwwijLYt86UFuTPE2WgHzc7Rv3zRmG+e9WY9HwGfqMQT3P2f37Q8xa5z/go
AHrJzqfIX1Do07rSHwuBPujRAL3/H/TxLYfp/f+gnwgrT/km0CewfiT/7xUB
/8346bRfUdB7PTnD8sVQvrbJINqnOPjbXx9M/ygBnHX9BuWXBL/Ph0psbylg
ow36fn1p4N0d9XxEGUN566Zm6r9lUX+fLQuZr0whf+SoZsyfZqA3DarO+sqB
blLDj/WZS/mni2mv8qhv5U19b8QCOHNUF8qrgPL3++v8uCKwvfUDxk8l8BuP
eU15lYFP9dTzO1WAO3+uS3mWwOYDjur+f+jzX/OSlF8N9HCbNfSX6qjP20L3
O1sB5z6eQ3vUAL+NxTj2d03IS86n3+9qAZsWc+D+iNpin7rDWX8dyPPosZft
sQa9wYRFnF/Vlf65d5/61QO9cz39/l5f6s8YwvGuAeTFOup5gobAbusOsLyN
1F+mKeOtEcr3PVyV/WML/vQFq7ieaSztSfXn+q2J9F9yPPurqeDs2rR3M8TX
6R96nr256NdyMPOFHeTPcPhM3AL0fR3a0172wA4lS3N93tIg39RjhQ/nZ61Q
X06TybyfsbW0789Ife8Z2P9QPcpvC2zddgHb7yD6JOyjf7cD3ums7104At9b
oN/T2qN8tZeTiTuAHmHszvzjBOxlFs147Ih4ObJF32vpZNA3OTYpnfbtLPHd
U9+/6yLt+ajfl51R3/AOWYz3/0Df5DiW64euqC995zz2Tzfwdy84g/HeHfyl
7un50x7Aj37XZ/tcoE+JLQH0n56Ql33JjuOjK/jDFr/mfLuXge6wtlEJXf9L
exuXZfk+qP/U+nTaoy/KX0wpyvVSP2nfiFbUp7/Yf6WeLxlgoAcGHu5M/3ED
/8iTw1h+oPjjKH3/cRDw+th21G8w5PUv95zz/yHAX2snMf8PBe56Jpn97S79
PfA06cNQX2SEjlcewK/+tz9vOOrrPGMG10cj0L8t7uygPUaCf/b4OLZvFOSv
aGZGe4wGjlv1j/4wRvzzkd4fPhb0rGcZev8/cIrPHNY/DvLvDWzGeB0P/LyH
BfevTQA+ENOZ9U8E7rZvhq7/JX9M0fvBvFB/32RL2n+y5MMZP/j/aorkT4ul
LD8V/J6n/7H+aZL/HixjfpqO+uLLDmF/zAD9WrK+XzQTuHyFTozfWdK/U/V9
zdkSv/mNdP0v+WTqFObzOeI/n9/TP+YK3SSL5ecB/6ziRXvNh/4eq7+zfxYA
J1TYoe9/AZcPcqW8hZIfVg1k//pGyfefA/zfsEjwx7b6Pqi0d5UP84Ef4im0
WAG9/w/8f/7zJn0p8Ldz+v9mGeLpbSd76rcc8qY/yOZ+Dn/o5+lUif25QvLF
K90fuVL8rXsG7R8g+rV9zP5cJeO9VynafzXkvaz5R9f/4u8X9/D+qLWgu+8v
Rnusk/pSD7M965F/Zy3IT303gN+ydzjbEyj58bAH8UYD9pzQpz/xJpHvsY/6
BAE3cVzM72mbJd8/a8L3vIIlPlqUYHxskfnYotXMN1sRf17H+rM922B/o4X6
/Xm7+GvqV+bHHWKfPBX0/7/Ml5bupz13gW6xfiDLh6D9R1yNOL/fDf4lX/V+
0D2g11lgSnvtBX59IZTj1z7gvY3HU/5+lC+4+yXpoahvxesnHP8PSL7Z1JH1
h4H/vpven3cQ2Hp0DPPfIfCPbWes9/8D7+uwhd+HjsAeB5enM98cxXj8/pYx
cTj4A+YN0fv/QL+f5xz9KUL6N13vbz0OfffU3sP9BCdAj6kzivRIyCtXXu/v
jAK9wtI39P+TKB+2UvfzngJ/gdV6vvg06AvSO3C8jhZ/WNmT9j0j8+nUKN7/
eBbxc3Wt3n99DvyzAsxY/3nIv3EzhuUvgJ42zZX6xkDepm9/+X/zIvz1g1Eh
2icW5f2OZtKel2Q+OqE85cVJe26cYP/GSz5zOaz7/8H/PPsav59ckfnk8Qpc
7yQAr3Hfz/OlVyFvn6P+v04U/y+XxPnNNfAH/ai3TvB10LvW6k7+G6JPv7HM
rzeBZ1fwo//fkvVJYb0fPwl058Rk6nsb9ENxep7xDujBxavyf81d6S9HZz3/
L/PBIU6Mz2TgYwte0H73gZ2OtKE+D4B71nhB+6dI/feOc/x9iPp/7DjM/8ep
4C/tqfvLH4m/vQkkfmwon3Xgx19+n30i9CF6nv2pxGPWVs6fngHPq6737adJ
e4pl6/9/lC+6eC37M138x1XfV3oh/fejLOPlpcxf8uj50Fcyvm7X81EZMp6e
SdX//8CFLE31/j/EZ1wlje83sEf21M+0T5asz57refm3Mh8wf0L93gFvO5nD
/n0v8dx+O/0lW9Y77dMZDx+AP6bV4vzuo4y3xfQ92k/S36Z6f8ln8D8ek8vy
X2S8DdX3P77KeNVE13M5wPdPhjJ+v8n8avYX+vd3qS94K/vnh8RL5Wm070/w
J12L0v3/sl7cmMv12i/QQwM/6P1/sp6a58f58B8DPebtQtX3L8p/dqqr9//L
+LN3+ErBRidRPrQj4yHPSQN/wLVFtGde0PuU3Mr8kg+46dwq+j7wSYO88F3n
GA8FgNf8CKa/FwR/duQ5vf8f8v1n5+r+f9D3eqTze39h4Jwt3pzvmhj4rdtV
tOL4WwT0PE27sb1FUV9aNQd+/y4G+o2KB9g/xUF3GDuT+pdA/Ztn63vWJcH/
xGMJ54OlQG+2UN9HLw16/Ss6fpcBrnQmmeeJyoJ/yQt9L8MUePKBTtTPDNhk
rO6/Kwd9vPoMpH3MQZ8fNJTxUh54Y0f9328B/seTHjA+K6D+YiH7OJ5UBK7x
p7C+/4fy0c3iGC+Vga+X1fdzq0Be5/FvyG+J8pucPPX/P+xdcVQg+6cayl9u
oP1dHfyvaur7FFagn/dswfGjBuS3Lrue/lZT9NlfjO2pBbplZ1t9/w/04Kuv
GA91gMNOjdD//+BfecGJ/lMX2N3qFu1ZD3jJwNGMv/oo3+tPPY7fDQz6RrY3
b8v4bijyb+n/bRvpH/dyuv6HvG2RQcyXtsBB5waxfY1hnwN/L7A9TaR9X/Q9
gabAfWcf53y1Gezld+Az9Wsu9c/V87h2wG4RrWmvFsBZ+RfR/+wlXk7eZf+1
NODgSl62LN9K/P+yng9rDX7fZ/3Zn20kvssep3+3BT10cC+9/x/0yLsDqV87
4JGLJ7C8I+Qb7S/D8u0N2OF72w78HtoB8vJdDaa9nYBTy05lPHcUeZPGMP46
CX3Td/pnZ8kfeYyYP7pIe9/WY/udUX66+xb2z3/A1mf0/ueuYt+t9zh/7Cb5
JFbPM3eH/EdHt9G/eqD/HB6dZntcgH23r+H41BP8SQ91/esq/npQ/2f0gn6f
85TQ8/+Sr/bpe0x9gAv0KEJ/7Qs8eJ+b/v+HvI55dP3d30BPPnwphvYeAP5d
Kfo+oRv4y5VU/x+I+hO/6f+OQcD2C0Poz4PBHzf6B9ePQyBvgmUyvwcMFX8t
rv7lDtyg1yX6+zDJ7z0K6v3/kGdbaTfzzXBgx//j6brjev6+f0ZGREVGVkYk
KytkZUQiCpGsQkZkpOx4IaOsjIysjEhG2atIPiFESmRnZGQ1JLJ+v/fzPO/3
z+fjnHvuueeece9r3DvsKu0zDvwzfFPU+3/JT/32cr03XvLP4adc701Ae6Po
3RzfROBy1+tQ3iSxZ4nG9E9vwS3DuR6YDJz07Tbz1xTx75P31P//4i/+KaRP
hXzrIw2p/zTo4/juNf11OugVGu9hPpsBesiB+rSHL3Dxu8Gc35mQP8n2MP3L
D3TLdw3Ynz9wh8LLtMcs8IemfqV/zpbx+Jjz+ecc+F+Fc17q+3/ok/M3SJ3/
B3lV4gpZ/+eDvnJk0BbBC3R07+d2w+nfAeJ/8x/RvxdK/V4byO8zF0l9HqTe
n2g6rB0veZ/+vFj8qeVFjm+JtP8YyfhbKvnCy5z8geAvuhCivv8H3SOrHP8f
Ww56w0UZ3N+uAH71+QntuVLsO0fddxck8edfZ53gYOmvg3oevErHb7C4cCnt
s1ri0b027b1G7Ju/lvZeK/Uq6A/fH6wDTs+8xe+NQoATx6n/u9ZLvsv/Sn/d
IP60xZz+txHYqZK6z3MT+Ie030v9QkUf+8kcz2bJfyZjWB+2gD6mvBmfT28F
3eZ8M+afbcJfcSj1CxP7uqjnT9tFH683HP8OyU+vLUjfKfkzep86/w/8GxPU
fUa7xb5BFqwf4aAblThL/9oj/raoKcezF/w3N+jxe+B94j9J6r6v/RJPW3tw
/xIBepVXixlfB0A36jGK/nJQ7P9jpTr/X/wtbQjzwSG0P/ZvJ+tnFOiptR3V
+f9S7zq34XwdAd2qm3o/fFTkWw9i/jsm/uA1hfaNlvmdb08cI/yXbRj/xxEP
j/2cGf8nQL/nE0J9T6I/3+BMrgdOiTw/J9aj08DO7U+q9//AljdWUd+zaG+9
cgHHe07y12N13tV5ye85QdT/guRjK2fG30VZj0SO5fc9sZJfyswifxzam1lX
pv9dEn9oqerRZeCMFPU/brzIu7mE7a9IfQ5/yfVAguT3+a9Jvyr19lxL1p//
JN+n/iI9Ee1bHWtOf78m/tx4F9ev19HfqyFbuf+6If6zpIjzlyTjfWNEfFP8
3b2A83EL7Xvcf0T/uy3rzy89mD+TQR+9KID635H58XhNfFfiaaY19UmR/m5u
Y7zcA33DeXXfYKr4T+citk8T/kvbqN995O82d/ZzftNBP3pkFOP3gfjvyr78
XuAh6GYTXfk8JUPWnzNduH9/BHzn6WDa8zHkfxm7lPHzBOPp1kSdX/RU4vn1
RvX/v9S7B+r+sOdST0w3M35eQF47U3Ufeib0yQ/szfl8CXr5JwVq/4/23jnN
WM9fy3wm+zF/vZH9g29HzmeW6L9cfY/6VvL9rrdq/w+8y07dH/se7feuC+H7
0w/iPyHV2D4b/S/5ZMb6/RH8GQnq+7RPoJdJGs3nxZ+lXhwdzXz9Bbjhh1Dm
y6/gv+F7jv6SI/lnhJN6/y/1zvUA2+eJ/j/VffL5oNsbrWb9/Qb6vBldOF8F
Eo9z6lC/77L+CvJg/S2U/L/6JMfzQ+bL4jzn46fMh4cp/btI/O/nM8r7hfbe
aZXpD79Bv7WpBP3pD+hB9Spy/v+CftHNiPL+ob/fD1/R//XO6ehRn9R5xsWA
T59OJn/xczp51Tpa831niXO69sHJwxgPJcHfVsvj/lUf/FEl57GelAJu1bQG
15+lhX/LB/ZXBvQK5doxP5XV0dMPFan7Rg3AX6PUMfpPOfSfM3cc/bk82lv9
VfdhGero2sQ90XweUEHXvq3H5HXUryLkFaQe5HrACP19CarJ+masw6bh19T5
+SaQv7zmU9Irof2z/YbsrzJw6phpzB+m4L95cRbzQRVgx8Y/yV8V+lfLL0f+
ajKe3Y/V+3/Isyg0Uuf/o72tewLrSw3QT7Y5xvHUBF43MJ3vq2pJ+6xg/s9U
G/J/e2SyntYBTjZpz/7NRZ9vnpzvuuhvg08S/a0e5K1JvcP8Uh/0hk7HuD5q
AGx2dgrj3wLyKrzbxvlriPb+nmnMV41AD0+5xee3lsBGo+er/T/49d//Zbxa
yXju3Wb+b4L+sq+p+xWagh76bRDXH81E/9GV1P//kB//wZf1qAWwXbM97M9a
9DfwUOf/ibxBwYz/VsARzdV5Iq3Fvz98UN//S7xE3mF8txX6laq0v40OW72+
3YK4nfhb76fq/b8O219Y7Eb7dIB++122MJ/Ywp+TDNR5jx1Bn+NrRP/sBOzi
3pn0zuivWeufjL8uwO3PnuP8dAUe3kF9/2iH9iGlEtT7f7HP8gyud7pjfKaH
hzI/9QDu4TyV65+eGM/m0enq+3/QJ/9Q5yH3Ai7TuRLb94b8mIBV6v4/2Kt7
Um/iPtLfeg/OryPoBr0ncT76gv4odjvH00/8Mz+R61knyNf77cp46Q/sVt6f
8gZA3sSTpelPzjJfCVfpPy7A48sdZb0eCDyvg7qfaJDE87x6jM/BwLml1Pcx
rtDneGwj5osh6H+6NoPPf4cC/4gfSn3dxL9+TGb8DYO8oqev2Z+7zMf63cxn
w8VfPy3n/I4Qe11R9zmNBH2g1SO+nxoFur1fK9ab0cBen9V5FR6QX9ZxMfX3
1NFDl4VX4fjGgL9Da7UeGgt+508zma/Gob+ple5zvF7AyVPNae/x4N/qVJfj
mQB5i2pcY76aKPpZqOc1kySfl+qjzv8D9v3ahuuDyeCfuSSK9poCevwS9fzW
B/T0Tj3V+f/AB9+Esd5Pgz5NH9dgvE9H+wuP+7D+zAB9omU72sdX5vtue64v
Zuro8bWs6rF++kn8v+hLf/OX/FVtgNr/Q95K52D622zQXS1v0h5zgF12ZDJe
5gIn9vKg/80DXratCfP3fMjzcOulvv+X+Vy7T73/F/46g/h8eqHk971VGX+L
MJ7gFHUeqwZsvkfZY7H4+6hc6r8E/pA/PZz2Xir5/EEB/S1Q6nvCD+JlwJFd
j3E8y8HvNEWdT7BCR/c+HhlLf1oJ/bTLHoznIMnX5hakBwNvzwjnemMV5PU9
rp4vrpZ6frCS2v8Dl4214njXiv8dvaju/wPOXJLNfBcCfZt7qvcB6yV/DYgj
3iD5o/8N/k+0EfRu/1ZQv03iPwnl+T1/KPhtHryjPTYDmxcu4vxsAf/C5H3s
fyvkHSicTX/dJuujrm8Yr2HI/5VXLKU+20H/c8id878D9Dod1fmVO2U+ao6n
v+wCPjDPg/62G9g9Zhj9NRzyyjlV4/OZPVj/ZG8rRf/eK/r82Un5+zCewK3f
1fl/oMf9Uv9rRUg9yRrA9cUBya9jgzieg+K/HXMpPxLtOy9S8XxI6kOWJ+0V
BXrgf1f4PPCw1Peryh5HQB/hVYztj4K++oK63/OYxLuHet4XLeupSqGkx4A+
Uv877XNc8mlD9f/jCdDNnKO5vj4JfCPhNufvlOhr94n+cFrqx05139YZ0G8f
TuLzsLPi72/jGH/npF75q+/Nz6P/rO/q/IgLmI/u3UOZ7y9K/tD/Q3os4sm8
q7k6/w/9/9pszPX2JfCP/fKP9eMy+js1WX2PHg/6Kst0tr+C9cFPPXU/WYIO
Z59qor73uwr+C0X+5P9P9L/ltUZwog7bVb/gRnteA/+M/DLs7zr0c6gUpf7/
B32nw0/KS5L8nTuf8XATuKObC9e7tySePn9Q5/9J/UhOoX8kS30yKMn6dEfy
Xe92nM+7Yt/6a9T+X/L7wd+cr3vAKV5zuV5LlfYtJ1L/NMlPqXNo//uUf4r+
mi70gvXED9Bf9WLR6v9/qefvOzKeMiQet92mvR7JfuCfug/8MdZXLrGdWf+e
QN7RzQ3U+3+03zSmAts/k/Wr5SV1/h/kvV+cTf95IeuDia05n5lSL8b/R3kv
xf9nXGO8vJJ49i2g/q+Bh2SdYz17I+v5aLWezgKe+u0q/fkt+jtVq43a/8v+
aH8ez8t+D+y863/3/0m8p6j7QbIlX7xvz3r8EfzX3m4i/yfxl01jOD+fQQ/7
qM4r+4L2vTrlc3xfZb4+OzP/5QCvuqzOT88FvrPUlPx5aJ/RyIf+lQ963pgZ
nN9vYr/cerRXgfR/swn99Tvis/lBQ9qvUPL5X3W/yA8Zn3cV5pefsh64q9bP
RYjHpPQd1O8X+NvHlmP731KPd63m/uYP/MU3dKo6/x/6BOa6cb7+yf5pQzrH
r3deJ8/uUqK6/w/Y4fVErk+LA4cXmJFe4jz0q1bwXnBJ0D3+qfvE9EFvW9ZN
/f8PfLrfWfX+X+jPXWi/MucRf7Hq/8SykGedF0//MQDdu+Zzzm854Kicqxx/
ecjTH7Beff8P+qfELdSnAug/j6r//SpCvvbfSvZvBP68LZu5PjAGv+loD9rT
BPwma9T9LJWAvXzW0z8qo/3jder/MlO0d+p9jP5QBfxu5/oyHqsCZxY3ZH6u
Bv6YaXM4v9Uh78ERR47fDHT/G+msbzWAnybdYn81gas30GN/tdB+4Rl31t/a
wCVn1Ka+dYBztxpTnjmwSSf1vUtdwd0WE9fTyU8/NbMj11v1Qd/QeAifPzdA
/xY+y2hvC4wvuqM6H6shsN675dSvEfgL7mrM95aQV3yvOg++MfCJJt583mYF
/oCgs1y/NwE9oWMe568p5Jdv9pT2agZ6sP1cvl9rDnq1nFDWgxaQ57XtL+Vb
g9+8Zx3Kbwn+6eP9OP5W0n/LaK6nWoPetM5M+mMb0FtfXkj5bSHPb01F+o8N
6M3GrWU8tEN7y8EbKb896CNLzCLuIP7p0pHxZyvxtWoEn7d0hPzmFZNZPzsB
73C4Tv/sDP7x1Xup8/9BN3u+jfmzK+jx7dX9H3agG5iuoz91k/5cnqv3/zp6
tvPLyZyvHjrsvcWtBuOtJ9pfNZug3v+jfYx5WbbvpcPayDLG6vt/8I/IcmN7
B+AiyxH0nz6wx86V6n4jR/jfo64x3J/3Bd2+7Ch1/p/MT3Jz6u8k87v2FvN/
f+DQDnfY/wDg81kD1Pl/kO8/U51n4gL80vYS891A6Hc3ZwDr0SDJh1/V/2OD
QZ/b3Ib5wxXy2+2pRn8aIvFbJY7zORTt37evzudFbmj/tPpu+scwyY9m8ynf
XewzIYnxPBz69bWdQ38ZIfJWVqc/jpT8OHsO538U8H+D7nN8o8F/Leeoev+P
/ho3vcz1vydwukcy8RiJ77Jn1P5fh02tBvVj/h0n/hw9Rt3/h/4urL3AejMe
9H6tNnB8EyAvwqwY6+lE8I8fM5bPAyZJ/N0aQXne4F9VMIPzPVny58os+tsU
4Im1yjB/+EBe9oUD/H56KrB7xwB1/r/knzvnqc900BtePk57zQDu6VdSnf8P
+ZX7FrC/mWjveiuD4/MTf+9WS73/B71zVjeOb5b430K1356t4/dITVH3Qc2R
+vguns9P5uqwf+rMItp7no7f2Wz1WLX/R385Ay7w+9AF0Hdeq9es9wG69qcL
9mzkem8h5D+8NH+J4EWSX64M4n1rGtov6PWL+i8Wf90Rq+7/A04OParu/wN+
nxZKewQCH+02mOudZZDf9cE0Pi9ZLv45J5b2XyHztaYX/Wel1Pvn6n+OIKnn
Z4rTXsHAW1KLcXyrgA0z1f2Gq8X+h9eyfq6R/H8lgfGzVuKh7Dp1/j/4Y0sl
cjwhyE9ZS2YzP6xHfMVmrFD//4Pf/HQe43Uj+v88aA372yT2/LSP+TQU/e02
suf8b5b2gS/V9/+y3rjdT53/D/q8Nj6cr21SL7NsKD8M/c2wMOd+ZDvatzK3
4Xpxh6xX3Dcw3+0EffPE0syHuyDvxqZI+vNuiY8jTWnfcLTP9bLj+509kt+2
HKK99ur4rSoNfMLx7JP1zlt1Htl+tF8/M5vzGQE8IOOG2v+Dv8v7bYyXg6An
5Hix/0ipN8t9af9Dkv9dpjM+ooBHbwijvMOYnw56m4iPyHrLcxH1Oyrx1KMj
z3M6JvlsbCrzebTkp5CO/J8lRvyv+x31/z/o3QsnqvP/EY+vU9T3kidBv/n8
GOWdkvXQ3Lbq/D/098d+OOfzDOSXKv+Q4z0r6xtnB9aLc5IfZjZS5//r8LIm
SW+437sg9fv2HOb3i5K/+gQw/mIh/1RSNz4vjBP/eb6b+l0Cf/v5Dur9v45u
N2Jejvr/X+pN1Xn0jyvor9O7CpSfIP5TcTn94yri5UOrruT/D/wV/pXg++FE
qb9xzrTXNclPXS4w3q4DvzJbxni/gXryYqQN9UuS9VBv9T/yTbF36xziW9Jf
7ms+r7wt62vr1rRvMvlz2f8d0J+6VaX/3YX+I06v4nooBXTnyGzO/z0dDnH/
Y8j5TxX63Y+c3zTIH9hhIuf3vqyfXMZxfZAO/ftc9GA+fKCj3/y2rhzj+SFw
2fgqzC8Zsl6/M5rfqz+Sepuu7rt5jHoRGqfun3gi8Zp+mP9/PIV+P5aq98PP
JN9k1+f687nky57D+fzyBXAnk4rq/D/xr3hzyn8JnNq/H/3xFezV/fsv+tNr
tN/3rTfpbyQfxEygvbN09LbLintT/7fgjzVU+693sv7c1Vy9/5f1d52ynM8P
Mv7zfdX9f8Dbl+1Q5/9LvuhVivPxCbhDaC3upz4jX/m69mT9+YL2y9qH0z5f
xR+PDmH+yJH6sDiW+S5X6skrdZ9OHnBKvXGUny/75c71Wc++SX6pOY3ncxTI
+qCSqk/fZf96pgvzWaHk643HaL8f4j/5w5i/f0r+OneE8Vwk83ksif7yS9YX
nccwX/6W/FVJnY/0B/K+17bkeP/K+kXrzfn5J/Uj/S/tqXcB9T7bUt3/d0FH
19up/qcpDnxhnAPjo8QFnbzVFdX9PyXRPnSqGp8++KPurKA+pUDvceoq9S0N
nPXnHe1bBvLi5+qzvpbVtfeebBdF+xlAnvvvW8wf5dB+Tdhh6lse7a1bz6B9
DIGN+v6gPhWAz32OYTxXRPu2Myqp//8hPya7Cs+HNpbx7u3E/k3Avyc2ifmw
Eui1t09W5/+BPifIUL3/F3uMzWT9rQKcPkXdj1UV+ljGuLC/aqCfvnON+lWX
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
UD/BDr6zGX8bgV/FrKN+G2U+Lqv/WTbJeqNBJe6vNiF/mH09yvVLqOSjBcc5
f6HgdzupvvfeDH3W5GjUfzPoZ3omc363SP3O4Pdx2hZ5/tJ3IOvHVtAXH93K
9StwdqMX85jftsl+fM8d6i94U/5x7g/CZH5+TuXzqTDE797tedR/u+xf59yS
503adqmn5Y3U/5ugL/+Xu0LoO2DvG7M/c352iv4d/Jm/doJu1rA+6/MuWf91
ms/43qXjd2w+We1/d6PeW/fey/Xrblkvrz/E/7PDJR97x8h5hlq45OM2hzh/
eyTfBZrK+3RN8Kg3C2ifvVIPEzJo372QZ/pwNvPDPtC7L9Hn/luwwQRP6rcf
+EL/RLbfL+urJSb03wjQN8+azPVFBOjHxxrw+7IDwPsu7WB8HYA99k99ze9v
DyIftPjE7/m1g+DfkGpF+0VCvnnQeNonUtZ/tbbx+cch4C+BXC9pgtM7f+f4
oyCvT41brM+Ca136Tf88LPniJ+8j1Q5Lfizmx/XlEfj77xU7WX+OgL50rvof
6Cj0v7PvGv3/qNSbBpcZ/8dk/3/RlfY7Bv5nZfUYv9GiT/Gb8r2XFg16nudm
Pl+NkfzZqjLjV/D5JE3dhyXxMuc/7i8Em/arr76Phf2s/zvB+T2B/Dz64FHG
30n0t/YEzy/RTmJ8D7r05v7+lDzPMjChfQRPPsL1pN5piZdifhy/4La7Qin/
DPgnZfH7E+2MrK+ObGN9OQt6XE1+P68J/nbxJ7/3PSfrhWE15Ht+TfDetSe4
Pj8v+6WA8CdCPw96xtVMzu8F0Msv4vNg7QL679T7EO13Efh6UCT1E5xlqP4/
jJV42P2Y/hcL+p5sW9afOLH3c94vpMVJvAxV31ddkudXvjzvR7sk9cXof9/7
yvMb+1J8/nJZ+r+Ty/HFy/g+1hd/1wSvLFpB/7wi+WG1DfUXbJ+v8flLAua7
3dWG3B8kyPORsz/4fOCq1LdmabTPVdFvbhL/N/wP9DE7P9F/BLt5hTH/Jcr6
tufyZUJP5HrrCOnXgEv09WZ+vCbr7wn59J/r0E9/4APW9+tiTxeu9/RuSHzm
r+L67YbUI4+S6jwyye8JjSk/ifV2uzqfDM8Hkg6Vp//eBH+j7NHs/5asv8aa
cf1/S/rXz6f822KPvnxerd2W55Nu6nzjZKkfP16zfifLetXQl+vXO6AXTeL7
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
/X/wO/PVhOc3JmG8Taw9KZ+BoD/yHMT150CJD4aeov+bDPwsqy/je8ERnRZw
fKeIfmVFM76YAn4jff9Q9/+BX7r1Fn+pCb6ZUIP994/Mn87+4PxHsFm3IdTf
IIn3Pg9lfBKE9ja7XpX2f5r4m9uulB/BsTam3F+ZjvTeyRPkvytN8N3Vr2jf
Zgg905jxwwzx91GBtF8zxb48+8r+nwn6gB312X+zRH7K839SbZaBn75w3h/q
/r/QX6v3qQRHjD/A9gWDf59rHaj/grP23VD7/0gf5ajOP89BfSPfUB50c1Fe
6KRU+qe5Ig/5yRz/efAfATuK6Z/miX0yD6T+aVKe+XTO3zXk99v6mP57PtLH
uPM9Pk1wn56vuH+5QOS5oi/nxwugn4UxibQ/C6W8xjxvpglOWbCO85cQlHcr
9Q7jI8H6K0bcH1kEXH53CO3TIpEP/+r0f4tBX5HL/460xRK/TKlK+QsV+exb
SPseKu3N/Zf9GwZ9aJW+h/oZBn467RLzhwM3jf3N+U042pfnrt4njZD2h9tw
fhGB9P3yEhlf/Cv2Mz2F7Rf8sn4o+28J0m/Tb30m9CXSX92acX6+VPTR3ofn
HwTPqvuQ8esy0e80J/aP4K3TXBi/L5f45No82hfBLX6q91EipT97DOP4RaI+
8Wdu0/6ukHh1WzL7dwXoWo6e9Y+S9pcJpf+OQvpOs81Yv5UGut+GvbuovytB
39+gO/c/Vsl6TlJ16tcq8P/+rRnjg9XAu3QOtM+C/wl35vxmDfIvsrxM+7MG
9J1vurP/o4HTipuxftGo7/qgZO7/rEX+8C68T68Bry7paKT2/0G3CT+u9v+l
/8ueYny/HvKwqHYZjv96Q3na7L+mcf16A/LvND5A/yvYYYRaX4sBPxdH1leL
QX1/7Q/k+dlYsRdOSzg+sbLecPcC6xcn9vPJJc6PgLNsxh2m/m008Mu+/XUz
/fNGGb/0uhy/eAP/Fr9tXeg/4kHX7/Clfm4y4MDNud6Un00or1TL79SfzUhv
1eup2v+X+f+E/tSfLaD38XvE+YFgK+Pn6v9o8DtZ1I/2SfDbcYPV/j/iv6BP
6n71VvTv7xnqv4BtKG/YZ77XqAm2/ZWh9v9FPuqo+7vbUX5Yi4HU3x1Ir5Wd
rfb/pb/PNuP6+E6Rl4cTGP/tlP6LNuL+aQL4h3w4RP+RAHrmqCv0T4lS/lEv
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
x/WRP6zfGPKvL/1pUZvy2QD69yC1ntr/N9DbJea3pP9uCP678wMZnzZE/5/O
rED/ayPjd/q33GfUbFBeySGB1K8/QTez9Kf/FLy17798n6QRcJlGfI9Ia4T6
xfgt5/3hv8Ave+Ug6sdfBnqE3ZcA1s9W9LXvafp3we/u7GP801jsz55oygew
w5GxvM+oa4L0bh9zGP82QXlD/I+r/yyRf3WoEeXTDvSt2X60300N2MrHjO8V
a03Br1ILJ/JvhvQ1Tt3i+bdmYq+3D6F/sxd91Zpy/OyRv13vaczfHHT7InV/
qLnIY3gM/VcL8Gv46BvtXwvxD0uG0/63lPbZLWB81lL68+hHyl8r5C+4Tnul
CX77bRnlwwG4YmEU/asD+K1c2I/93xp484BAOS+ktQb/XZVakX8bGZ/vd2k/
2oDfYD/1v7ejpLd4yPFxlPatm8X/DduKfSs+xvxtRX93qf/o2on8tevF/YV2
SF/l3nrKv5OMv0PpaKE7If/bmK+Mr9sjfZP8qWr/H3SPce14/qkD8MSgCPZP
B9qrkYyvOoo8x8dTfjoi/ZpX4Wr/X/z3gjjePxVc8d0q5tcDj2/Yg/MfvaE+
Woe//mT82xn+bErsTI4/cP+gNlMp384ob/3Sfxm/OCN/+G9b9k8X0J2GhtB+
dEF743wbUX67SntWjaL/6kr+TxnfdQO+PlTdnwU+WCI3l+PXXeTzDN9L0AQn
FQZJf+t6APs8Wsj1G8GrVhTTPruI/neoy/51MdQ3c0kFdf7HFen1X9qzfa6w
75u8o2j/3YS+Q60vu4m9WTGV/qcn8BkvrpdqPZG+9Kcb84XuLvJS8QDth+Dy
+TG0/x5iTywTKJ/AtlNP8zy8rhfiqaTXr9g+4ISc7g3Uf6cYv3/mnFfv/6M+
/U52Z3zoKfa9cRr7X3B8Nt9j0f2N9PfC/lT3/0E/W47vjej6SPzwXaN9Jt71
gePbV+LJ0df4fmxf0B33t6R89YO8pDobc324H+rr/yOK5fdH+uK4dMa3/UUf
yr6m/g8ALjHjHts3APVNz9zL+Hkg+uvnj16078AJC5rfZP0Hib9P2cLxG4T6
TDvdmvHXYLFPuyao9/9F3s/xPTTdEPCfnn6R/T8E6e1mT5f7dLqhEn+1OUj/
LfjHiEXq/1bp/7/dmH+YyH+rKMa3w5E+fnEzjv9wpJ/hPV7974r0P9MyuD/h
BX+QkjiP8j0C/t0j/RTtwwjwu29sxPUNb/DTWdgwPvEGv98vGO/ofIAnxM2i
fRVccfqhOUL3FXu+/Ar9k+AlLxnP6EaK/849pu7/o3/vHHvP82uj4P+D/GuQ
/yj054z5n+ifRov8B86mfxot+lRpmPwHoBsj8YR5M7X/L/po/o77L2MN6be+
2XiA5QNnxQ25yvaNE/vT8S7np4JbbbTm+uN44KOxLxg/j5d4NKkR4zc/8W/B
NuTvJ/6wb2nGl/5IHzjursRLmj/Sp0R7Mb4NQHvHmDei/gRIPHjcUt3/x/id
1SZSvoH7j5wbyPWLieCfOZ7vTWuCr3S6Qvs0CelrvT7O+Z3gbmOe078GAn99
qHF+KNiufyz1azL4DTKdxvtTgqtoVbk+MwX92czViv5xiozP1SX0D1ORvkKn
aK4/T5V4Zmpt2c/U/QP7lWldTvYrtH/E/uyvR/kOQvr+Qdton4Ik3p6+heM7
Tey3VwHjx2li/3OOsfzpSF/B0Uq9/y/++9BYzl9niD7MU/vPM2S8o4spHzNp
34bRf80E3cP5ndr/l/EOLkv7Lbh2LR/uv8yW8R6aTP6zDfSg83aPuf8XbODv
XSmf/3Vowcj/8ka+2v9HfqPr/bi+A2zbqmY85WMu0mftvkL7MRf1TYhrovb/
RT7d21A/BGcWflb//8p4LOd7VJoGuq8R3/PSzQe9RkggzxcILpjZkPdfFiAe
rmM6kfwXSLxU2ovysdBAfze9ryfjm4Vi3/5szPgwROzvlFCefw6Bf23ScqN6
/x/2ouFPK9q/RaifRZ4j/etiWV+oG8z+Ebzy63rGV6Goz6+rT3n+L1Tiu4d/
Uf/CpH+KLDM6/Q+Lr4H0
        "]]}, {}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 10000.}, {0, 0.5180691651379068}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic},
    ImageCache->GraphicsData["CompressedBitmap", "\<\
eJyNvQdwXleW54dhkNSSWq3OM9uT1jue8Xh3bJfLntmqnaqt2nJ5bW85VO10
T6tFkYqtLJEACRKMCAxgBJijmMQcxRzEnEmQAHPOAQxIBEDkcHx+597zvg9s
WWtUkcD3vvduOOd/4j33vv/znf4fffD5O/0/fu+dv/yPme/0/ejj97L+8n/9
MlMvdf+jjIyMzfrvy7/M4G/RP+N/m0V/9Mvv+vWv7Vd36exol06R+Cn8397e
LvEno5vfl3bt9e+5ryPtWqq9juTay9/7bNsfXBMdXXtHx3Pttf1he23f/WxH
R2fXZ7/rvs7Ufa8m1zqkozNc6/m9z3Lfc/NtS83tjwK5/5X9+oU0VtyS6UWF
Ulg4VsaMHi0F+XkyZ9k6adNmTuz+Rkbmj5DcUePl2Plb9nz9k9syW+/P1ftm
LV4vz1ohRbsc2bFWRuYNl7zRE6Tk4p1AhZ/pf22y8es5cu7+U3u8pvyaTJ8w
SnLz8mX+ii3SxMA6WmXfpuVSkDdCCgqL5Mz1cru36v4VmTZupHaVLwtXbZPm
DnnJmv25VNy5IFPGazO5eTJ3iY6iRUfR3iTbVs2XfG1m1PhpcuV+lTVTfv20
FI3JlxF5BbJi0z5phQ1tjbJ5+TzJy8uV0RNmyPWHNRkvRYo01T2RpXOmKSXy
ZfSYSXLyygNr587FEzJhVK6MyB8p63YcEUbe3lwv6xbPsnbGFs+ROxX1du/N
c0dl/EjuHSUbdh3n3hes+R/IlWPbZfm2I84PuVZ2QMYWjLBbt+w7JR0JL1+X
lsZqWTF3ijU/cfpCeVTbZM9cKtkrhQXD9ZnRsuPQGbvW/KxCls4uVsrmStHM
xfKkvrkLq3+p9KmW4tws+TRrqBwqKZMTx4/Juau35NG1UhnwZX/ZV3peDm5a
Kv0GjZKKugZZPW2UjJm2TK5eOy9jBveX5btPS+WNUsn6MlsOnb4g+75ZJJmD
x0jFs9aMF2IfILe2pkqePHkijx/clnE5/WTT8UvS3NIsC8cPl0nz1snVy2ck
L7uffHPksjy8cFgy++bIifOXZefKOTIgt0jqGhpkfuFQKV6wQa5eKpMR/fvJ
hsMXM15M5vFUJg7LkrnLt8n1q+elcHCWrNpTKteObZPM/rly5vJVWf9VkQwZ
N08antVJ8fBsmbf6W7l07pgM7NtPDl0ql6uHNkhmdoGcvXJV1syZIMMmzld8
dabmoXz4ZkGxDCmcIVdv3JDd6xbKgCGj5P7jxzJeafH1xgNyofSA9P8yS07d
qpAzO5fr92PlwvWrsmTqaBk1Y6U01lXK6IGZsnzLYTl3cq/Srb+cvP4kw5Fw
YtNXMnbeJuNeU/V9yeufKat3HpczR3dKv77ZcvZOVYKE/avnSE7eFLms7c8Z
p3RcvEUaqu7L8Eyl494SKT20Vfr2GyTXH9fJ/pWzZMjI6XLl+hWZOXqoTF6y
9Y9QqRkZfxUhXvPgihQMGyQTZ62SZ1E1HN7ytXJ7efjQUStjhw2Ww2WnpGDI
cDl7v9Yul+5abTjcvXm5TJi1JtzbVi2jBw+UkptPwsT+2CRx/ujhkjN0mOqU
Avn4o48ke0ShlJw/LcMHjZBrlQHGhzctlqlfLZdtaxbI1EVb7Fpnw0MpyBks
J86WyjC991ZNq13fv36+FM1dxTycRzX3Tkm/rP7yoCFo85KNi2Ta1ytl2byp
snDDoSAV1TdkeM4wKTt7XAbnFMjjxjDojQsmy+L122XZnMmyZMsxu9ZQcVWG
Zg+RO7UtaThokqmFw2XjvouBMHUPlCI5su/YPhmq/K6J1FsxY7ys2rZHFkwZ
L2v2nLZr1XfPyIhhI+WU4mTIsAlSF43OkimjZfn2Y7GPX8nJLQtlwoIw/Vtn
9sjgEcXSEIgh8yfmy9q9pZErDTJZlcr2E9fs44NLhyWvYIKcOPqtDB85TZrt
arviI0+2HjwiU8YUyO6yW0F5nd0nw/PGq/bXUWRk/NfW9c/lWeVdmZybI3nj
Z0hdc5vs3ThfpizYGVVTmywcO1w27d+tenac3K0ItLt1/FuZOHWGrFOuzVqy
J9za2SLzRuXIrvP3MhIUqAXZuXymDBs9XR6pOpisYri99KbUPboog4aMkyd1
gbOX92+UollzZdXSObJgTVSMrfUyc+QQ2XZojwwdPlGqGgKdz+9eK+NmLUjp
U0XB3VPy2WefyPajF6S+tlpmjc+VOas2y0LVm+t3nQ00aaiUoryhsuvQDhma
N12NVujl2Lr5MnvZapk7o1g2RQ631j2WcSob5x81dNEGe9YtkiHDx8uREyWy
fHaRmg21aqd1eAVzpCU6LPuWzpD5a7+R6cUTZdfxG3atseK2jM/PlW/3bZYR
Y+aLW+xdiybLvI17Yh8/6YKCyyVbZPjYxe4Hyda5E2Th1kORKzUybtQoNcjB
LD1VUzhu9CjZ/u06GTVpeVAYL8qGWWNl+dZtMr5wnJy68thurbpxWkYVFCgI
HjYpCP7abv2ZzviRjB86QBas3y/7tn4tU+Zvj/22qhgPMwCMUPG9XRFQeePY
TpkwebqsVwDM/HpXBECzzMkfJLsu3Eup6WqZooZt/e5jqs6HyaGb1aorrsjA
wYXyqD5w4OLeDTJppvJ+2WyZv/pw7LVOpucNlu2H9yrvJ0hl5P3Zb9fIuJnG
+4Qx1XdOSt/M/lIwcqQMU7EcMXqyPKh6KotnT5S1356JzK+QiSOGyO7DO2VI
7jSJXcuRNV/JLJg/s1g27r0Qu34kY4cMlPOPG6K5+YUS+IwM+vRjKRhTKF9+
9KmKbpk8vHpQcvJnRZET2fP1dPlqDYyfIN8eC4xveHJLxuWOkF37t+i45kns
VnYuKJJ5G3b3sOb/TJob66Syqk5O7/g64f8V+F+4UNxL3Tx7XIr/7fB/pBw5
F/hfc1st4MhRsmPXehk5cWmCmfXTFQDbFABjxkrJ5Ud2rfJ6mXpZAOBRU5pj
IM1VMn/mLLlcHtT8iT3L1CDOkoO7vpG8CXPN05Hmx5I/cJAcv3hBRiulD18L
mDq8UWE7a5kc2rlGCooWhO4bymXEgGwpUwPmXlXlrdMyTI1+375fypEbldLZ
+EiG9s+W0mhadqnRmrpwneze+LWMnbUicKPmlgwdMEROX70ow7MHydmHz+z6
9qXTpXj++nRb8OzxFckZlCsXbj+SBw8eyLmzp+XOw0eyfsFUmbYs4Lm+/JwM
HjhCzl89Izna7M2nQRZXzhgnSzbvlbV678xVAc9P75bJwAHD5X59awKEw6tm
ydBJX9v3l/etkoEq+Q9unZHs7BFSbrqxUxZMGilrdh2WJTNUYjcHZfb46hEZ
MrRQzl84IYMG5cmjFq52yLxxubJq10kHQuW9czJ86HAZlTtIihaHId9TFZ+d
M0qqbKQtMkPFcf2Bs1Hk9POYXFm9L+D8ZulOGV4wWc6oQ5kzbKw8NVY0yeT8
YbLzeKnMHJsn3xwOOL96fKsqwiIFQn1HOhBUihdOzFXsTZfDh/fLmGH9Ze7K
3VJbcVOGZX4pyzaqxZw7SQaNmqUud5vsWDJFcgomyt49OyQ7K1N2nLyjnLgs
g/t9KSs375CvZ42XwYVzpb6lU/0dMW1zcudK6fPeO3LIANQu6+eO1/6myp5d
WySrX385cOGRUv+0ZPftK+u275KvpoySEUVLpKWtVdbM0sBDTdXubzdJpt57
8PzDF5Oht8oqvp4wSw4d2CPZX3wqW45elUeXD0tW30zZsmuPTFNrNnbORmlr
a5IFE0ZI4bQFsnPrGvmiX44GKHVy/9xea3bb7j0yecxQGf/VZtM2DoCrRzZL
v8zBKtH7ZUYhbW2QNo0AZqrlmzRnqWzfuEy+yBou1540yPUTWyUza5Ds3LtH
xuflyLTle/TeOpmaP1CKv1ohW9d/LV8MyJVrj54FALyi9rJVrpQekoEffyCF
87cao9rUq580fIBMX7RGNqu+/XLgSNXDjYlfWLZrlWRlD5Nd+/aoX6I6fOMJ
aVVrN25olsxaul42rpgnfXPGyCM1tqU7l0mWysjufbslL6e/LN5SEiOE4Bf+
XEOfCtm4cokUTSqSNZt2SX1zkJC7F0/JrGmTZdaC5XJbPUwTzqZa2bZ2qRQV
T5HtB8s0YAyovHX+hMycOllmL1oh9yrqM5JIsKNJtqxbIZcehEiw5VmVjm6R
FE2eJruPnYu6rlPjocMyfXKxzFuyVsprgsvRUl8h3yxfIEVTpsneExe51yPB
1sansmXNEpk4oVi27DkizTaODjl3dI9MLS7WwHGTVD4ziVOH+YGsWjRPiqfO
lCNnbkRF2SFnDn8rU4qLZPGaLVLd2JrhbcOQkr1bZXKRfrdyk1TVB31f9/iO
LJs/SyZPnyMll+7EZtrk5L5tUqz3Lvtmp3lTpkge3pIl82bK5BlzpfTK/Yil
l+S+RpOb95wS/6l+cE0Wz5khU2d9JWevl3eP/O1sa5EjO7/RZotl9ZZ90tga
6FR594osmD1dps5eIBduBVXc0dosB7etlyK9d+32g9LU1hH52zXT8mP71V2e
Pn0q9fUWsGYs7PrVmTNn5Pr16+lf/dB+vWBPnThxQk6ePGn/1qxZI5s2berJ
B32Sr0pKSuxTj++49l33vfL/877va+/UqVM+pO+873ufPVnyB8+mt9ctfnPq
VJgybejf4fKLyWX/59TR6+HRbrSmCtD78bZTv0/6ZyVwoMipUyV2nX+79x2W
8bPXJc/E/r+rk55deBNvCtPR/310tbW1Ma+UsLVBg+5r164Z1/m3TV2HvXv3
9uSDPnno0CEjG596xGsHDx60Fvnk9x04cMCGmLqvh6xdu9aep9kb1693t8sv
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
lzEgXrO3T4Xttd5sxh/9v9n/Gw8=\
\>"]], ",", 
   GraphicsBox[{{}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
       PointBox[CompressedData["
1:eJw8fXlYzc/7d8oShZCPEKKQtSwRhVdJspdIEaWSUFSK9k77aT9bZyMiEUIo
ylYpZM9WIQohWkSWUHnOc33v+fnHNea8Z+59m3vGaJddq7coKykpaYxXUvr/
f//vT+uCE4o/W/i7F9A/4IXuxi0LbB7RWBWBg27lS/pV0FgDPzpW9Li6+TmN
NeHVOaC3l9tTGmuh/Q0eCDvLaKyNZZqb7qoEVNJYB1ojKzX0XxTQeAyqDgwP
il39hMZ6yF04bdOVWRdpPA7dn5/sze2fQWN9NBb3mqKmW0rjiZDOcXZ6F/6A
xpPxdeI5/ZX9j9B4KhoPDDndsw+DzxAG1991GyUppPE0NH9c8Cbl4hUaT0f4
QbdcflQ5jWfgi8j4d6/z52k8E//drssycmD4GeFT0cj2QSdyaDwLDpUtKzij
DtJ4Nn4kNeg+eMfgM8YKHY/G0ZoMvznIjDIZYv7Pj8ZzYVgnNMn+W0xjE8xP
81z/2+E+jU3R+dbz+4DnJTSeh0lmjoEa84poPB+pPQo+Pv/H8FuAbgtr+iWe
FtMYGGxtdO/oKeIvB7hyPH3boXuM32bIfbBf/MP4Ms2boWfFstM26tdp3hwy
8xjPmW1Xad4cUUsffbi4mfFjITx0X4bJXhO/OQtx+3lZqPHBhzRvgXUb9q/6
0Uj05Fjg+YEuA4MeDP5FKFg1VfI1ltbjLILcZvks/4+Pad4SqadVR3jPJv5w
LJH3Q1r0fMwlml+M5sNeCTNvse8X46ypWWZE1U2at0JP4fy/m62J/hwrDLu3
q33SW0bvJbjw6GzGfI6c5pdgY+qnNSWy2zS/FEPDLy9Z8ZP4yVmKwK5ujj36
Mnovg3ys6vSGpLM0vwzPfd5Ev7Rn9F0Or++jly/uQ+txluPBzQuWRQVs/xVo
/95aMLEqneZX4E9p/D8LDqPvSvQe09y9twXRg7MSxQGrIwccuEPzq9BhOvPh
6NZrNL8KX6p/9z/gyvhnja6nNe5mtnn/G8MaT7ITPx9VI/pzrOGkc1e6Wo/G
xdbI/Cv201ieS9/bYJmB6gGISf5ggxtJ2VenrqX9OTY4X+I67KwH7V9sg22D
tXeOXcz0aTWGG2hyDNRojNWY/c6859lRDJ/VaPQ3P/zjGNGneDV6XrGZLFa9
Rd/bYpvauDui0Xfpe1v4TFgdfSaSyYMtxkz4Yzn3AvG72BY/fNIFh7oY/dag
96mqzoGHyZ5hDfJsnQ+fTiV8OGsQ7v9uhpBH/ChegxHdbPS6z2X6uxaRcetW
Vp5k+6/Fv3b/qpPetB5nLVKHrmkriiH9KV4Lw7V/2403ET2U7FD3QOeup4Dh
b4dix1tNplcIP44dzt1ZnTa1nNHPDirV+aWz9Zm+r4NzqG3IzcYL9P06uH1y
nP7bkewDZx1+d8p7XnpC9ql4HZym/vyaHMHslz0e1LsYRteQvMIeImli7tk8
wpdjD6Mtcy/6LSJ6Fdtj3ffRLWuuEb5KDog/bJLz4SPJExxQ8+exysT/298B
Cwf2L/7P/QZ974CThX9tFyUy+VmPI9fL7pxKYfRbj8FB7oKpa5g+KObt1Lu+
upB/KF4PA8cRWy7VMP3dgBkXlsPBldFvA/QfjHJM20X2hbMBV6uCPPQmkj0o
3gDlplq/UF9Gf0eodiwxyFhO9gmO+OvWXSVnOOO/IyZcPzJocQjRt9gR3NYW
5a9WhI/SRgxLfWhg60T8xUao1X1Z+eIl/Z6zEaEBx3usTmb834i9W2+tMtnI
/OcmvLpw/eGDUqIvNqFL//bY7SHM3m7ChdwNsd4l+fT9Juhd784zXcb454SO
jte7fqoTfeAEh9qcxCO76PccJ+wX3bzUJSd5KnaC5XXukaE2pO9Kzii0mHAu
25XopeOMU58Do19MYes54/elHylrVhK8zs6Ij3qyKaec2UtndK6ZN/BMH6JH
hjPOdtPpf+U8w9cZle02+q/fk/2rc8aSMTMfpQQx+7gZR5+796l8S/ZQZzNy
K6a9NbQm/mAzvnV4mDd7naP9N6Pl12vLe7bMnm3G1uFnVn+uJngyNkPvWn7X
MC2mr5sR+y0n578BJJ91m2FglKP1YTnRR8lFEW+MLR/8iPyXjgs+nrI9uU3j
Hu3vAh1D7/CNnQdofxcYmRxayhvB/KULwj4VJo0qPUP7u+DlqQ12ffNJvotd
8Hf8WcvD02hc54I/vUTXXB4x++6KHTs411dUUbyg4wqL29uefprK8HeFRCPM
+1wfws/ZFaLGwKrl/+ePXXGruSJP4kb8yXCF4YRcXvrebNrfFV7D5199UH2a
9ndF/b7x4x72YvGDG8S6ZyTfxpN+6Lih/fGUuw9O0zzcYDdxWE+LRYdofzc4
2yV1qe1i9tkNL3JGWx1dzejvhoJ3WbfXhzN74wZ5xc1pDz/RuM4N74ZlPn99
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
Ynv/sWQf1Sed/TE0qf+pXt/JXnn7o2LrjL5Vl1m9yx8m3Z2bfzB7xPNHpL58
78yp5H8y/HG15Ph6lfkkn7n+8BbsHuYhIvoX+8O43+eJc3xIHyv8MTd89NtF
50h+6vzhIhoXFPyF6NHqj2MOvKxyT1Y/2YNBtyqnOSwi+6KxByZbCyum3GLx
4B7EBYqchDtI3g33oGxP5fUxAazeswe2gXNG5WtR/mi9B0vtfycJe5A+Oivm
r0cpx+8g/fPegztrp5l/ucHipz3o3j25osif+Mfbg6MjLUeNtSP+ZOyBhs2x
4JPLCL/cPRiYvMj2YxzLZxXwpIbMG1BI61fsQeaRWl8TdZZv7MF8P5XTl6uI
f617cGRRLldHSPZeaS8eVBxZM92a8NPYixlrD3zJCCR50dkL/2zvHUbPaH3D
vagbODnL/hXFs9iLMy6D9fJOE7zWe/G+UBkvmH133gvxp2L++J8Ev/dePOXo
NY5bzepDe2F4dv+z8770e95emM3fETPHmdn/vVgXdn1xkZT2z90LnQ03Jq0w
ZvjvRWzPiyrHJzH+74Xz1XbPn29Jn+r2In9G2IcyA5Kv1r3o99UqKteE1S8C
cEylyjf8POmvRgBa+gZMXnaR2b8AmL+33Ri7hPJTwwDUq9y6p9PF4qMA/Kgo
UsqTEr2sA2C3w2laShTR1zkALyIy01//JH32DsDEL+fV/Icx+x+A993N7l++
RPaaF4DCp823dVSJXxkBCJo+tfjCfib/AVjHPepetYbFNwHY16fm/dockr+K
AJTN4pi0vqH4ry4AWhyTB3MfUn7eGqCQJ+lL2UQWfwbiR+jOXiuKmfwHYl3z
hOkLYwg+nUBckAa4OTF/aBiIz0N9dfZyWX4ciAenxgVmNxJ+1oFocRh98O01
Zv8C8TwiO547ktb3DsTFcq39l7qx+DkQPfRyH1WmEv15iv0Mjr/ov4jFs4Hw
ebxjxvYlBH9uICp/PXeK9WD12EBEzvWaws8ne1URiNxs5dDyvSzfCES91uva
XT9ovjUQeS9VU/KvsfgnCP1unujt2cz8XxBO1gt8uVuIPjpBONaoFPiijuTT
MAjy6TzjFUdJXxGECbfu92w2JX22DoKnikZ2chSL14PwZ6Djk10uzP4FIWrO
o1HCUlafCsIDR8cHVaVM/oMwSzJweuUiJv9BiLOeoNbnCc3nBsEsUad2iBbB
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
ZFjOnSVRTmXnlcmY0eP47OKjzP4r6BvxweGYLav/JmPd6HkC5f60fnkyfl3p
XHc5neShIhk3bnB+nHpH/KlOxvHD622+JrD+vmRseP9uCm8Di/8U9BlpaSrU
Zfl/Mo6uW49nrN+6PRkZr257Hs1m8X8K/lVvP94yk/IX1RS8Eyu/iwxi+p+C
n6mj55tfonhGKwXfDV8ZXj/A6r8pUJ4g7xVqSfZcPwVNjk5ntXbRvGEKHqc7
9fnvOsmncQqyXicnrmT90UjBXvFXjcbRRB+rFOSHNWT2ySd4rFNwWSnkzMkc
gsc+BQ+3K7f1nUH9m84p6LUrv8ZgAMmbRwoCGy4s6XJj560pMJ10tucv1l8c
kILkhXeVv21m/j8FaT86r41n/OGm4PRgm0kiDaIfLwXTdvkdjFxE+iZNQXnc
tMIznqw/TfH7O02r/40gecpOwXazMeGhp0k+clOw7o+KZtUnircKUvDyjtq4
Gyqs/peCiy2qfb/ls/w/BW5jeq4tWErfV6Tg2Zf3F1osqF+sOgU97PwuH0ym
+ToFfvvfaFXOZfX/FNxMnvN6/HNW/0tBya4CR48Emm9Pgbz3OXtpF7v/kIqQ
mas8xsSR/KqmYp7cauywO6wfNBXbT30u69vB6j+p0Hi1bunlU6z+m4oNKu5Z
Of9X/02Fu5/nrpbvZL8MUxH3PH/U3N20n3EqhumkGOrZMv+fCo+sguj6QuK3
VSrEBuvUp3gRvtapWDXySs6YHFb/SYXd88kb2nqy+D8Vi/e8GK9+gZ3/pmJ9
jsPlP6upPuWdiu8W3Sxympj+p6Jv7JNUywx2HzcVm7odt1hoTfhwU/HknOfh
jespvuWlonHyjT9HFrP8PxWlgVWlZuasPy0Vye/mji/IpfWyU2FjUPmwBqz+
n4rhU/5rc7Gh/QtSIeku+XswkuV/qfjH+zDB+yLpR3kqui/kWXIc2PlvKsyu
ScSWe2hcrYDHoovTMJv1dynoOanzhXct9aM1pKJ32u30Py2s3zsVgaJJapmv
iF7tqWj2doobtZLdv+LhGfpldvQk/ejOwxR9361tucQvVR72/VoaX/OA6KPO
Q5bA/PZm1j+pwUPi+Xs3ZnSSvmnyYDjQ6lPXAtpPi4cRe/inK/0IX20ehh95
0LKzgN1346GvZWdV8Ujyj3o8HLyQebtnN+ZPeHCq1f01m0f6MZmHltdJl55N
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
ERn0OoVdfjyyz9kyzB50KuQsux+VI8Ow/a1VC1TY/UoZzmvN2GeZRPqcJ0Nc
ybW3l3az+/YybBpp89kugfoLrsjw3zbzlB/1TP9leL/3yS3dPzQukyFvXsFG
KyOS/3IF/3j9pnkPJvm/J8NEXvRgVWV2/idDodTqqtYcsv9PZeh89arft5vk
b6tlaCxxVKnhED1qZMgKN/ZZMo/4VSdDh8bSsxfaWf1fhsvj0ztv3yZ5aJCh
79ydpb3MiZ9NMpy99Ke/ZRvJV6uCfrK/j3cdInn5LoPWq05e1jKab5ehaenN
jt2Dyb90KNazrN17eBLhqyRX2K+e87Zeofi9uxwp/esHGckIP1U5jkpm3TT5
xPy/HNe2VYbXWrP3geTw+NdN+gX+pP9yvDvz925zf6KflhyCxzuKpoxg/T9y
HPv0+sST7mS/dOQYNOegliZ771dPjvDTpZnf2X00fTnmHR/FSasm+k+WI7fJ
PWjafdZfLodX3aa/M0fR+dRMOf4U6n+omcrem5Cjuma/jlUw+RdTOfZpBlf2
YPSH4veTto5yDqB6hYUcWlMPGvj2pf2s5LBUVnsVPJHV/+To6Vt8UOV6POm/
HA6TigNb7tJ4jRzL9teanRjG6n9yTF5edPghq087yiGPm5N6ty/Rx1kOx2ON
ms5/CV43OSw2HlB61pfiPQ857HdrlQtlTP/lsJEFRYXNIX3yluOjd//9el+I
n35yFJbMVc6yovkAOaJ+fj5c7k/7h8jR0A03TlaQvHDkkIbXnpIcJ/sWLceI
3OfV1pW0HleO2XEFx0/+ZfV/OX6EqH0Zy+rbPDm6iZOiTCvZ+b8ciy1Nzn/q
Yvcl5Riw5sjStllEj/1y5D199bjamOYz5NifmLxsTRvBd0SO0FFCj12fWD+t
HDMitry6m0DxUI4cj6yMon64svhfjrP1W83+GJJ85smh9qVgeY4d67eW41aF
S89CVRpfkePO9JCh59ZTvFQsR+T9dbVnDEgey+SIXpb+I82F/Ee5HBOichvM
2ftx9+QoWhD3dcF41p+voJ/hEW7Mb4qvnsqhsl22P1XI3mtS4P+jVTe8OZb0
X6EP4Qf7rKth7zPLcTV6RXu/HiT/9Qr5VrrfMnM6O/+Xo+8swdXP3Vj+r9CX
dfrNT5wJn1Y5bvi9u9dbjfl/OUTC5yHWZgRfuxzxn+7P+FBM9rVDjm/3TH/U
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
HlFP798To9unZQYRusSPBxz/1kq8+LfYeloM4cXyZ39Z/rNyMV4oQjdevEj6
+ESM0xWDZlhYkPw9E2PMuahLG7Jp/BVi3JkpvOXpSfhSyclX3LYy/tAUsr9i
mKRPrOzN/LeqxFghF7w9zO6PqsV4+kzy0k5N/lHvxDCo2mO2wpT+XyNGeUTD
6P7BxN+PnLzMXTf1CKs3XsvNN8er2qg3zf+LGLU9tqd0XMTu78RYWVPR611f
0vd6MdrYNg1850ny1MDhM1Tr2o2g/pu4+Zc4HPO7Q/bvJ6dPhw1i77D6WL/F
uKjTatJGPaJfsxgvx7n8MBBR/y1itBcc5+0oJnukI0HKvG0Lr+4leulKYJw1
wf0785dvI8Fr59DbvVMWk/2X4M4qv9uPnen/+hJE/nzt2MWF7IWBBI+KdNtu
YPkGDSUYzXu47YILzb+TBMKqUcNrX7P8ARL0N9zW6HaU8KmrBBm/gy8Myib6
GUuQv7D+iul9Gk8PCSZNmu53jdWLM5HAenzG49wFhB+mElS7eG4618juGyVo
1WVS6tbZtB4xl+Bnt7b/tj9l948SbJx6eLEPn8ZvJcEV5at+m5MJv6wlSBtm
XWrtS/JgI0Hv/l8T97F8WbYS7FncaeJMVh9hkATjAvM9HFn8lp0E7g+9Elc8
J7wfIkHMpFDHI/cIv+wlkKR59u+4ktbnwyUImf23j4ETs/8SXL47fOw8Fj/u
KIHFpH0Pi7sTvjhJ4HxhQ+tOaqLfGAluFc968jSM5TvixqctHD/GheTNRQKH
un9/Ylg9UkjwsEfnK4sNSP9duf9rxn4zNaHzBrf/45fNlTPM3rhz/Z2V/tvC
4uUnS/DF8Pugy/Fkbz0lOP6w8XRiOv3fS4JXY7MlJrMJ77y58Q3ye9/wiNqn
S3C7V79SKxYv6cvx0yUUR7+weEoJjtTvWnHpFLXPkeCT4kZcViCLr5RA5OUR
4xNF9Pfn6DXpzX+6cSQfARL4/dkREzeP+gvk+NFkDpt19H6QBI1l/RwXywnv
F0sQW1t+tUCf+WNKEGD6rcLpFMnHco4eLdEVdcYsPouTN4Mlq9aw+qKrJTh6
bdd0s2Ciz1oJLs2XHk2rJf4GSyC4XDZtbRzxY4MEL3/OqXy9hOxxKKcPYxN/
HMol+QiTIP6fjuRONK2vwiUwuLp2Z0IM8++SoMh0bt23cpK3CAn6ZHfyHR5D
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
x8EVdD8Qq8LHrlZ20T6EL/EqZOXmD/P0IX7u4/73SvF8FKv/fUCFLYnfvqSz
+K0ETv/qlxlM6M/yR6oQE3wvv+Mbyt+TxMlDRlF9fA7Jz1FOnvILEmoTabwp
KlzblPY2huU/TFVBZ410VzOrv5Cmwo9+9mV9xxB+8VVYdGe3fr/2zP+Pe95r
pm29n8Yv5vRt4/FlnfrQebqU4396wtpBl0lf5Cps9dO77OBF9lGpQme54YdW
WtIftQoX+7zaOteY5qNVYfjXJ/x4P7b/V2FlefrpMz1JvzNV+J2iici7Tucp
WSrY98pe4biP3s/m5DMi8NGyViyfvQr6rQuFC1l8Qg43P8V1t19lpI/nOXnS
mWM3fy61X1Rhs/W1weaeJA+5KnS1tEy4mUnny3kq7CufKy5g+8MCFXbfmLlL
zuKrr3LtD2PPVRiRPBSq0P5XkG/qDtKnIhUW/7td1bc/s/8qzGxeKJjKo+9L
VGjZXfZ0WBrZu1IVejUpCxJ3E17fUaHL9ZV234tpPXFPhdq7R18bgcb/QIXP
Fzykd//n/8/Zh1EHJ793JfqVq9DhVMHbHpmEP09UGPwuZcib0zTfZ5w905Ht
3jOFzp8qOPlxLdNXZtJ4K1VY2vn3lkMsn/MrFUwy2x0Us/vPKg7/1u+Km+1C
/Ver4PHwXpFVCOHROxUmJcXPq/cge1OjguOY2EGr2PnXRxWcPnnsWd6V+f+p
0HagovJUDuHDFw6vAh/o7GP7lzoVXsu+iJexerP13HzUPSsd95P+NXD0WjlA
Oj+Z+Nekwn63TwWNlcz/n5vfRL5K35PG/1uFaqG3/FGrSLL/KriidkLfZvJ3
bOHoe80xo/Nn+r+OGisPZfzbd43mo6tG3G2eibc/8bONGs7qkDMnPOlZT43P
vfuuyWHnD/pqLHjfYO0SQXhqoEbqPCOjive0nzdU42LGClWUgPaTndRYuGnu
hOkbWP4gNVZEZhwyTgkl+68Gv2al0/aJtF4wVuNM0neXeZnE3x5qdC3vNtw7
lPozUeP1kIqr57PpfNlUjU/tT/08WEz8NlND8H2FbcUd0n9zNerqfUuLLrL8
Y2qEbnWxan7I4v/UkHQOctBh+WOs1TjhF/+zvgOt/23UmHHysN7a8WR/bdWo
lZtahzE8HqTG445BL56fJ37YqbEjKdx6+zPqb4ga4TVX0v7LIX2wV6PyzteE
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
YyXdX1dx9OrovGhMOPP/4/iza8HO4VW0Xn2nRVZP71mnk8je1GgR82Dac/FT
0o+PWrwaE3s4oRfJYy33/cjmt5GPlpL95+Qp7SuvWET8qdPCYUN8mJrVM63n
6Dlr85x6d5bPn7NHs01L9YVs/8/pq75knYzVT/+pRcTdtV0HDaD235y8TLat
y2yk9V3z/9lHg/mbOpC9btEi9dbkju0PEr7ppGPRnwdn+Gz9opuOMxaSvysG
ED/bpONllSZ7+Dbipx733P/oAzs7Vh8wHQF3x8V4rib7ZJCOqhuCGwtukzwZ
piO+9sSoJ3HEj07pSBvtqR/E6sUYpePt7h/Gn3aR/ndNx96RYTbmX8l/zzgd
dz10xx2aT/LWIx0+myeJQr7S/03SIZpyrefAlSz/bzq0u303eScSPc3SIZYf
Tv6yj/ztzdPxfPi+7x96MvufjqFVwilXutD7Vulwq3ReKutM/7NOR+92nfR6
/CP62qTjuNWyeztusvP/dGxyUx3YM5C+H5SO6FHTU43sCR/s0rH4Y2ifXTok
H0PScb8styzPiOyRfTrGJOuKOibR/efwdOzJFt6/e4HiCx3S0etg9PoOrL6B
YzpKPNZ7RHQhfXBKR9Gkl0tUQ1n+33R02ORcdmg8y3eejqODfHR6/ST9c0mH
/+a/k5+yfElIR6nluG9FjvTsmo6ysc/WP6mi/tzSkSWd0TTBivjhzs3/zNJ+
V0Op/8npUEv964ziSR89Ofl5rilc25f44ZWOER3eDr0ygfr3TsfgIvP5r5Yy
//90NM6Wyk3j6T7INx0XemqWCy3IX2VWOrL/H09XHpfj97QLLYSoLEVJohVJ
UhGDlFKWSpbIUmRrkUpIylIhhFBEZUn1bPfyFJIkJIRC2ZIkKe0rWeo97+c7
5/fn/Xnu5z7nzFxzzZxtplfNIm8E/u5Gxmew+cGfn7h/ukIAnqIzG64vRn2t
IvJo0eBDPtDz/wIIXZDY5vmXnv8XwGOV4KmhISjPdQJYFMm3xgzFeGMD6X95
m2XlHbQfLwGc3LM2O/Ilnf+T9pr9JKPkkX83C6C0++7NcTRf9VYBiL5aM0kZ
qJ/tAhhZ3Wd45waMB3wFMMdQ7aOA5hvzF8BM3aPRC2LxewECcLlr1J0qpfl/
BfDPWd42h94XDBbA3FX9f/Yym9D/C6C5Zo++qjN+b48Ash5tvt7GYPuhAtg/
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
/A+Iv3l5TxxWjf77YRbM9E9WtjuF8s7PAufGaD5KQP9RQOKB009W3Y7D8T/K
gvMH9oSnFtD1/1kg32H4NOkxvl9E/Nvfz8+CaT29xwT/nR7iOxdcv/OE+I9I
/Vm9FyG+ikk8/OWu24hOjE+fEn8xeJKTxUF63lwW6JufHbz4HurjWRboHbrs
o0nrcz3PgqFeE+KE/jT/z4IRN+e8rjpM69FnQXTkkVTnDvQvZYSPflwZf1QN
2ysn8e7yzhG96PkzFYSvrc82j6b1fCuzILbmSsmLU6jflyT+6TJaMF8Z7a+K
yL/naw8Xhv66msSXqRsnrNyB8n5F4oWM5CvG8tje6yzwsv+wsonmN2+yoCH/
uueuSPz+2ywwsX94+jVH9/+TfOwje3FaMuaLNVmQ8Hn7zxRaD6+W+It1RVdu
hOP777OgWddj348RON46En8PGvBpkSL270MWfClpz2i4gd//SOLVwPHsIhlc
3/SJ+AOZ04OHK6H86om8Lx8qPM/j+D8TvJ8c6QS03l8DyR/M3AIuGCAfN2bB
EiP9hy/jUD9NWbDW2yVJzRH57Qvhr2kqbofVcHxfCV7lpuxkF6A8vxE+WsU8
dJagvXwn9hRTOOZYOn6/mchb7XTfxw2IjxaCr9jh1ZpXEI8/ssDvgE/OZ7rf
pDULwnsuWNltwnzoJ4nnRv5bsX0H9reN+OPNFfYrMt3+u27PAs2+zqOvvcP4
8xeJx05LNzydiXzZQexPeV/rZRma/2fB4oUds2x80B/8zoKq+OdRq+ejf+/K
ghf9W09nVmH+8ofkG60v/Dyn4/6ibmKPCcu8U+h6jb9ZoPrkr1VbNer7H9Fn
z0N5e3q+eg+J/3uxoT4rUR5SDNQ3Lv3ubY54lmZIfBRavb4B3+/FwLM9R/s4
rEL7lGGgQbYrdVsN9rc3A5v4hjWtUzC+lWVAIWrTz1JtOv/PgJfdkR8DtuJ8
uhx5/5bxWD1NlEdfBlq75L/503ru/RgYPzqsfUQIxif9GVhxKd/LuAbbk2dA
bleCSz5df6rAQHrn5OMe2ohHRQaSNq1RP32Rrv9nYHhL1sRxS9B+lBmwfDHJ
8ncW4kuFgf6Tp/eSLUQ+HcDAFPWNDsqv0J+oMqBc0cEWRKD8BzJwUH/2qXTK
r2oMXG54aryMQfmpM3Dz53OfICv8XzCIgdcHd5X630L7GsxAh16xW39qvxoM
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
LSK/bZWCK4v4GEH6f3yDq8EQev4fD1uub2G2G2F/dXiQuyGTFjQF7WckDyZL
c0ze0/rEujx8Mb/jav0D+zuKB3Xpq72b1BGfejzMnVUaPFiP5v88KOtcGN1D
z4Mfw8OlLHbhbTWP/671efA/NO1OeTfN/3m4U5iU1LYU8TWOh8NnnNIXyWA+
b8CD67awqysGoX7Gk/5+Vt0wdxnyhyEP98eeTvi5G/nOiAfGsPNogRren8CD
1cCRu9TpeI15CIwQFq6tQf8ykYfyVi2lQZ+RvybxoOZmdGDUIeSjyUT+UQvj
TMfi+1N48AtPcpjjjvtXTXhwv7lk0IholP9UHng9f6mlW1E/04g8/LkwA1r/
ajoPigPqtvrT8z5Nebii1PhzA92/acbDVbkt+o4f0D5n8HDTtWZDAq2vNZPg
pdeafKfxaE+zeOipbT8ZNBXxYc7DrdP+bsm0Ht5sHmT2G2mEfcPvAxmfFt//
Zxq2Z8HDg8vJ27tf0/yf9N/d+Mvnq/i8FbE3i6HbVXi07zk86PUzVbZlaP0/
Hh53GO/Vo/UorXn4mF/mfVoe4x0bHryYhoWT6Hq0eQRPLAyaH4TX83l4fWfx
l5pfqN8FPASfunJlPj2fZiHR9/HBCvfpeuhFPJSOk+/1kdbDWMzD1hm9z1t9
R3na8jDvT4Tq/Il0/z8PyxepJ7n7Yv5nx8OmWVFbX2jg/0p7Mh5LuUenAfMD
Bx7y8n7/s++PeHbkIfIMI/s9BflmKQ9OSceDVH6jvpYRee4ut7L8jfm2Ew8O
mSeMfGTwfMjlPEx3vfH3lyPajzN5vtRt5EaKhxU8pIz53ZWnQNf/E3mcynyi
XIb50CrCb2pB8Qcy0Z5X8zBhaGZTGD1Pew0PF0beLl1Qj/G6C9HXgaUG50/R
8/94COtzIVnaCvG9jgdd2SvSBfcxnlhP8PTs477LW9FeXHlo0A5S/3mZzv/z
0Lo+8MddB+z/Bh72Oh5b5vMH17e78xCRfmjAoF70/H8eAhSGDNflEZ8bedBX
2va43BD/D3jyMNLi6OKmYtTPJmKfRvLGUSnoT70IX6pXKaatwv9N3jxsb2jq
e3oZ4smHh1zGcs4y+v/Zl4eFNwYOyBmJ8tzMQ/bWEq21s5DP/AhfDSg2fbEC
+WQL0W/R4YzVu+n5/zwM5r0NnJbS9f88rMrV2Wrtgvn3NsIn/frPnvMT5RnA
Q9Apx9HHdqD8tvNw4kpy4BVFbC+Qh4yx15Z2fUF9Bf0fX4aWA+XHHTx0iiem
TJqL9rKT2GvlofPVNxA/u3hYtOCekiWtR7+bh65xl159pvXs9/DgPdHisoYc
4j+YB43gaWJFGP4PD+FhwZc7MvXD8fm9hF+PL05vvIrX+3iweNX0N7Qfrf9H
+hf6O8CSR32HEv1efPxR9yc+f4CHYQpQWLkX8RbGQ+qVl/k6lTiecKKfzjhI
UEN/cJCHfqMbyr38EI8RPDzpY3FX1gjxcIgH6QFuUeOuoTwP8/C+tnrH+9so
jyOkfzJbVH2XoT88ysPigPma0fH0/H8eMhcpGGVexfaO89CUeVqfX4D9jyT6
1JTbOWwc9ieKh2Qnq6IcddTPCR7OHbXo/PEO+eUkD/kBh6bvpee5nOLhm1Tb
sJpXu/67Pk3seQnE+lnjeKNJvLJDyuNxKNbjiyH4WJnypfQZ+pMzpD9+P3OH
HUa+iOWhRNVG+/EO/H4cD7Ea66UC6PxPPA/2v+2Oj/PH8Z0l/Klb78U9w/6d
40Hl0CiPaHPE93kejlQPyVtrjHydwENZrElnfBvGR4k89JXaWfDoDI4niYeK
EYq9DtP9ZReIvG2bZXob4f+/i8QeV04o8StA/3mJtB/t9KhGCfn0Mg/NyzfG
rPCl+T/hp5dz+tRR/r/Cw6N/8wzHr0d7S+FhzNyzY5Xy0J6u8iCaLHe2b8f4
8xrx5+yRs4752P51giev+Gl5Zti/VCLvsG+uFfT8zzQeKpc+LTmqSuf/edg8
tn7qXlfsTzoPBSH+k4c3oL/O4KHlXcutrME4npsETzv4x8ccsD+3eLCJb/iQ
mob6vE3suc553nAlxHsmDzN6BXzsf4XW/+Mh8aJNfkAc6i+Lh45HvUIHPEe8
MUSeIT+Sbej5JywPhza0QGgNxp8ceV4/UnGZFcYPPPFnHe4J1oOx/wLpj0nN
xtfheF8k42eSuBf2dP8/D/EfnxzT7oX9yyZ4jQLHzb2QP3N4qHaoNAxhcP/C
XRIvnDzkdH0h2l8uD0VvLryQNsXx3yP+5+n6vO3H6P5/Hk6HT1f8nYbyy+Ph
WWfTXnEJ2ucDHv4JNrkPYnG8D3mo+S21p1IN/VM+D3FvnqXKUX0UEP6t7FiR
QNcPPuJhv0EffyEa2y/k4WLvPb62vdF+i0j8kyx7LgZo/s/Dz7WuUeXxOP4n
JB6VnVo1eQLipZgHKaVRu/xo/v6UB3PDQ0fypdHeSniYVeyTJnUP9fWMh2Nr
bvm99qL1/0j8ufWK1uo1KM8XJH4tcuy3tB73s5cSf2VYkSRP4+EyHmSnDPIJ
out3y0m8ub7+5Eo39D8VPAhh7p/LK+j6fx62rTtpcZSO7yUZn4vdqJfX8f0q
Hl7m7nU0pesvq0l85LatsTwa5feK8J3huqKlKoiH1zwM1dQ49vQF4vUN0cfw
JbW6ajT/J/LVHJXKOqF83vGgM8ButxSD//dqSH5yIrvjVhCOp5bYh7VU0BO6
vuA9D1HMra5/qxDvdYTPbFobs7xR3x9IPHU7LKHIF/3FRx5W2Le2WtD9dZ94
UK3O2nWbrn+qJ/newGN1GScQX59JvDFf/sqQI+jPGwj/2TRxS+j+w0YSDx82
tOtHzz9oIvmMhpag7oz9/cKDxEjuVSr9f/mVB9ufkw+tmoP8/o3EJ7mj/1g1
ony/Ezxe+P5i5lW8bubB413z1x76P6+F5K9DLlqnvEU8/uAhff2WyTa/Ud6t
PPTx/HXsThvi7yfJBxe7OnXPQX/URvyJd+bszfQ8nHYeDm44FPZEFfn/Fw/R
TWdnnP2H+OvgYYT+nl6b6frWTpIv54+cecAf4+nfxL/u2a9zIwbx0EX6b767
wq0W+fsPiTfXXLffTPOFbhJfxcxQKfyD809/ib8Zkbqhg9ab/MfDyd6JZzP3
I//08GDZqna8ey9d/y/AvQqL6px+tP6fACvvpQzNpecN9RLgzoKzDQNrUH4y
AlxQz9zutgDX4/cW4LD2O85iL+pbVoAZ5+TGJQYhPvsI4LpXN8DkGT3/T4BY
a9MtXbZoH30FGFXSqBVA6+f2E8Bbzd9tIEvzfwE+aQZ8OrAc/YU86e/fHD3V
Inr+vwABBm/V3QHfVxTgkW/I2ioZ5A8lAWzLd1axdD+usgC/3qWc0i/FeElF
gLvDvdzN1FB/A0h7M24VFK/B//OqAjQrTE8Oj0N5DRRg9ZBxy7bGofzVBFg8
Rqtj3yX0v+oC7B6UnvGyEv3pIAH8J8unvL9B1/8LYJK3+YcXi/mFhgAHXTYW
y7Wi/Q4RYLDSKa6U1i/RJPqoa11lQNfXDRXgS75xzxnAfGWYADGvomKfBKG9
DhcgovrX+m/70B60BHiuW73zGV1vMkKAVx4XmafWKB9tAYILr2nK03hJRwDz
kCkL+8egPxkpQGPg1u7tgPLXFSB35dF07eUb/rseJcB+jSoLgxK0Fz0BuA0v
Kzvqsf3RAsQ9/ZFoXIvx6xgB3ALvaLZ4Ih70BfjqOiOihZ4HPlaACb/1TqaU
o/zHCZD4QMOo+zrav4EATyZzqXLHUX/jSX8eua6Z+Zme/0/0KW3w52sp5i9G
ApxReBdyxZTO/wuwdF/IPXkLxI+xAGsSL5/5LIXtTxTA8sOUqLYglMckAWzU
nvZjH6P9TxZg+4xbCderkZ+mCPCA37fF7Tr210QAmbY3Waq7cb3PVAEqlVeM
fdGE+psmgIJSuvP5aNT3dAFeDmpuNP5K5/8JnnoPUoywRbyYCWA8fUaK/m60
7xkCfJvarOdI63nMFCAkZ08f9+Nor7MEGBo/MeUYPW/ZXIAiva0qjAf2dzax
p/MLWm8MxPaA2K939nmbe/h/ykKAiYMMN3hfRPu0FGDfuTO2Q0egvqwE2Jy0
9M2cgXT9vwD8ujNp89sQb3MFKKm6eyQgBu3Bmjy/MyK95yV+34bgb5HziQGl
KO95Asx+/W5UHa2HOZ/Y9yTHEr+zdP5fgNStzw9WWGH/Fgqg4zpprAPNlxcJ
ENYVKDO7Fe8vJvxjEbs8fhd+35bIWzs7qlca9neJAE3mvmY+ZcjfdgL8Kynd
46WL+rAn8izRaGqUwfE7CFBt6HlAJRX9lyPhh1HHvmbLoz0tFcAqW83CPwz5
dpkAtWsGe+7fhuNzEuBt+IHOS7T+x3IBer6ZKzpsx/jMmeBtqNlr+wya/5P+
5kzPX1yE+l9J8Ju8IOYWPb9vlQAWsycVrDVAPK0WYFfRNleZFTi+NYSvGzO8
NOn5Qi4CnFPzWaURhnhYK8C0sWXyhvOwP+sE2HYg0e/rRuSP9QLUs313rnuK
/49ciX0vSFDeGkj3/wvwumi/VjSH728QwCB365TA3ShPd8K39i/vV09D/vMg
eHi5xzePzndtJHjTj4rvTevBewqwMO6SmWcqzhdvEsC0Z3f75Uhsz0uAP6We
h4VGlLe3ADV993vPTaP7/wUY+2Tzkc9ncby+AjC/N18O3oL/WzYTPgswqDpK
z+f1E6B0ePtO+xSU9xYBPMbLp5/KQXz7C3ArUa3g6i2U11by/Q+LL/8ajP55
mwBbs4oDXmdhPBVA+F26LKg8Gf3LdgEyf2tmv7yJ8VGgAAdWus/3oOvrgoj9
2ejWSV1Deewg9vpy4fVp33F+YCd53xfG6M9EPthF/EXVj7/3StA/7RZA7dKh
qJLZ+D9+jwBX1vAPX+5B/AUL0Ce5trlnP+ozRIDjpyLW9qrF84L2CvDR/mRB
QifuB9xH/I3H2JzBdP3IfgGmH56XaMZj/BwqgFncUOOY6Ti+A8RfO/zw63sQ
7T1MAC+V2bMXeON4wwUwrM7UHrKazv+T+9eXVUpl4/gjiH9wVf/hQs/jOkT4
O7IlJ2kgXh8m/BZxS3OUNcrniAAZU/qNcbRB/j1K/Ju8cezbLrr+X4CjC667
/5VF+z1O/JXe9MyMD2g/kQI8rlsg63Eb8RolQJ2FOTc5B8dzgvDd3nMlwVJo
3ycFuKR39aGvH8rzlABbfuRUV+/D/z+nBeg77bSSjAPqJ1qA/HyX8oJ8lFeM
AAlXvqpEfcf3zxD5KxhKmun/7VgBkjrDlrbT/a5xAmQVvV1u+AXjxXgBjsgH
Hk27jvo4S/jXyeT1oyTki3MCDDyzYtghDv8nnxdgXddeq3NnkK8SBDiv4/nM
2BT9X6IAWivdXFtpvdkkgv9ZHqey6Hm6F8h4sor/ze7C81cuEv8G5baD6f/M
SwQv8RlJdt7IP5cFmKWX4T6sBq+TifzHjf06OBT/B14RINTUWGl/Bs3/BQiS
Hjg3ZyvK4yrpf5Bc4vnBqO9rAsxfeWbhO3oe6XUBynd41PexRfmmCtDZj9d6
/QvzxzQB5M686erUx+sbhD9vtvZvb8T+pBP+nKdgGT0J8Z1B+Gzi4Uubw3E8
NwUoyB13oUAO5+9uCbDCXXlGRhvd/y+AtFnOv1gr9KeZpL2DXXkGXYivOwK8
O3jZ5twbxFeWAJNXuE8qoOvVGcIn7xdZ5v/BeJsVoH/vx7+8JuPzHPHntrPW
H1dF++GJfDfWjfmWh+MVBDiWp2fVLxvng0UBrJd8LInbg/wuIfreFRQRdwr5
IFuAqogzJS+/TP/vOkcAbVk5cdApev4/0S/I5dr4Yf9yBVh19K3eNgHv3yN4
2TLhiFYw2tN9AUba1+4oXYn6yhPA7/Ve27cbkG8eEPtm/tmV0/qyD0n8dGjP
rNWPcH4sn8Qbuiv2P2vB/hYQvrPMans8CMf3iOgve0h6SxjaS6EA484f7y3j
ifxdRPyVp3vZ2+nozx8Tf3Mp+b08nZ9+IsAmX9UbQ7OQ/4sFGJSg1DaLrkd7
Svj28cuz7AvEUwnhjyU6FX3K8PlnxF9E5w+MHYH+7Dnx7woqM+PqUB4vBLg6
rs6lqg/Gb6Xk+do5Zc4c2kuZAMXXxbEXR6D9lZP49ezxSvsaxHsFsZ9Uq7If
1egfKkl8oxy3zyWK1v8ToP2OvX53Isq3SgBHZ8PHnn+R/6sFUA9/995kGfLp
KwE8XT/M9DyL/XtN5LV9WkDiGTwf640A3Q/lDR7R/btvCV8X9za8O5We/y+A
rGvPuImnAv+7rhEAai6P0AtE/qsl/HTlZvEQuh/7PcH/t+bNln/o/D/p/3HP
5Jv0/LYPArCDzjp83oJ4+UjyofYPDjmtKM9PJD8ZUfDxUy6t/yfAnnFPnOKk
0F4/E33mdXz/XEvn/4k/E+9UVQ1CeTQSvmocUV9D9983CaBavrr35XR6/r8A
vgfGjVd+inz6lfjn308Gj2zH/1vfSH65zfPETU30P99J/hR2svTDYrS3ZuJf
e6vW/qb1BFqIf9g89938T4jnH4R/+/2VMl9M5//JeNYnqa+tQf79SfCyrsMs
1we/3ybAsKsTWxd2Iz7bBZgX4Xl7l0DX/xN+8C4N6exF83+C7+CQaXwDyrdT
gKhPN/SdGdTvbwHK/q0NbYzH/8ldAqSoW1cZhqG9/yH265+2cXA+jqeb2GfC
k7k3KD7+CtBi0dL3gB/y4T8Sj/UO/2qUivrpIfnUGNsb/Seh/5ESYce/oK7s
D8hv0iIsnudxt5TGP71EONdWvbbRF/2LjAi7u9b6uO5Ae+stgvfRfN3LH9Ff
yYqgOTw3xY7WS+sjglJb4F0Pup9DToSvnXq75xehfPuKsLRIPfjTdjxPo58I
ftHtLj2KaG/9RTh2tXaYbCe+Ly9CoW/OtsdqKE8FEYaumr57+UHEj6IIK+3Y
MUva8X0lEQYtefLp3k7Md5RFcFuw6bUM3b+gIoJHufxwk0O4vmWACA9kesvX
0fWRqiL07Ji2a2kSPf9PBAWT+KrEWuQTNRH2GD2LrTqL9qcuwsL4BmZmI+Jh
kAjv8nuGnaL16QaL8Hv4ermmSownNEQY9nqFVD2tZz5EhNoevcGtssinmiJ8
/ttfuiQN9TVUhPlTNM1t4hE/w0Q4E1y9Y+wP1M9wEbqs9m0wDcX9L1oiPGpw
t2H20P3/IrS4+jNruhE/2iK4ZPAM7EJ71hGh8qZUssFplPdIEcYtMpf0TKLr
/0VQG9ixMm4S4n+UCPrBUXeebsHv65H+tMaJHvT8udEizPG5HhXfg3gYQ/Sr
5lx/MwLjHX0RUubuMtUagnw3VoTlhn6GeXW0/h+R77vwrcIifN9AhNF9oSZV
Hv3JeBE+NA155hyC8++GIkh6r86P6MDxGIlQfXeNmFeE8p8ggsm5f4p2tD6B
sQg3k59onXDEeGmiCCdCDLcdp+uPJ4lQtClh9DM9HO9kEYr71l0MPY7xxRQR
koevndvzCcdjIkLNcauly2f7/Hc9VQTn08/GtySgPKeJMNZn+Im/HijP6SJo
RGWbRtP/M6YicLnx29Y3Ip7MREjvfhkwdw1d/0/wGO+74/MvzI9mivD0qJOZ
Zyk9/1+EZgPbR/voflRzESweFdXM+4x8OFsE3V5bAsuaUP8gglnbD91WWk/W
QgTfRfMyap3xfCpLou83vba5z0B+sBLh47DuDH1a33KOCLN7pV912I36nkvu
95nEls3BfN9aBOZCRqfjArr/X4QjcdWrLkyi+/9F+CWsC9xxFeUzn+D3WfvM
HBVa/0+E8IXrUhma7y8UYYo5/DLKQTwsIvb4uq5LhdZzWkzkaVofWPCE1v8T
wcB9w4NRLOpzCeGvu4vPuc3C5+0IPzT0l7tA8w97EbQ7Hq8zlcJrB/L9oPW7
22m9GkfS/zRpi5YgbH+pCKc1zo+PvIv6WiZCSOjWr/PscP2RE7EPlftx2fR8
yOUizMh9VR/+DuXpLMLBRYXbehKRr1cQe+yZbcwH0/p/BP+/LyqbeWF/V4mg
UlGY8XAj6nM10de2pCOZK2n+L8Kpi7qviq4in7iIkBqXIl6rRn2vJfznmCWs
AIxP14nw6dpohwtTMP5dT/h/qemN2yqIb1fSn5Epx+Poekw3Yr9c/uro3piP
bRBBDFY7GPgWzwd3F6Fsw5Dy65H4v89DhEY/28Zaer70RhEGnNqz8KIf2qun
CNek2t03rcP+bRKhoD5Pd9lNmv+L4P/aZarmVPyf4C1Cxxkbg9Pv8XkfEZ6f
k93d15TW/xNhtf/C5Tn/UD+bRdgfEOt36C7iy08EK133frI1dP5fBNXaNUbr
I5H//Yk9fD7WV34Hrk/aSvBlrsfHyWE+vU2E61X2ASnRtP4fwUPhNcvqRGx/
uwjZBi/6bw7A84YCRQg2flh/cAXKL0iEfLf6gsvqaB87RAj7dN1jhBvia6cI
9hv85J8vwHhrlwjSw7/Xzaf/U3eLcNTLvHhVGeJnjwgrricb9KlGeQWLsGbt
wqzwxbT+H+HXWVpx+WvQn+0l43PbMkfrJfLdPhHUz5qH3fiO8tpP3l+cm3Zh
EvrLUBHMX22fm1eH9nNAhNgZ/nVbJuPzYSIkXHQ4oTcH9RtO5BXdf61EGft7
UIQbM3Uaa+xRfhFEHj+mthlvwfj0ELFHX8vThgfp/L8Ib4v9+GO5aO9HROD7
T2tpjUH7OSpCZvHkjxkT8f1jIhw+ZKOgqIB4PC5C2vSPb9Wr8P9wJPFn/Y61
zt6P801RIvhc29haUYn9P0H8h3n5/u61qL+TxF8n3VnUSOsZnxJhmeIo7SUP
0T5Oi7DEulflc1o/LJr416uBef50/i2G+KdITUdnur7qjAijWImRD/3/EyuC
9a2XodPmo7ziCD/3DGQGW6C9x5P2Iwbq5tH9QGeJf2rXvuqlhPI5J8LekozT
0wdif8+TeGXycOPx7mgPCcT/bQvxfN6C+koUYUGXQqTzNNR/kghvWqO3lFjR
8/8Jv/89ftmZnq93keDtoHlSGl2PeongW6kzL/4L5huXifz3XB428jrm+8kE
X6+feJ7Mx3jmConnTM9lB9tifJRC7O3CcYXQk2gvV0V43bbpa70+yueaCPKb
HMOXfaH7/8nzVzbUxiTheFNFyPUZIhvbhs+niXB5gfyPclq/5wbxP0H3u2I9
UJ7phP9qXmufeIN4yxDBdHr7IMclmE/fJPqOnrOhjxqev3qLvK9Zxa6i699u
k3iw+9p2jXfY30zib14Uw19F/P4d0n7GLrkdcRjvZJH2/6y+33aN5v8iRAZ8
dPk5iO7/J/y+4+2kGi2MRzgRFjn1OdC7BuN1nuD37lWPzQGoP4HwqfV8qTsP
kR9EEUrvq/aVmOF4JCL87FdTn3gDr7OJvkPdJw5sxu/niCAXXyCZ9QTt/64I
8545rOzDIf5ySfwYvd3P4Rc9/5/oL/HY5VdWdP2/CCN1169rNER95JH7qrYL
hrWgvh+IYHhmVsD1QuSrh6T9OTHGCo/Q3+WLcF75dOxXOex/AcHLP9+GaG8c
/yMRAi9oRS93QfkWihDwyW16B11PVCTC41Exhcvp//bHhO/ZbMst5SivJyL8
HT1XLkwf+bFYhPL1dfNiy/D9pyL8eF2adNgI/U8Jad87r8PrHuLpmQjH50Ws
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
1Bm/zIpzE/4PTNVk/w==
        "]]}, {}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 10000.}, {0, 0.22082256867971947`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic},
    ImageCache->GraphicsData["CompressedBitmap", "\<\
eJyFvWd0ltl25ykDle/1DXVjX7t9xx63u93uWV4ee6Zn1qz2eK2Z7vkw/WHa
4xsqU5HKBCEJhIQEiAwiFLkoKKDIFBQ5BwlEUCDnKJKEhHJCSGjP/u1z9qNX
da8971og6XmfcM7e//Pf4exznv86MH3QOx8PTH//rYG//C9DBw4e9P5bw375
nz8dqof6/0FaWtpW/ffhL9P4XfTX+N9W0Y9++ft+/IX9+L50dbTIlUvn5dy5
c3L69Gk5deqUXLlRybfS0VQjJ0qK5UTFWWnrfCLh0y3XL56S4uIjcvNebT+7
zQBpa6yW40eKpfTkOWl/3POcHX5WpOeJ3L15TRraOsPFPV1y5VyFFB8ukcrq
+nD1c9JSd0+OHi6WstMX5FF3fE7PY7l8plxPPSp3HjRwM3uSiB4/WyGHD2sD
7tf6LRqqK6WkuEhOnb8iXT3e1Edy4WSpHC45JlX1LWne2LqqW3KEcy9c49xn
4y3u37wqh4uLpfz0Rens9ka0ydnyY3Lk6AmpaWxL88fV3L0mh4uK5Oylm+KC
edLZJmfKOLdUHja1pz0dhdD88L7cul8rkrSqRU6dOColx8qkrvnRADutv1Td
umy3vHDtdtLSro4mOXmiREqOl0tDa2e/eOr9m5ekuKhYLl2/G0+N+vyptNdc
lfRBb8igjz6VCRMnSF5ujsxfuVFam2tlxphsGTNhsuSOyJAZS76Wbm35yf0b
ZMjg4VI4Y4oMHTpSTt+ul+6WapkyeoSMnTRFcrKGy+xl30jXE4kq+JH+1ylz
84bLket11qGSbStl6JAMmV44WYam58ql6lZ5XH9bCkZmyPgpU2Xk8HRZuHa3
9PT0yOHNy/U5mTJ92kRJz8iTy9XNQU4/MbDsWbNQhmdkS+H0yZKePkJO33oo
rdVXZPTwYTK5cLpkDBkiX20vsXN3rJwvwzNHyZTJ4yRz1AS529wlzXcvSE76
UD23UIbruat3HX8m3v7i8d0ybEi6zJg1S0ZnDpOZ2qvOx49l05JZkjEiVyZN
GCMj86dLTXu3PLx+UkYMGSpTZxbKsE+HyKaiM6rfLlm3qFCysvNk4vg8GTVu
ptS0dT0VEVG65QuZ+PnmiPJ2WTl3iozIyZcJY3Nl9MQ5UtfRHXX1fbl97ohk
DB4q02ZOl6GfDpXdZVcVFh3y5awJkj16rBTk58iYqQul5XGPVJ4pkvTBQ2S6
njvk02Gy7+S1P+ircm2ZFG1eJh8OzpLSi/dCC/TfuaItMjJvmrTqHx0PLsjw
YSPkUuVtKczJlG3Hr9l5G7+YrurdKmeKt8qosTOlXY+13jsrw4ZmydUHrWlP
+TOePJaSXdtk7br1smbVChn+yUcybdFXcv3uHZmUlS77z4Tnrpo3URau2ytl
e9ZL3qQF0qXH6m+UGixu3rst4zPS5dCFB9bm5bMLZMGaPXGc/FTaaq9K5uBP
pPxmgNU3i6bK/LXbZM/axTJp7mo7du/sARmWWSC3796Q3GHpUlHZZHCcMyFH
vj5QJntXLZApC9fbuZUVe2RoVoHUP3rS2w89d96UPFm2+aid03RP8ZKZJeXn
z0jOsEy5UN2hwmuVafkjZcfRs7Lli5kya9k2O/dSyTeSlVcot29dkJHDsuTK
QyW17iaZlJsl20ouxGf8Qsq2LZWpS8I1tQqkrGEj5WaDEsrjOhmXnSF7Sq8m
VLq8cKwsWn/Q/irbvUpyJy2UW5crJGt4jtxpeYLiJH9EppScuyYrCsfJks1H
7Nxj25ZJzsQFaX+g/VEo/NtkCHXJ/i0r5KP3h8qB8ot26t6vP5dZS3fGRz6S
+QU5svPwIcnNnSCVde129HLJdpn22QLZtG6JzF2xN3Jfu3yWP0KKL1eFnv3M
CHX+6HTJ0Eu/+eZr1dbHMnPJOrl8qVxGjJoo1S1dduWZ/V/LzIVLZP1XC+SL
9YfD3TobZUZetuw7dkiycybLw/bAmxW718jUBcthUVdS3a3j8unQYSq0YDUO
rVuoSlgti+fPkA17T9uxrtYHMnl0jhw6uley82ZJc3iyHFq7SD5f87Usmlso
3xw8b8c6G+/L+OwRcvlhewoQHstiFejClXuNwO+ePyKjRuZKcckuHdnzVE7h
s2vZbPly4xaZo/y4Ow6a1gfXZUJevhws2i654xfpncJn2+LpsnTLofiMH/YB
wuXSbaqwJYmx2Dh/sqzYFUAoXY0yedxYOXL2rv1Zd+uMTCiYIHv3bZKx01YE
1nhG1s2ZKOt37ZYpEybKiUvVdmrN1XIZO6ZAcVDbqTj4Szv1R3LqwDfy8Qef
SNnle3Jwy1KZvWRP1OljWToxV7YW7ZfRoyfLnYdtdvjGsV2q/3nytep//ooD
4dwnj+TzghGy/8JdH6F3Lh6VnGyFTW2TLB6fLccqm6Wr/rJkjJwsNc1BDBcP
fiMzFiyWtV8tlCXrQwd71OLNG5ctO44ckFG506S+LZjXs3vXy5T5S3UcSKKY
htvl8uH770hB4QLZvuVrGfzJJ7L76ClZtnCGbNx7Nir/oRTmj5J9R3ar8udI
a9TA8Q2LZcGqdbJw7gzZcvCCHXvcpMYsJ0vOP2hLc0tz/+IJGTZokOSOGSMf
vzdIVnxzWO5cLpaRYxZIZ3QeDn01V5Zs2KSKnyZ7j123Y+01t2TqmDzZe2ib
5I3/QiLmZO/SmfL5N/td7yd3LOuj99wJXyZ636GktnR7GBLS3SCTCwrkaCTP
xsrzMnl8gezau1HGTVvpet88f5Ks2rFDpkycLGUXg97rrp+SgrFjVe9VHSmm
oKerQ65evpp4a9tXfiYT5q6Uvdu+kunROIm0ySwdiLuPHZa8nLFytabVjl4o
2iyTZy+QLV9/KbOXbosYaJHCURlSdLkqze3owY1faOtmybS8LPMAuhquSVbW
GLnTFLRQsWuNFC5YIl+vXiQLVu+PAKiTKToC95cekezsAqlqDQA4oe2aPL/P
4G+oLJPhesqOndtk7tx5sqe4XJ0PZcp5U2XVzrKg/+Z76lyMlOLSg8olU6Qh
6n/vV/Nk4ZqNsmReoazbd8qOPWq4LflZmXK5rj3R/5XDahkVxxVnzsmquVNl
2udb5c6VEsnKnWHWks/WxYXy5aZtMn/mFNl6JFBpS9VlGZuTJ0UluyVn7GfS
HgW6cf4UWbLlYH+7/R9L3b0rsnHTTtm5Zq5MW7rdTrlaAa/Ml+gHy9rZ43X8
l0QpN8u0cfly4FTwu2uv66DOHy8HDm2V/EmfJzD7qrBA1u/dK9MnFMiR84Er
qi8fl9G545wAEiCorRk7/FO1iaflSU+3bFk5W8bOXiYXKw5Kelae3G1ql/sX
itUuj5bKmlqZOzZLvtx+TB6rD7u4MF8WbSiWq+V7JX3EWKlq6ZDbaneHpOfJ
nYaOCIQf69BqkUWTsuW1t9+TYzceKpybVcnDZM2BU9KpYcXcSTmyYnupnD+y
RYbnTpL69kdytXSHDM2cINV1NTJ55DDZUHxOz22SWcomy7eeSHyBrrZamTAi
XbYevcw4kTWL58gutcdHt62QkRPmSMujTjl9YJ3ed6bU1t2X/OGDZffJG9LR
qtepf7Pj+BU58s0SGTVlgbTpueV7Vsnw0bOkpasnQcGRdfMlc8LnsI+U6ZAd
PmahNNRWSvbQIVKsflRb413JU1f54Olbsnf1PMmf9aW0d3ZK8eYvJHviYqmp
viEj9NyjV6qlta5ScjMz5MDJW46CdrU686aNk7feeF2mL99t2mpQ9zRD/cqy
mw+lpeaaesYZcvjcvajfHlmvQ33S5+vl0eNO2bV6joyduVqqb5+XjKHpcvpO
vTRXXZKs9Cw5eaNKz52o6NqkPmynbF0+U8bOWq0o6O7rGfbIqaJtMmJ4puTl
jZYRauBOnL+jgGuXNTqeMnUMZaj3s2rHMfMYb50uVm8oXXJysmVUwSy5Xadm
sLtFvvpskmSNzFZvO0vW7i7l3CQYaLx/SUZmDpEjV2usE1dK1SCrlzdq1EgZ
PWm+oqdLh3+9LJk+Tl3nUXqPEbLp0Bk795KanZHx3Hz1dx+0dDm4LuttckZm
qbnJlpG5BXL5XpM8aXsg8yaOlpGjRkl6ZrbsLQuOVMXeryUrI0OZJUvGz14u
jcrhnY335LPxufHcHDlQcT1hsKaqazJdXexRubmSkTFK9hy/ZKI6um2VZOp9
RupzpyxYK5BUW+1NNTXZSjN6nxGjpQTx6bmHv1mh52bKCHXOpn++QVq7ekIg
97zSU4ds1EBh2pLtUa/dcmDDkuT0WUs3S0e3eDDQcOeSTFIDNUqfMDx7nFRc
qzHI71mzyJSTpeQ1d8V2IjCpqzwn40dl2rkZOePlzM3aGAz8O/vRXxprq+Xa
tetSlwSr/YlM1Wm9IXeqatL6x2NNdQ/k+o2b0tLxODmvp1vPu3lD7lbXpr1g
x57RAfFAWh85AymCa6v0ulscS657oh2+deOG3HtQl9y/vobzKtUSdac95217
+ECuXb0hTa2Pkmu7HrXKzRvXpfphY3JtbdVduXHrtjzq7knOe6yEcvO6nlfX
lNyvs61JbnCstvfaB/fvyI3KO/JY41W/trO92c6raWhOzqvWYORm5V3RCCsJ
1J88blcyaZLeT49U3a2Um7fvkSfwQL2jpUGu6+3qmtqSQJ145v6dSrl15z5D
0J/c3lyvp96Q+uZ2D9Rj/uUn8YyGhgZpaWmxvxb1/erkyZP2nJSvXrQfT0lj
Y6OcOHFCysrKZP26dbJlyxY9qn/1k9LS0n/2Nz2nvLxcyvWq0tIymTRvgxwq
Pqot47vn5fjxEzJx7nopOnzUvp88/2s5WFwikxd8bTkUrtPrw+kD7FY0oKLc
/vXT/8pVlidKS6VgznoZM3OtHD12wk7Tb/qnNKDC/pXZT/07rX+8I397tyr8
Qc/bJUePHdf2rJfiI8eUiNdKzvTVMkGfUnTkqEyav0EvK7Xr037ep100e7J+
TXe4O3/nFq7WBq5T973ERMD5h4+E45PmfW3XIQK6XVZqXZYDeu4U/fvAIRNH
FNkfJs/iH+dMXRjut+/QEf39a3vmfvt9o/Usnh9k9V3ZeyB8Va6PLA+dln0H
NRLR3tHDwsWbkkdweVNTU9p3+kKhra1Nrl69qoP+mgwfO1+KighA9C+V6uHD
h+1SRZFKl2NP6fdFdkvOB13X9Wg/+26AHDp0SE5WVNhg0e/6x0s2bvxaSkqO
2Ok3dZxfv+6X/K1eclDOnjnNMbl85ap8Mn6tHK84Jx+MXSOvDp0lpWUV8lHB
Gjl55oJc0WZ+MGa1fn9eBmXPk18NWSC/Gb5Ufqv/fjN8ibyc+aW8lPGlvJO3
WhYs/lJeTp8vZ89fsqaev3hZBo5aLr9KXyovDZ4hvx66UN7IXi7nLoTvz164
LB8WrJXNW7ZLWcVpff5quaDXcP1rI5bLr9O/lFcGT5d3c5dZWwaOWmHP+nX6
EvlkwnqZNnOe/OOn8/rJb9KXpP0v8qthX8igMavkxMnz8trQQvnNsM+teTSV
797LXyU3lLb27Nktly9fklNnL9p3H45bLRWn9ZqRy+WlT6fJr4ctlk8n6EAo
OysfqxiualNvKcVy7fJlS/Xai3LkxGn7DqkfKz8rv9VmvfTJNBkycY0c0+te
0ucipn/S52ZN3yiLl6/T79bqdWes+RwfPnWDHNa/MwsW2v3+cchiyZqmais9
o/dbamIbkTfVRAVaFDUOJKeb3Blr5datmwmh8f/cr0/Lg4YOmac/q+vbn46n
zl53UmqbLEROGJBjoxYcltGLSqSx9bEfHj9/q2TO3CmjPz8qTe2PA/3+XM8+
JS3twaxMW1Uub4zbKTkLj8i5m3XyyfQDkjmnWN4sUO9g3mHJX3xMrt5plMdK
rMNmKUKv1MoHU/ba96euPZQhMw/KqasP5ePCg/LxuFXyTsEW6XjspuO/l3sa
5F7R6z8pPCCXKxvkXm0Iernf1JVlcrOq2X4fu+SY3nef/c6H8y7p+W+N3y2v
jtkh45Yek1tVLXZsoLZ3yKwi2X2gRAZN3CE37jfLHQ2kzt2ok/TZh6RT7cVd
vf6cBkivj90hH03dZ8+5/7AtNOvfS3NHl3Vv8IwDdhnCe00f83KeusjaJY5l
zS02UdS3dEqeSjB7QYlS1wZr3hP1ws5ef2gCHzGvWF4evU0y9NxTV2tNGccv
PNBri+T4+WqVfok1h3MRx29yt9o1p1V8GZ8VydsTdtuzfpu7TcapGG5Vt8iI
+cVSfKZK2XZd2vf6QuVA0dHEMoXuPC0z15TJnQctcq+mRV3SbpWe/Qxh3V9J
4WolyYtVMvWrE1L1sFVmrS1TW94qw2cfkF9nb5byS9XS1f1Enmi3pq0sVSXX
yJAZ++0aPz5djz+ob7Pj6bMOqPSK5NX8baqM7VJxudruffHWQ7l+r1E+mKxK
y9smFZceyPRVpVLb2K7POojvIfdrW/WcBpmy4oSc18ClYOlReX3MNpX8Nv25
XbLmHOrHzdP+H8VksYxSQQwct0OPHJIJXx5TY95hl566+kAKV5XJQ731WwU7
5P1Ju9Un6JCxX2iQq9eM19vevN+oUmmW2/qv/VG3KuCwfDh1j+KiVnI/P2L3
zVlQLLkLD8uIOYesa7UN7TJDxdWjCr6ggcJbes60lSekseWRtWXS8uMmklNX
Hsib+t2UFce1m9XyhjYdcXB+xmcH5ZNpe03EVSh81GYZXLjPxg5t5vOgrk1e
yt0iL+s/RPX2+J0KmEMycKyJwP7m51sFO61dtP1WVZPi+4C18db9JgXqAetb
yZm78mt9Buc8Vk+V76/dbZBRCw/3Bc8zZuMOHjyY+FgztavHz93XmKc7BhU/
VrSUKiKqTOv3FS3c8r4Cip90qbK6yURS0xCG8p2aZhMLauAYCBo595CcUV96
wrJjaFWBqp3VeyOi1/QfogQt3fqMQkUIvwPerq5u+VhVNEy7NlCH7ihVT3tn
V6SEFlPL9buN8t7E3Saay5V1em8VTNrfKTXUmUoQ4dU7DXLldp28O2Gn3Qt4
1Cs8BunPYYreDybvMfShetTwjp53WoOo/MVHtC/HpEHVPVlVy8gYNnO/Darb
1c1yUSEBSlHpe5N2GbyAA1ABrqjw46l7TS019e3yqaq94nKAKqOHZ4e/S+0n
I+mk/vxtzhb7nU93d49C5YFCYIf2TY8Gv9lGjspOj/H/Tww2L4/e2ven9uW3
+g8Icl9GH/3Knl9kEKR/VapDIE7bGaFZqqsR+g+W0Db2QczTiffjH5DQ3f0k
hAEvmFKmKhiqFeefrauQTH0wyoUe6ls67BI6pudFtnrF8PyKNhawcD1jEnoA
QIwrGmodgl4UBGd1vAJGwPRq3lZrLOOWhr+hyvYx9IpeQ8f5Hg7IW3TExu1H
en8UjFLhkDGLS6Sjs9sEekPpatySErvX+0pbp5T6AAn3v6H8UaljDsrkc7my
3tr40ZQ9xjVQ33sTd0mbGhMH59XbgdoalerydDzST54P2PKUc0bMLTIZcQ/y
iRmfHZIG5TTkRV9on4MKwNQ1dhioM40LdshwvRZAw2FZcw4asGgfXAA/cJzB
h4wjCAYYXr5nYkLMd3WclV6ossfZ5YqHu/rIfxr5jYmBccvljCPEkDH7YBy/
/W3sLthoyT11wPvYJfdrA2zCMWB2V+mh1635E2vtpGXHTZMvj95iRmbIjH3a
g/1mKGBGMzoqToagIUCb1N0d0qpQ0ocqPYxGrSIII+ZoQUJYhGlqjM7dqFWq
arahz/B6OXdrWhDFv7XzGfaw9qVbdUYx3BMUQTkMGRi8pa3TKGqsIiS5BoYG
eTC+9gHNjdThheYamh8ZurjPB3q/tkePbcDQZ9DRocE8NIHRM03ptdwXsXK/
gqUlILIfsEv7hbJtm4H2bWW6sV+UKAM1GZDoOgxMV0ctKFJxHrPRDtvQZRia
22OzT5y/b4CDXWFMG+nKCuUqdhCByBRcUTQvWtPp4rwNJ63pDCqQAIPAXnT5
HTVOqAswHz17z8B5RI0Q54CsX6lPkftt4xMQ4p5LcE3+syEEBECwgJFxNHNN
uT3aDRRECYoij5jUsHeAuU7HDt3kd8SCFGvU/uGOMFY4FzsPOjK0mWowzGAN
VsQhSjV8BnbGIJ9Pp+81xJ25VisfKwJeicT6lnYZA4MYGWeoA57DznIMl4bx
PUj5oKX9sWmbNjPYaPM1NVqIH/GhbUcTP7HbZ/V52Hw4qKOzy111wHdB3fK3
0ZJSBRr7SO0Lp6M5boXrMuWrQDncKn3WQTvOo6Z9Vaoo6TANvqbiQYTcA1FB
D28WYGNUb6p//kbz/NR790PF6jLcigzIuOS2tHpYMFvRFD1rvQBYmEskZuZN
f6cJen4/Tkh73vABHo3IVGF02H/yVCxX/udHvgUbMiEaWKfA5ufmhyAbPlXR
RwHluEWIfvisQJPQNBAYqipmRPC0cqVdzgfBEAODneOokY4BLZVR7Nx/UwoP
gxzXE5cMWobA6EWdjkAqK1AzelGuNFmbS6fqPq8kNF5DF4TDPUz1uUHlQA9S
w9xgJvBF8FEghxHzwvkjItG8lr9Vz9tlfcDkIFieQZ/xRzgH1xDyYSi1dTzW
+xWbeYGIMHNXbtfLu3otGPhEYQ7Eac/H5qq26T1Q7lbDBvfmO+RB28x91WH4
xtgwlJAb8nMlOwFznOGEr3RefSI0Tj9UF0GcPzTxMNLL1MWEOE4oYdDU+w8D
2fBY4hluDda4BS5q3ufBAx4xj7DqfsDUAGsp3hhPUce3D3YGWFqotLTUcKJq
CvD5e8u3o7Zgn1qM8yFN2AZREtAAkazYPuwJLILqcalezw8kyd88+I7eAwDT
fkQEpFAH3gx2BPFxPerCm4GogSfmFYhyHJYbpqK7qPaINsEwiJX2cIy+hyji
gUxUwm9W24SYcYWxo9wPYSCzVyK7AJXzGqbCKjzjDXPF0cOfJnYnQDIwEc9k
nPMc2g5cJqpdo42QPtAdGCkCmPC7G4VPp++zvr0Z2faVCNE3Y0T0usF4m32X
HMvfFprzR8lhxMlopAtGkjmb7VSaw2MQOybfOYSfPBpbBP04fPhd2c3Qzjmg
MvDNAZ4VHtvfWjgwmLu0b3m+p09VyEfjVlsqYvbacrO+QnpZkZP2D4Ydbg6G
6dsQo5iHhhtwgQXDa8USocNM9dbwY9wFg7YILRhWk2MwPF5lTWNxwZArOqUT
kZKDNcoPwxOaf1u9WvNzFBtEvNxjsoZiF9Vk4DvVNbUbLSFI9EUb8F0QNHRD
2JKvlJExJ1C/BeJm8bYG7Oj9oB0XOj4SbYsUFJ2G75quLaS6WWu+EPIg1CAM
gnZoPzQDfWHKlGYiDr+X4JDxAX06ls5EE8f3ga5qEvqJFlTNAff4ufwm0hFj
w7xewicDyIEEc5AE45lx9koMmfDgZ0SwDLQ+Hkys87fCq9jX/kZxyO53XODv
WTb51RHLFAoBr50azTrNAI+T0ZHBwaer+EpEy/eT4OhP7G+aRw6GcxnqiJ/r
wThUAB0x1IgUPYLEHwQKiI4unNHvgSD3wPq5S8t3iCjLYLvNIMbQVlda26AD
X3vD8zgPNb4Uh/xVVaMFOdpMEisandp4AiLvmwULVEV7oBvaN7hwv1mBXLV2
OtSDBL9jt+V0YqBH6nmDEDSNpGmWM2nUSD8uCJp+LkHLm4qEiWqEeQz+mrOr
Nl39Ec59JvFKqtSy0Nzhhq6gzX6xLbAkLHxPY0F+dxrhPNR24sJ9aw+BsrY5
NOOphMzcIVKvpS99/L1NIWzastPGursq+EUoizvCsfDELPV2iTqJd2gtY5nz
cEcIzdK11emK7azIM7QseJHq6er1uEKMffhiYORVxhk8wPgeotdii/BW6zU+
gXNwJfFcAcgHU0J85LjnZ1b0lBnTHEN6gMvirrHbTJK4MAQguBwAhmdzHA0E
6T4deCc/uDZEz9h5dWX6R2UG2thtmCZAB4801bEZsh16E/cdXtJ2Oo8Eb3pb
EjvxE9TwPbLDW+dGPAT+QA+AVVH1TGyemyfGDDR+WsfswDHbQ/NeSEwSQ89i
AMVocIiCGYJx4rEQGivyaAnWlCgPR9Ml+tLvcW3/XooOHzMzM2fDKeNKMEBW
BLtBBgPfA/thrpgOVJDM98TH6JnMAqinX5AKA/2l6N7jeoKfcUuOGoZej61w
OZExYABXqx2i86Ce64mOwOEpxSlpPVxSBrX7Zm9E9xbJ1Cr+EN4rkUvR/yD1
R8AKbi1+CTjHFYY08LFIyb2S2I7vG5aRJDaFWHxQdG9fiz4EfSQvwPdIk/v2
2qBtT8XbQBY0k66/YiZjnzXD3JFo5DF/qV2JsS/Hno2QMP3p13hoxJGM3DNX
a56Oxso6nzJQUp0avyvqx6H0YAgh66BLc5cjQuF3DcgfJTkU+kuGisgWvfLB
MUKG2foTVsJ/IOeAjUOHOQsOJ34cx8iYI09+RyhggUzd64ZQI+vQoj9J+B4y
BS4+lPkJ4LkNSTJkSMoFyiFpFyKchzbkkDEDBQG+M2GXZWBxWaEM1OvPoInY
h4cKK3URIgyeTb4P8Aq88FAVgG3Rv/tFyngjeloueHpG3H3h1kMzY9qMtG/b
CmOn6KlGWvFkaZqHEdzz7PUaZ8GnUwJbBHhOe/maPtId13RzzvaHUf98TK0d
MJ3A756KBXBwfLnGE694J55OEv7p7p6E5OX/L0D+Z4uF4zxhzNNXWyyKlUcM
EB1thCwe1LcaaKAhzmHQkDyDMLiOxnYRN+sIoNHjvzxqYsLxwknEY0Bzjgzu
OVhH1Zt6DoYFQkXzNJfzXLRhhuigvDs+OJBjNKh4PfYSb4JRd4HjajjS9Z6W
wjWTjPK+Z2ok58EYcqr1fIY7pUPUs2Aw3NR4HwcVktF+RzQ9k4xFl24gUINN
2tPRhjtLcD+mbRKntB9icGVAa8OCFJIRPHBsYv3jsacMKUgNCUdwRnD9qE9r
vEVvRoclfVZv2IafhFaGFO5LwD0wJrhHkVu7WMW9BvzzOPEJwY62Vmlr70iy
9nihalSSgp5HHdLcatM3vYVKPd3S0txE9inmav9CDhYflf37Qxkptp44hYaR
GScdEiYRA5yIN1Az85DADmhgf4EKdoS4ckq0ZXQaASizmp+CCuAyH9XACfLx
EYwCLFGEzY++v1tpP4fvuafFEjbid9j9PAZI9fpcgW+Oc69wq9kl2oq9cWfW
2gEWmIV5yi4jJOa0dyekhkADrLkDo3VQHT2bYpbC4Agc5B4K2Q48FM9N+vyF
e2HDjI9qDYr9EyjuMLsUIB4MEvcEB4QTlqCJ85Du1lgYbVmUYvuev2M4HHny
9+LIKly6pWTnOsnOypCMEdmyfleJOf9nj2yWqXNWWFH1rbOHZXRutozQc+Ys
2ygUFbTW3ZH5U8fJyFHZMjJnjBw6eT0Wfv2JVFRYzVHiD2OjyPPEIMiO4Sti
OMj7kBCETlyvxHVgCUrALlrsrcdPkW9RTNFjJEDg4b5y9HciXv4i8UmJ1bEI
5jvGAQkOoQRix0sxU8zzL9+uk7uKa37Hr2KKzzPD78QgCN/pWjR6gyaFCXD3
ez1AejnFRXC8YQyZ/1CtxDY+Y+dynD7euNdgU43m95u+eompLwk9b/4xQR7t
oT8ekBkCIyoURf0jZzmgfELpLcsGx8RIdL8UYBHjP4wg3WIuCEP31chRuKin
rz7wJiZA9ikZxJbiJf1LuPuRNN45K1mDh8nhszfl5tliGTI4Uy5qrNJw/7qt
DnzyqF4m5mTKyh1HpebedRmTMVS2l16VPctmyIiJ89Ts1Uvp3g3yScYYuVv3
KNDbLwx2d25XytyNZ02shCJYECbL22ONJRSHpXwzZtaxmECMn9Ab7ccqBqoK
3zPZRyjicHgloZn+SaoiMAT//2uzjPhGuPLBb9pqcLVY+mawlu57ITfcdKwe
mWbgnXie0dI6wbhzg99k1lMH/GvRIqvaQ5N+nPhPJJShMDJF76V43DzWYxsi
vIvmV+0yNk0irKkBYW+HCCwi8qfWBVe1m6+Xo3OAWcONdIpMfDDLTG23CBYI
Jm5idLxwPF5PspbPxzmebWZhLkRHwJ0DrsUR0PsOSEVxkFhs5tMJagdGUiFI
Ue82hmZ6wpl9SyRv8hIJpUjdsmjSaNl69HxA0nds+UeuEtv95kBiB9fNk+lf
7pSHd25LVUNclvC4VvKyhkvJxXsOwIqKClm7dq0UH6uwHCHSBYDMmlvcpaCE
BwFVVSzOwcXCrSNuIjOBNOmhWxMkC2g4362Mdi1Ka4CN98Tjzd8WJPC3Nq5R
lNHf2N7QmdPBIng+GyfAXoszFtBclVK0Uyy35fxXPFSLhoY4HuoEf6mpRIA2
aFJKaBef56DxpJDjF3r0cBWvFtBBl9HJj8khw3y/6AmkOnQDLZu53egNDMGC
YJnMx+AZ+5MMhbOi45FuqYRT08NBKvt6kxpxAgznhxahkMR7HxCt+VYjEb30
qQjcFC5IVIJ5IB1p8xdq7uqaOnpRWLZznhTM3JC4cF/PHidrDlY4Cmsul8q4
ggmsPLHPif2rZcq8TXL7cpls33NImtva5eKxnfLRx5nU74fL/lxKy8rk2NES
yZ2/V67Dqi2PbBKKWJf0Ht4YcuT3WevKralYNKiRWfDXYxc8W3w2ZqqBCmYE
R9rljaDQQwge9icq93u8mp+S4lHzkuoanzdPbG+SDSakZLx/HI/xvHcnBsrk
3uicUDOJsl409Uc6SFT8RnQIPWFk6NRbk9tn7vBtS0MGJn8jXt9LPyH8tEyD
IS+4czQzJLYDHfqkKCKyyZ8ISUYGXRkYXLN+Ziq+m7Dd0OhbDEzCndQ0w7Yk
kdFrYL5rTYWZGfvu7aWe/3IsBWJ6L8SlvX6zn/NazAsZGKlk0+fbvSKjzllf
kdaLyvJd82TcjLUJKtfMGCtrDvVB5Zix46Umhh7Hd6+QqYu2yKnDX8vrA9+W
EdmjZMiQobJ6W4l098RS/Z/IJA1rKzWszVt8zAjgbsx5zFxdbm3B6BIskbMk
/4URDX5TXz8P7sQ5ASUDMXoA63v2lUk+5hZSQxA0SqoT8L7sAI2i6aXS7xlo
jftS+JKfIARO8mORQOxZkE+SDg3h7S/M3IBUy3UpIbr/mEqOkCJ4CP0LffPp
fn8w+uE+5nvODNPbTo7REiaZkDAvGeDsePNRHEdi7Oi/ShruOOK5b8Z5GIR2
zi1/Cpn5qH4jRjivRh93REwjeERCO2Oo3i+6ui9ZbFsc5/fCaXFOL2YEBtgj
MPiQVFf3kz9M0Hi9fKtkZk+Uekx1V4NMGJUl+0/dDLB6XtofXJXszBFy7k6A
0+pZ42TR5mPy4PIJycubIDeq66WhsTlEu9+X4pLjhkIKdiss+3nMPPqAuBBd
YMqIEM31Ghdm5Mwc+pTiT+w06gQDBYZwy5Xog5tjIddSk7hMBEBcw+8QAb9D
r1jkxL58NzX5kMSwsC6mKDUuSXCSxD4vBl3qufSCuMRLEsCb+xVgkBysJ+Vt
PjnGI2D2vYlWxdKHEsGL0Zvdo9e74169cc3zyThNBksUiU0UxZhFsRZO/1Ey
B6wG29JoF2L15Wt6WyuhAorjdyYBMNMopNyQqkPXRfTJ9H0+i/CbnM2WqvEp
ZUcxUmFEMR9EpJlMQevt8dZCUeZOsz2z1pb3wrCrtVZm5mfKtHlL5Iu5UyRz
7GdS19rtpMjC73ULp8vIgkJZs3yRDBs6Qi5VN0t3w03JzRoq02cvkEUL5svy
DdtY9hYu+ztbl7Jn716r3geG5Mscegw0pqTqY30LEzhut/C03Fl0QWOHBo4L
CREzz7PDpD2kQWoAb4/BStccYDyL5/gMu6dQPRTw0YpWPonGh8AX4LjH5uRs
YyDxwV9MMqDUpeD4MtHEs9+MJZX04d2JfQnRPc9UWw5L9J2E3q1Goj6ZHHKA
0RbG5Nt+PKAjgvhvrO2A1z1MbPqQFIP8bbJzMqWf7kJyX1AZQxZr/ydRnsCK
WpyzsebGB6gPCI+UY6YxSdkAUYJ67o98eD6ycCs1fVWZTRJRBdjY8sghaXUu
0lJ7VzatXSmr1m+Re3UtMav3gkbQzXJg+yZZtnyVdvB+sNTdHVJx9LDs3rNH
du/aJUVHK+RRsozvf5KTFeXycvpCW/dBNgMFURUS3PwtBhYU+TCW+qMcGsqx
7HnFFrOZ8Ap2xMqQoFgE5FYIBQCegiWhkmGIzWal5PAtQ1Mrw2PWxqeYE68n
hgoIH2FyrzDjGIT91ridNtsJi8UsX7Awf2OnvBOr0dxI0nxOTZ3BMHLU7uM6
Q3gYberR0fUrMdoBe65jN9TojiCNkPvl6DNejFlE1+vLMXwJyw5SJjfBb4zE
3JAzFt6OXocZZvVertyut3Rh2s9NalCAFYvmbw9wpSJ4dqhBcRMU8p67ktu/
GSnCiRMYQi8Vl3uZMkIxcXN/q2w6Up9Ffpc88EsR1iRM6ps7+sx4PienTlaw
yksBv8N4FXyQDQQ3eHh6t1iG8O+sZczJ4L2OWXzEno5CsuaG2B+eDlnebX1c
tzBrGHBgnqCR2E4jl6t36k2Z4CTEgwft3DdSvG5Xmg94l04gsp3mhZLPUE8z
SuEvTBmQyzvjd9ikBJVZBop4HxY1AByU+57NjAaLGhYl7LLf6ScAoB8+LY4M
3hzX2zb6BHbdyqZqz91P2uGgeT3x7P60T6zrwEEOoOSNMAFihZO0HS+alF5G
rBRgbL6SGxYpMEHkbQylWTWmE3TzcrSV3HNELCb3tCCoUtl7Ej7VSUm1J4xB
VJLqRBSuKu0DpL80ILGO8PUxgVBYd0TBBsp9MxaTYLAhKH6Ss+M7Ri13rrRS
wkM2lQH4rDRiVii3Ij9Hx74NqjdsWv2hDSOm6wlDYGfOxZ36JCUEAxBJbuKv
Q2fzejv7eizGdbLxglEMIrE3x9EfA91nRd4eH+qHuRbejFMQMkj1QMUDPykd
8gozuogxxbiCGUTEPd0I0lSfYbdoJF7/cnQYwGr0/B3mqXYSWL4aaZdsTeCx
7XZ7fiJxElxDreAkTIR67o1mpcKWIQqcbJJbm4kmMC+kHoCm48EJqa/rtj3F
lj9rXaKQsTwWkLp48ZFGLzzcB0f/l6383bp9p1rukPgYFAcerUWv3AELcE2J
gwUonAOeSJxQYI6rTG9CuLbPCM0KutU4PerstmwD14AbeoVw34lOJEbsAyup
CRRNvQLXukeAhJH0p4W/g6sUQgrTFig5NfyH+Cj7ILbFYL80ekvMxQWrBuHQ
FkAU3PpdpsmhcQ4/tqEfSFChWsZRm8O0f0dnl6XNUS72VJvhssdn8cKhhIa0
JTEw7Rcde49RQZnVlY4ONSAI2ZOTCJBjsCK1EPwN4zPw3oqFnQgsyWs+mwRj
NJL+MB6RbyT08PTvmx8B5j3zkbPwsPkzXjULZfC0MIsTbunVlwrqPgD6X+X4
iVIprzhpBMJ856+yv7HVAFPV/gVlhYoSpIUV874yYlmhBKRxw+knwmfEoxDO
RUnu8n0cRzxDhfM9AnWL9U4cgp7W8mNm3cb01uwA7tRckQ/ddyMAEvc0L5Su
BGsT58P/zprjxtWxZgusxgdvyCYUJu3qM5n521jzQZEGagvrQQ+YgQi1hL3e
DhGzV9sjRi/AQiQfxCU6PNNh88m0ffZMK8FFrEqeKO716HU7zMAEcztXLZI6
YolDxoW2PUYQzyVpdcY9nroTZOKl5/Xmg/x4CA6PGHF7SDvI7rvX+sX9mOQ6
E1NYavD7Vgr+RKYs2Cjv5a2Uj7Qr0AlaHhozPxAdM6E8hubi/yI2MnXkYy/f
rjfb+/6kGGyMC0kFDRb78Xw1+xRk0VvMAqcjeXKSQBrTPmxWiDmcaazgT0Hh
LvTwGCu6j2xx4ZjeNQ6cg4YuxJRtmGLeaecyExBysFv7mP0US/hadI+dlD5U
RglFRNGA6n3S/k3kyt0h0KgJBZ3wrc2jTd2bGtXZ3zhoLPLh1uhmDEVCihNK
iOEFWhaG1/a4nCwELFAMPRloeaidCUlwTW1MktMzdHruxsMBMbNh2S4d/dSy
esDntprTrUfjdzp64p/JtJWtAYkF+CyHAikUdx47dx+bZXp6U2OC2WvL+6Ln
p3L8eKk5Qm+xIl9BFmpC2+wyOuhhC2qFls3Uxg4z+EZqdEaRvUdlPmjUqCjY
1Qym/dgKU2gyniEch8dnXFzdFJymyKivx7oLDBIcwzHMwScxfcDzYnF/HEj/
YG16I0rM3QJb6RxKrGzu68PJexLMIDbnqVeiAUPqtOf1/DCdBxGhREYR8sCY
h9Ar1EbaANXnAV0MLthD2Z6XfddCu91GRqgCow4eh6bkY3ke19N3XIvBcQjw
N9cycZuaz0d+72s/IIuQ791tz3vNPPRQSuJ1YyDpZlWjp9jANNOAkIE71a+M
7vWG1FjpLbSBGtzzGIpPCXQgk5glMZNDt6auLLU8akv747RvxWYknDZv3Wkw
p9zPRqOtXQ2cQ4FVP3TUL9hy2vyUyTq1HFrlnEyA49LF5UZp7gn7oOP4ZdPb
YWM2sAGNeG6aBiMjBqUN0Pzt5hARZ9IBS5XmhQjInXpkb3ME9W3mpeAFQz/U
JKXHyl3OB1/gzuJfY9ydYYYwZTYcPaNvns1SLVYIxr5vtTR+mLj+IC5FDU3c
lvCJwxP2vKKxQXqcJDv/rejehlvknm9fy1CiUMdnrj3LxJIcIBTv0c9k/h3r
xeuGst1G5NAWiT7Qfz5WmoDGuB66n5XhflfGLi4xlTe1dprPTA7LHLGYa7A1
byp0rDYh4eTlx9WJ+hZyyuX8uTPy2fpTSeM9Z0zQdPpKjeq/pqFNu4K3Fbkm
LbT8z03mMYtuvo0FXzaZvMuSvO44u+2w8R2X73tWgCIOHACiWHADJ7BGCkfd
V3IiIcag1fTcqjN+YaBgLNy54FmUe/VDFSnTiNQAcV/4B1zRNwYmHEgAOcQK
afYn8zifxlQO9+N7dY19IohOD+gzwZfYx2ftWptWnBK4k7JMcEkfFLMBC780
8dANZi0/iPQYlltutUeSobLMpd6KSkqGBUONnx9HtxtHt6XtsYnpdCyhQsuc
477LsLieIy7lNDScozBNdZb2hzbyWEHD8hBqOM5abmC7sdzl2yF/gXZnrC6V
G3cbjUc6H3f/Hh/6/IXLJice8HIStgXxBL9gj+mIxkF6HvgwOwPCfcb5g2jz
0FtYdX84Sd8y1gfGOq/cRYcTPrB7Tw42kZ/wg22VwLptbeLgaL84ji3DLnwQ
fXPOd9uF0EgHErrS5t+mhJ/6dz8ApOEPlwIlLkG+JIEYgVQUoE+6h6kdGuFE
aEEwj8/DddROP4il9++M3/X7ZldQLzkc0ht4Ahfi7EoShP2xgQwPitpQvGIE
+l4kXFoFsLmVL1SBUFnAXh2LTchnghaiXIKZoXGKPz9ur8BWCHhJlyrrkxqc
wJ4/MG8MEoeoUSCD1fOg7qSATtaxknykHSiSduLBwUHfWuo5fs56eTv3K/lg
6r7e+t0/TDJIr8R16/zNTJtN8uidcaJNDzN7ywyT0fhfEjXZItsYeYE0mMnD
H1tlo0Pxt6PCjgJ0hj0hyK2BAiLWIXFKGE/Coy+aElcxGCQsLz1tjyGMgm7f
t8IX5OLWsryfqkTWqd9S3cJE70ULxuigGwgON5UQiuOetH5/8u5kpV5n3GgJ
BaLQdyb0miTu95otLj6UJHDoA/1xD6h3BvCvrS/k4e9o2xgJ9A/AwKw2MvTZ
3NdL2hA9YMKz82WcyJTROZp9qOIiZ8iRCBlm53y8WtqJHt6N8h800UfvbltV
zOJvEut4ZJTSEXa5N0d6kLiJ76hkJo+psdW3cFTw2Tp5J+sz2w4qSRp81xqE
mwIQ8L8gMnJ+4yJ+PEwnZuW7l32/jLQ/ssYSe/hWFV7Sap0ZE2a8zC2Kwucn
zxoUn8f1/mwHzSATakhsYx4YsXCEBX42yocU7lenABIGGG+H3XIsoTtocgix
uOcH0R2z6dtpe/vBwdpkbuf+hI8BmvFulDf6gK1JiYHHd+LEBnr0oijbNaC+
1eJSXFL+ZgBTZBNyl0kuFGbcZfOCW5NHZi8oslux7oIs67BY5MAwQlpeOQYP
4aK+E6FOgfB584gB6c9sBSW81ab/cNi9opMsAFaPHbDQDN2B7JESPhBNZSEe
z3QLilvFcyfZ4jozzl4b810bT/X3b8hG5tzWbVLuDXvp3795Xg4cLk+2oaam
sOJIicqtKdnB7drZ4/LVihWyeec+aeiI+z/8yHZcLCuvsOzkuxH6DGG2v8Ji
MNv9TvQc35m4y4qaWcyLpaa9DJ3M6EwlrPZfLROMfXs1+mjMWPjcUAZVl9fC
3iQABFZizT2jHC1bWoCd4qYFFmP9uWWQK+uSglZSDjSLxRBUuqfP2m9aD9nt
Vl+E3cs2+b1rbX3aFzFjb1vbH5v6UA+o4Tj3hz1gr1Y1EZwHPGCdUTEug4W4
H74kbJgd+0N/8RurbHeusPaNNnwakwKgGydqsG2m0mQZld76mL9MZmv4ZwFW
DN/dXwkZ91CbRDUd1iBL20DfuTfthyBw0FApUKMdllRYHNgPH/XdKJcZCkEg
SZzKem5MImoNRFNkv+PA0Xf2LSDJ1Tvvphh63FojU3IypXDeElkyb5pk5E6R
h+r1XSnbLQu+XJ/soM/e5NNysuXg6Zv2171LJ2TYkKHy5ar1MiU/SwqXbmbH
1oDYT2yb0Y8LVuvQqzcTTkUFzOr9j8t6EnJ00kPv9Nf2N4j+ka8xx1LgFvjk
C8Of3VSwGO9FWbtz28zxWMTta155BnJEz5be0iFM6ML3YKd3fXtoD5gw12Nq
yK2mrhB7PeZP3cpgBTn3/ciGYKghrqcFK+lxoRx9gSYy4pYijBP07msY4/pH
ww87UIHfYC0bkjoYPGnWgiKnMOS3JU4hY412g3mw+Up0+m3/gRuhnKNa70db
UscVWNHn9ANAyrQQOLenqgQ7xpDUMM0eg39ESghXnGYg7pDT3GNOAXkIixLD
LHhICqgDClvyYRgBcwwu1xLKYHDP2RYHCWM+K9eOb5KRudOkxTbkaJZJOSNk
/0l2COrBLfU6LpA5e2y+HD57y+6/48vpMiO+VaPhRoVkjsyTyvpO37M/p3C1
lJ26KOOWlib+QsxSpIWgd4hpG8R4LjUhTdLDikyuGxhNPZqEMRl5+NKvxmmS
MO1XlxRwoTlGKdpkJINM0MHeQa/GUN+YSdER4qLdhg73Cd+NLMTIhjVtZZLV
SARmQow2ZaPnwUzkhXkG7EZ78M9AhWW86sKIdB8RBicXgP8IizNKQOPweMxs
e0S7Z8iQmWdh8AdJQZEFYUSy3xtw8KIFKtp5LtEP9/wgRlTuwuBmX4ruB/cE
/bSDUYP1gSlZ9YzfDKNREwCCSU7DJrQXyNHXly0MPRht54umF4coNXsYxkux
juRSrAGhbczpEJAw4mAW4Mmx0TGwYBuklPrrHXOlYFZv/fW6WeNk3aGTA/4Z
TK4qzJMNh8/Z7z1t9yQvb5xcqGwIbfwjGT93gwzNniyfjF1ubhtyA1ujYm4f
+d+IU9joHEz5FKEvDaGftrek6hnZo3t0YhiNO8vgy+sQDjD/16Zi/KXKWMLN
aW5kydUHD/aoqZegltvSDHbqJIy4fidsEgAU34suG1EosHcjbvdT6KC6lvZO
AmuSkbvS/szWTDEieBx22aom9LbwJdtS0STL2+jfHIMPWeiCxwgX8xj3FMnd
4soEm7zDkEFvm/WRdAs7zndeHkOXqRSCsBpaHsVc9k9N83SHaWamqNnjjTbg
Z/Ad7QWJHMN7pe14uYiFnzwT/8j37rkLIrVt6k4miITOuK/Nkup18Dq7VXA+
EQrEOTRqmO2h+LCmn/Nx4VgnyahQskz79oqA9QkiN8yyFQHBV3xBursI6Tpl
zrgxCSpXz8xPUCnt9xWVBXK+sj429CMpUv/y+IkyeVDbIOOU9l6NJSXBeAc6
RBA0jO0MT8cJBpzEtyOF0Bn8UHxSIJoT1+26wX8vGk8z8NE5cNff00NEJG9q
hMLw5h6ABDrF0AEGcJqlioRCb9vCv4OxYDU1h+bhdO8KE5xOHD2Ua2G4tolZ
IZ7B31SAQJHNUVlQKhQKMGojOHFIsIoAwLZcrQ6hMBl45DU8plhROGkvvkcG
JI0JgW0fMgX7p3EtAhaXLA/nMgB8x6PBcSUeayMNkNpG2km7AJ4e84pSusRt
bJfXKCpE7GtpWUdEBoEQRyN9f3EehoA4kNIssr308IpqmPV7xls9FPzhHzxr
e9fwYRhBQhANLUGSjzq7e1F5rugryZ2wMLqRXTJ/fI5sLjnnqDy67StZtGyF
jMnOkZLz4R0rGxeMl8+/Ce9f6ay5KiNH5sqVKt8DZ6Tto8Om3OzEbCiYX5yk
0tAwZI/7CAKNwBWZXg3H0KStpOwYXhgaNGe1HIro1MUpDDE20UQbZLGgqJBi
VmNNhZ7SDxpHBnwga+7H8zGw6TGet20nVTb5cakWmk4NDV6NKcw34tQbhpF+
eJKORA3+WPujx+b6XYozqqwJol1sYooxg54w6hwjJLJCtmnBGLARIujheR/E
ZQE4N55hI0inL+icUcR9SI1j+EAreuXDvTG+JFtANS4lbWlq6bS+0W5zT81Y
P7brQD4/oTAojmfQR6NXPY6B8hHRZYuN2rjW/TUGDN3DnqEy1MllbEocYPSs
JSk5BmwvxnIV5qYYiOO/PPb9BI6N987JiCGDZW/5JblYuls+HTpKrtxvcTjW
3r4i86aMlldfe0eOXbxjXT5TtFEGDx8rV2/fk23LZ0vuxPnS1t27uzq7tFy8
dMVUpLALtjUk6lmc64GMZ3ZiHjMke180oT20LFtbkmS0yeyYBLZJoFidZXt5
qNAZ/u1qTm39R5yaV4VpixRGaa/ZPVGsx5OeIMKzwNzfjt8/1HjR14Z4gsir
86AbPE1MPW3Bi8NWNcfXhWLDAAilxbZ/S1WjHUPRUKRt66c2uCMunkU6ACZX
Ff0ggu5GzB4CzA9jdjI9Zpa8+CM3Vt/wPXzVrKFpSwQVHzSOB/5e9EYBu63G
KNxn9yDHAFUyAH1QkZ7BTkObDC6Ii4xndZwHJpUc7HubpcDxGlviAACgxHUA
/HTcDXjy8hM8o3/kUbrPbQCfb4PE5cfP3zcrCoP2EmSA2HYZnT3CXkq548hZ
BDkg3qznUbN8ObtQjl0KaHzS2SpbVi2WrKwsGTNhuly4XRtHwX+SCXPXy949
u63t9N2rQsCQzxVZTmdS2KftQTTVzM6MtArNsAvxkLAGJ5rO7RaYQWa+xoOB
64UTkB5uQLoXr8WKU85jUKMHXzlhla7T9pgZxwfzuHmYZcwDQYNpzmfiiX7k
qy4gC/AErsHKpZjvoI+J2XvW7BfNoEmVVc0GWdsyq5oN3mPS7D+ahwXS8Qhp
LQgjxoKyoSAQG+qAD9jxkTELAMoYCVhXUIfmoXRiG9RLr4glcHLNMYiTIrZl
B3Q9zyJskyKji4TjE9sctNmQj6fH6OGZYXfIGpuS4wOCca7YT57Pbe0eDtfl
W/Vm1YEYZkctu6OQwQVt+kaNc9ZX2KNmrS03whjzRbInWbLvR+cjHQc2XpM9
muUJhG+5yeS8R486dBz0+Bn6f7rN0ZWWnbRXFNjOtUZ/jdY6DKDVkswPu6ex
GZ3nW0KldHGyb5RHK+9FN9MibdvjOeQuvBaO5AOSfHei+/9hOhqMWMXerYem
CWYIuAZ/mmdhLC0KVy12WG7skSGBcR4y02E2A95DWxg8OM9rD8AxLiHGjeMg
gTiANjPw4QbyRaAHQDJWOuIW9SAPpHAdx1FH7oLDZrEw9CARA+lFaowjtOr1
jF6CBQ8iW9DWHnOf9IFng0Y+7qY2tYTXZVY+aDJZsJqX2T4yEFhN4xTlMntr
gF5DbKEI78eD0n5uAG80P6De/EK36dbEibstb4NKSbUR/D+MO966v0BzqIdl
p+Hgw3RZM5mjxD2duPxY35m6/yCnT52U17ND6baxhqIEN8NfE4GLRrQUMlqh
Rh/EEQQAeJvlnbInyRoy1rPmFCVrRbgu1EeHiUykC7pslzHSWHExFBbCd8cI
AUCbiQPmuhGjQ7qgCIgj4z8Zf4AyWJS2Y23YgwB2xRJhcT+I2WHyNfAA07dD
Y7UmlpTvcTUZMTBoY9TgozgnR1tANkEOQTXH3V0f98VRK3/jd6gPtvwg1nXE
QjsLfLBw8A9t4jy7p/4L++HvNU+DEUAbfDdyJkocMVhLAh+OJRHELy1AB5Sc
5t6cRwWkKD6Jm/7QvDsxDuJckOFJeh5PU5mugwxoKh+2yAbACcDVK4cYZq+r
sGhERdsHSP+nHDt+Qn778VT1x7YbmWL2ie7CXFlYDMSQgk58y3kvg8XptA0k
r9Umpi1kNQ7aAkHOgybAMUTMZKGleuMCjbtRCaPjnk1cxz3tJQMqNI4xC44A
cW9YWAElInQTsPZyRDQ8KAdqwKBAH0gYsABg/PqQINxrYHS3MSgwKJQ5SJ7b
C9T/zhKI42OOlqQl45I2cQzlkn6Z+OVx+x0KRIvQodOa7e+u7WttD24YbhSD
iTYCGP4GXLYiTweY0x21SXCIgq333XY9PT5NEY9911LjGFwHHG3DbPBzqnJJ
qGvZbdst03/tY7z2B0ZnuJePFRUgC7cVt5Bn82Hw4pW7C4lrDaXCXVjNmWvK
+nLS31oN7qDRy5RPdtreothixIFa2RDcb/lGrGKkuz57dkWp03eCBnoD43at
vgiS/C3FEAwGxtmEpWGLPZ+E5Fq+CzsGi0X2eKrAGU+IcAxV8z0qgOe4d9yQ
WLr0IriIttJlHUBBUv+jIQvD9U6cmYbePrKd+0JeBmri8QkFKRJwk+gqmmBj
QbTNKCJPaDkJ1eQ4extBc2L0kCxauR03ZSKq5Fk2bhvbk3IDzvFC+O6oxSlx
o+JPozeH5WmOSTmsEhMXem7ySimnpSdxEymQxGhwJPEDXuJvfy6cwu8c43d+
UnXjm5MlQQ8vaVAZOAeF2pj65LU9uHOYITYK537KAN8qHzihbtKVy1cUt+Vh
xpWlKX9llp41YAx3cILwoSWEAGESSPKQuEmd2TRfeYdSeBhwB3evxdlRFAAe
qDzFlkEB2CWwyoftgXtiMonrHsS6zrei548nxGws33EvbBd0pp0Ksv5xwjB8
cNiBWaYVpzbZ+wZwzt6yzT2bLPCjycjP553vxUobZ2JlH9Uj76D8Y2MQWKhA
m8S7cgj8ssMuKHYfCwg/D+UfOGQ8tyu+BARPhK7gqoMD34yONmGXrCAs7iQL
S8Pw7NHbz5DU3/oU8ZHsmQfewbXjCNWoGQ5fv5CMQv/wWLSJKbOJLtUgBqX3
BZt+TRAfTecRfg8gxtBgOBSuLu1LSC/YqwBPnrlovOyhHllSSANAYDXj2wv0
cdr/tP87WbeAJPjHKLaKh88OWayELaDZIeX92DgeKTOisAu+7QajCyeM66hd
RVpP3DGwPa3FNm4m9WgvzWoMux7BDoNjOIgWHT1wNOcNim9MAiHu3PlrU3CI
aAsDhZHpIxcXngka7gFIcaBAiROiL9hHvJYns8qNegtxEfejaN+wW1xvLwhS
VCjz9LOE5w/irIS9PsDSYv6Ks7hpogEXUfIITwjzgbwgjx7xt9s8l+xsxwdz
CJD9CM1VFzvN814+h+dJXs4jGpj61YkEQf6yLb8fbSPAczMHecaooC+C/tje
2vnakOm2ZNsCKKWNm/HVJWfj1Cfm672Ju+La81DIj6sKn/o7sSaGd3hZU8gU
Yx+giXsx+MHvQ1Qqnt79J1XiaOIjC5T2G3IV7CGW/D+kWZXnSnEaJ95EGlhY
xpXnCRgj5McAO6agoSXQw/vhlgY0moTyLeruCIEJIIIRGWde3wuFQPWAya11
o0qPe9TH4MamJzSKoIu0CU+cZ+FE8T4fwM4+/Y9jgpzrEJmbGPIio2NtAGbN
6zv4+B6aPphoh7bR/SRfCN3Y4hTyCwMNltdB5BasO+Kd8UQIHvyn+KaLSC8+
JvyaVBryMdtjFq2Oufu+Vd1/JdMWbpQP81fIJ4WhwuG1uKs075d6Lc5L8zc0
4S9SCXulV9uwI1bDPuEmQsT2vp3OUEnPgnWMA81BE9TsuVScMREHzUajQ+MW
IP499+Ge1eYunuBYkNjPjdlQgG8OxFAmgeUJS3welAaDMBbw8FE238OQ+CZ4
wCgnJ7IS09r85F4afiVeLOcjmtpQ4G0+Dxq0eS8FFzbTmmzvkDxCnBSv/eNE
IwwAzD/2jGMYBKIV4icAa9n4+NKsOM5s4GDeAVltZG9AzIcwljGH+OvDi0Ld
J4o0FWwd1BH8nS6Thz7bX9Bse9GFSaHEib9V1WheK85zr2Mv3o1vB/kkzUtK
TxsQaBktfMMWH4QlioCEmAdv1HfUsMXJ40M9o1txejdWNYJTzVovKIIA10nY
F1HXRTyPtHckPAweaY+Vkdj4gQ74O9NWMwSnh1k5W9nQYN5r7NafJXEYjIg9
hQHpA7YPjwPJQmFOX+4a+BwN97YZx+omA6mvoqiOAQXiDcbhkNlQbKn3F3qi
jaTSHj9+kojaPVq4wd8OlXhBqk00iIy5D32liMVfmYaKQhq8zfartHh4edA+
/DIpFl/wN310TuFFJ09FxPjcjqOWEaIDz+dIPBFQ35QCpKcsNMqKfhtXMhH/
w1SgvM4rTmXopHWqtAYDBFYNImMYEPyFTS532NITMiIEv6znmRLfq0IH7F0s
s4O7ibK8U8ydUH5Oy7yknU7SWf4mXYGbavyv/2CVuuh8QA3YIYTbqcdxDTm3
0dlJu4SiL8eaQRR77V5wsLiebC9M1RXPa47ZF57P7yiOYNS9c5gU+uAanDee
xXoWEm8hB9mWJN4mfHnUMkMcA3wAG8D7W8xQNovTube773ArHgvy4Zpec/1c
4lZzHKpE+fQvgE5Szu2fnJvKDU96vZ60VETQDnQyxYHyTBKd+afaXje0n63u
07zeqyviFQiAVz7mJsf6MkPSt7YWedEWAKxcs1EK15y00JzSb5Rn8YEqFWGA
xTBJsddfTGgKx0gDGng8vKpSu68eNR+EPDgWkzoY3RQhsPT4Gla3yrQYQbPS
jns/0fAcZaNQHBIfCz2RlzkHJwPlA3B3K31CqjvGNzaJ1RViK1jPAwnAND4C
gmtgAUwmrALIG6MThBzgesDD63D50Bauh7lgNk87MjC4BrsFe8K24QUUrYkn
gpbc5tBG/d3xABa5JS+2eT4e6454kGROYYClE13B2rynUqDjXKO/OyyIiWEG
hObU5gaRj6V21pb1lheGM7rk/u1bUnnnvkTqks6ONmlobEl2PtcutTQ22Xyz
H+toaZSbN67LvQd10Wj+0vZAem/0cnvXNA6Dv7nCXv6qjgK0CRNRSOUlA3Qj
K74Zj3biJHwaq5/4YMBR9lDegDljf8JgUDVgIU2IQms8Jn8mWCteFFLflnh4
nSEXm+Zb2eGcMoghqzCb35q8OIQmcQzhQ1xYGjCFPsfa7GWX84J7ZD7ofA4h
P4bloWBEjzK31PVtXnjR9D1hqWWQbQiOja+nM8h0B1cHKDM8/EXTREDwocMe
HClJJJrxzFh30t3+5gpFKPaep8TiRizg7emEfJyb7GdThxcZ+Ba8qV32ki09
1WfMQm487J7fu2+19DySTV/OkYyMDP03XOYu2yRdeuHpog1SMH1xSpl1u8wp
KJDD50IxTNX1UzJmRLrk5OfJ8OEZsmbXcVYK+JvKWQFwrOyMhSLMe/5T9jf2
4tjC+Bo6S1TWhZwsr3pjQPCdV2B5UOv73JBp8Tc+ADafdLBsXNzzxN+u6MpH
VfaamZvh9WKwHyxR2xhYkPuGvIpY1uhBRCZsQZWTrZW5HfZPgWHJ6pAPR9Wc
5xnCVJ8t3tN+qllWteoQS/tOslc35RHIA5ch1ZP2+anY7tSKPD8FD2N8LE0B
JZyN5aRrBK7GGvrvQbSWhl79nmO9lvC7Nmv6sNFzAe1JDat3KZWn4sBLc8cI
0dv7TmtaonvZngTPqdfxwWtRT8hnwa1AIRr1VJRa+eiast7C/wdXjkqm7TXY
Is1VF/X34VJx/YG0Nz2UO/eqpXdst8msMXlJ0eDWRdNl8qIN8lj7V3nmkAwe
mi3Xqlo9vpoS33JWVf/I3ovnrxr2VVFhYUcoQvGtFC2KVYTejos2GOAesb4e
y2GhP0JJFiD5IEY02GtFeBTdnxpCSJGzzBSk8ndBjH8Qf9x4LKixR8zbHx9f
YugvNELN/I598/OwmRMjQifFKXefEfWZHAv+ldAqq5v6Wc7lZwEZvYAz0Fo2
J1YsYW4TVOmxB/GdXbUxgMHfQxz4nvzOy3yh71iEFShugFFcGJ9UCPY4ZdU0
Btz5cO0Os/b2FA3wPKDzlwXVJrJ9KsAsev1UUJB2ejoVgimpLDJqGqm4b+eV
yvG03lqXk7sWypjpKyO0emTZtHzZdOTsP1c03VJfLy3RFbEt0zPZMv1ueMzP
bMv037yXI+u3HLCB6kt2eC2S78vxqe3L0Wac55O/nMuHY5TweIyGVofEREK3
vw3lBdNER/TCETFAsXgGCup+knjzaqvTvPiCnqNFN5CcgyXzkFXtdhT0j+I6
uLaEzpyHDDHRe6+OiWw/ZtKJjh1Om+VA1NdQ79/1hyEG9+7L9c6RPGNBArOI
+H8wcHg9eU/KOU8lj4H6yC30+g8DLJq2OaA68/eSeL+3db2VeSKJRXR3kGMW
IK444UYzBU3BM1O0YP699tRHoZ73gwRO5TvnS8GM3ornuAd6L5we9YHTuZJt
Mn/JV3Kj8o4c2PSlfDg4V27Vtvvc/ZlTJ+XXQxeqf7Y5ZQutrWYKgRR+Ga9N
NF2p3hlXDIy6uNwaPfo7B/397I8j17sP6gSUmhrIipNadNWJyacwowcScABE
dfRjKkPuq9v0j22ZZi947jQRcS+SVPiSGAISOYxIn1B7YhPugbDUXD4dMUF8
gKPFT07xqf/W9s5EmRx3+Nv7oWIx3AQzg09+nzLdB/OwBb/sufgNdTNIOUz0
JjBKvdx9frfd5mY2tj8TT02NLF9McFGxe6GMLVyVWLCvlGbWHTrZP+Li6pkT
6gtdk1njxibYOFu8Ud5+e5CMGp2n/8ZIUfnVcPrPzMX6pGCNvDFuZ7KSy1+N
wCa7oNs32QUrbpsxdr55HeW1vHYWoUE7lAugb+WC0MP/YL22GCoOdXtJbJQx
BYbVscjIiycxCJOWHU/iPPeMeAT36ozTgXCzFTcq65FHJFyAukiQkAvl43D9
tndVF7NiDkk+IcFwjNmcNPc5nkTvkOS70xzKjs58P0uf9U/eE05c8ExCMyFd
6R/OfD4SAOczApm4d99c0e6Xem0RgqWegRzBUxEYj3ujT/U4HRh3zqn6MkbL
3VY1oM13JDczU0ou3HNgnDmwSdIHfyTvvvuxHLt429pTffG45OdPkDvU3bYj
lpi9elGmLtoox8rPyfTV5eZzP4pmHNMHOBiI7gFlxlddIU3SVr6ZHOeE8IWO
P2Ph7umYmfARVhPeqRdnJ/+NL+G0Z6EJex2nkgIaN7SQYcDAqwZIP7n278ds
B8Qxkegveon4yuGNcGFmnxwq+Uvaimfm0xOQBiPdF2FxDYaJ4auuzICoag2o
nk3QhItDe2uiVxczDR7hk1wgJUvk97i7e0DkIjeFnv8ASzEDqgY5nPMgZikd
l5azVkz3iBcvPmVGhsozro2UmyDElnTNK/4WQno6W2X5zAIZlT9eCvKzpeCz
ldLa2eMm5fbFEzL844+lKNJGd+NtGTcqXXLHFMiEgnEye8lqafY9uv9aig4f
lSF5c+XsjXrzZe9Ec2Fv3VVzzRt+aaPVCrCwdfaB+BbgFguMh0at8C4/UPEk
TjkGvzhsEcp1Idm5zYJfPuZI1rUlQTORq/u4BmpzTXosfYAZszUk8T30Pr3y
xBdYDoDaQy1hAEU4/K9MqoT6YfVLSG06WyRFBZRQK2mCgycprQo00GNzwiGI
epKwmDOSBV9eCd0/9fbRqjxrREZNRBLimYFq9wzlCxEHXOXOdU84LXoZ/ZMS
XB2VSdEr1cPUcKRiI2ya3f2oRSqOl8jR0lPSonFnuOI5uXf9igaE4RVl5JRu
37gmFy5ckPPnz8uV65WE+kl9EhHSMb0+a26x1R7xYcx5pOQFQphHyuvZgQC+
sPH20DSX5j4wtVAgI1jkUNPl4xVDhJGpaQjLC0AZ3EByCYnANSEUCU4DzsSV
23XR6+9JhvPTiRR7K2i4X++cSH/T96TgUERv4bt2PlwRMophdxiPnPjpSwO6
Tdep/XrGnFt441Hkrq7kHPcJnkoyV6AaDOGhOrF8C0ce6DisJCXLyDGCU0Sl
V6WeGmdBE85wCfRCsH/CrilY8Rd+U6SB55A++5CcvhZe2E3HzVjoZdNS3t+K
hwmS8QbVBUhyUtWxKh0aI+OAcVGFeqIgOIk97kz0kWFvpUqwCVVx2oCE3NMp
PaoK+ZwkeOFxyB5yToKPEB14xjzZLD4lA5j87oURnBv0SAl0d9IlJMvUibd5
cvAU3NXzXEucXfCWgloQ250y2eDc9yRpfUjsTV1xIgWdA4weGPvUKGTMOfh8
FF5nnFTjw5yRDvmou/jj2fjK3evWN7IVttuRynz22goypI4h7zqiSua3vmMK
jqlAaysSdAbkg3X1F9PrZc8kigtpG0/QuXDVhCUZIow9WMLDjy5f4o55azqi
iwjJ8kjWsejvjmbX0ZOeXkk5H8f0rYPcYs2ltmFz9N77p6qet1j8zrFn4i15
BKils1NXnnDhU20zI9bJ+cjuI/znpLS0THbt3GG3wzQdPn3XiOpJFKPKIMrj
hwmQOB61kMiNFkDpVMLxklRg5BEbMsHHZH5OI61nowi7YoDnfha3Q/dsgZLk
Bp6JU6JPbDIHw9nTExLnqcG2zShGV8qpNdRy9oIWF4yW6M/kWKosg8qeNwuM
WWW2nSbeD+bATrKkvf0tL8RbeJzWk0TV/ZP6AP7q93se9ULKMZaZzFhTnvbT
VL38wAZF8dEK0wUqZC6RuX9eNcHfuC82L9oV4n5wzIyHu2j6M8mSUr2EA4sB
ZLmtF55M+yo4wnxfE6ufwhynxPggMDchKg5Ic+uj3jR+jzUNgTh1Kpf514wK
VAvUjerC7z+MvW9SqLtlJFT3la54y/yN1bof8iVpqbYiHJOE5bByxldPei2R
qscHH1X66SHuTft5PGarB+rMePd9s/MPbD/7Xw37wmrZETN4pDaA/FYIOnts
oz3YjxmbT+OubLw+kNdLd6eADdmgjsdJEipEcPgX7C7rXiMZV67Vv78fO4Uw
MCWOdfLTemufxOOqOEBjy/sbnZOCUPc+aQFV61O+CskAD+WRNy8g77Uugcvj
lF4sIAn29n7wcOJ5TyXLLvgwkzFr3e/sg4sA0yevl7cn7LYCfuiHyQF/xyIz
cE6IIOJefN+s1wpQkOKq5H+aRToaY+ozkEgElYPn+uhqE7qjKP5GWirMH6So
m6+pe3cJBiIgq9zVZ/qcIQVP/w8uBVVEbGJSg2GSic3mg2vx2bpyRxwJwdmh
NjDtB6nC+Y6UlZXJspXrdQAetlpchMCgcu+UDh05fc86fa+21VOEjHWM4Zz1
J01+8LGrjr7G0CxJ4sT+223qGju8zz09oX/4bz+JF5DQZLSRbcBtAhV/Fc/H
zyUiSu07W0nMCB67fR4FWfw8tZ8vGAj+aejn6mUXJRVCM9eU29NpHOSEISDa
9lwnUgYkNDrxJAdYo/HZyACpYvxsuoxPTiF/EoA8Y8MVdyeptugJQVl3isvK
MRwU9KRI+27sbWuUhEbtaf/RyeMB6/hCfPKz1C4+FbKYShQlZ6ss69eZMmtN
V6sjvzhNIVzIgL6w2B1XRPXo/UGB1k3lAe1EEotpW+PmainOsZjt60oZ1NjG
KaH+LumnR5OkGlRNPqfg6wOexFRn/L1fyhPjobT/ltrlF+VA0VH5bcZSNUNF
VrvLGKBbPnfpVR4+b8lHx4XFVOygDSSjW93bGfq9yry3tNQAlDcqMQOVmmeC
g2vq28MWbzFOYiarMr41sjfrEMYoFNER4yGYMVnCGpSNvKDm2MuQ19SYsl2u
Xjgn5y9dlfYYLLc118v96jrpaG+VO5WVUll5S27evCk3btyQqtpQYcBs3tkz
p+Va5T1zA5yCCz/fKC9/OlUb6bb4e1Y57DTK8C8+dddKfUvO3reOIkDsclYo
kLbzgCIYc68QXvWav37/wjGEDrCYNUkNRhBa79z9U4YWW0KvyoKvWTydqpDK
ULOVIM7vAVmmukGhtqvXtPQek7T/LZF0T3e7rJo/TbJGjpLsEZkybcEq3nMl
Z4o2yMTZy+TG5VL54PVX5aNhWTI6N1cyMjJl6fpiaXl4RyblZUlO/jjJTB8q
6/dXREl/T06fqtARuVjHdaBmUAx9A1Hf8ZzIj9J1LBORiO1WU9WUaAt4+sh9
Oo4jeokvQz5ZrVCvtQiCZTrZ3XJ3URGeIxckTv/WsfbOLmNWongXKJCEuphl
DwJ93upG4MPUqmFIJEyVh+/0mMv1R1J1oUjlkiO3Gjqls+GmjEwfLicu35fO
tiaprWuUJ4/bZMXMMTIsb4rcUrl0Pe60sPXwps8ld/JSNpaTq8d2yvDsAnng
r877nvH5/zvkC7lV3RpHdXBKF206ZaObN+ciZhbXZsRCvrkbTlogFfr8nInR
i07oQ+papEIVOwb+x1EWUHOM3RJwGVdVG2UnjhxBWZRBYrGZpovWOa333YAV
OxfI2MLVyYzoiuljZOPhM74fRWdrnSxDLrmT5NL9Bjtp9Yx8WbP/dGhk020Z
PXqMXLrre0V+X06ePCkZuZNt3sJGQqQ8nCaUy8jGOV30zWlzJQnFw2gwykwt
hsGj9ADZGLK+zZ0XvobculLqbIDZtBAJJdAjkAQ+bY96HZruuMwr1agj9lgV
FUtAnzaCrIyr2PjwgpCsuYdSXzf7L08AdnXIN0tnyscjyd+3yobPxsp63+6o
I253dKu+X3xohYY19mI71dS8r09KyZm78R09B625jhBmVOgmISnSmaOogzZB
hwrwZykMwwCjJNePmTTUydWBlvaLeCwUdQcm+sN4jLGOtRbpTT7RlFtRQj4F
4stevGm8jbe3IrvJuvEtwO1ZJGOmf5UAbvnUfFlfdMq3Dup61C737lWFl5t3
P5JF4zNl8abDsnH+RFm572QEXaXkjMqTC7cb/bLgWAWOC2VSJ2wgLth4Kplu
Z6EuKzRqG9qc3GfhkESDg4QpsUu8wngMv8fF5+U5Gu2kpU42cgwweYyA6O1Y
ihFg7DOelVaS2ITlbWRyekUajBVGTsWXMi9w/2KRpKePlOv1HdLx8JqMHJ4p
J65Ue/9bqy5L5vAMKb/+EAHJysJcmbVyvxzdtlRyJi2WTm3kxSNbJWPURKlt
63YHGrH945DFCvIWma+qul/b0kd9ceOAJHZHJsGJa0tLjbkYm5QIuZyACtBj
PYHLCZhxDG53ORHr4uVQjvBMynnIDjgOSI51h2P617+Ox+BVHH/++lEiJ4bc
hoVqQLNzJSc7S6Yv3iga0ngthTzplG0r50pGVo5MLBgrw0eNk7PKP48a7srk
MaNk9Bjs5zDZXHQqsX0nT5bLiPEL1NdsT3IqBgxVctjUIthVGphaiYwiI5kn
wopAsb+8cwQ57p0kgu7p8fKztNS5Zj/m53XHY5Li2fix1MkmAGnHEkCG6UuO
seCEuCyVSZnDQKnc4++icMMEBIPyyoWzcvbiVXsD54CkL8oOVy5KxckzGpO1
JoWqzXUWElyrvJ/cHJ7bW1Rmo8jP+0wFeVTdvK6u3lVaWFNSbl6eRLn5rapG
H1AA8fj5KvP+XFc4H9yKBYfuEdJP+sLy81RZUt/W0t6ZyBJuBIztKZaCMJBj
OhASWZKL5Fqe67JkeolncA+wAXj/POW+N0Mg60D17O5JHX9DJ661YInlR56X
tTVBdxs81wrKYspBFqrVZBryufgddpBlPvQS/5ngIDWDFyjsSUqqLdTQc8xD
vCfxGK3+syh87nctIMtcKnqnzfNO3X7QZJ7M7+kU2blbN67L55vPmsdccuae
yWC+crESjPNB5Ns+sEctdEIpOq03S/zEVM2bqVKddxqE8+4q4FrmVFEZ37HC
/ycp5/MdcH42Bf4cI8MaO5f296k9edrSEtu2bTMZhIpI27fOWwvQPF32J/b/
MyZKd2j4QADWGmXCpNQ8Ls3FY3MwA6qYjU6kQbBObQEt+4fUlj1lwLl545ol
m0iY3KtpSfv38TK8IBwn0jpuz5F/xGfa3/jQ7AwbAPLXn/ft+M59xbLrYKmq
7Iytftp74hbO0B+nYIgOEM84hqzTkcX+93gMywt2f+cJz8rMLzZL5tT1OoCr
LfhgK0wsMbfRRr6YgmAWtGOYPYuDX07y4di5e8QxnoxF8qyGwjNqbnvcywg9
tksBQnyrbxvKykpl187tsmTbeVv95mu0cFpU3c4V8HMsrUj8HngT1XJ3YMCo
8/MJ7SlE4a9UDgLYyN9pEPDjgGAk+7SsvzQ3N0tbW8iRuyNr2+NG98vHEH1m
/kZNUNrYcIu0P/j/AGTst5I=\
\>"]]}], "}"}]], "Output",
 CellChangeTimes->{{3.740227954477846*^9, 3.740227962767161*^9}, {
   3.7402287365920353`*^9, 3.740228773893072*^9}, 3.740266586370701*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"e705d4ed-c94c-43f9-8269-e6853d77a958"]
}, Open  ]],

Cell["Information by round:", "CodeText",
 CellChangeTimes->{{3.740266673677053*^9, 
  3.740266706592145*^9}},ExpressionUUID->"869bc9a7-3ed8-4966-a2b6-\
0185e4d6a33a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"finalTrainedNet", "[", "\"\<RoundLossList\>\"", "]"}], ",", 
     RowBox[{"PlotLabel", "\[Rule]", "\"\<Round Loss List\>\""}]}], "]"}], 
   ",", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"finalTrainedNet", "[", "\"\<RoundErrorRateList\>\"", "]"}], ",", 
     RowBox[{"PlotLabel", "\[Rule]", "\"\<Round Error Rate List\>\""}]}], 
    "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.740228002857196*^9, 3.740228010012876*^9}, {
  3.740228055420759*^9, 3.740228059363686*^9}, {3.740228813063352*^9, 
  3.740228827717226*^9}, {3.740266595015362*^9, 3.740266626030674*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"b15a9280-4e68-4909-b98b-46e1c8a0fa5f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[{{1., 0.30155905918382697`}, {2., 0.21808183534376943`}, {3., 
        0.1878883394713435}, {4., 0.17998333366352484`}, {5., 
        0.1804463291924527}, {6., 0.16669430439240626`}, {7., 
        0.16089870873088977`}, {8., 0.1462703794573174}, {9., 
        0.14856763585059538`}, {10., 
        0.14352053428485437`}}]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotLabel->FormBox["\"Round Loss List\"", TraditionalForm],
    PlotRange->{{0., 10.}, {0, 0.30155905918382697`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[{{1., 0.11888448804585879`}, {2., 0.08629560921775795}, {3., 
        0.07314193607370058}, {4., 0.06998337048897524}, {5., 
        0.06950076257406429}, {6., 0.06556379878047548}, {7., 
        0.06301633993307289}, {8., 0.05685273057284451}, {9., 
        0.05713691864799089}, {10., 
        0.055625342689454516`}}]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotLabel->FormBox["\"Round Error Rate List\"", TraditionalForm],
    PlotRange->{{0., 10.}, {0, 0.11888448804585879`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.740228010508019*^9, 3.7402280598668947`*^9, {3.740228822574521*^9, 
   3.740228828298321*^9}, {3.740266609950526*^9, 3.740266626529319*^9}},
 CellLabel->
  "Out[111]=",ExpressionUUID->"1cf93a8d-12d8-41c2-8571-2b6003fa9acd"]
}, Open  ]],

Cell["Information for the validation:", "CodeText",
 CellChangeTimes->{{3.740266685104521*^9, 
  3.740266723886101*^9}},ExpressionUUID->"2e577d46-3c07-4dbd-95ca-\
a3c1d5e09828"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"finalTrainedNet", "[", "\"\<ValidationLossList\>\"", "]"}], ",", 
     RowBox[{"PlotLabel", "\[Rule]", "\"\<Validation Loss List\>\""}]}], 
    "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"finalTrainedNet", "[", "\"\<ValidationErrorRateList\>\"", "]"}],
      ",", 
     RowBox[{"PlotLabel", "\[Rule]", "\"\<Validation Error Rate List\>\""}]}],
     "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.740228034016685*^9, 3.740228068329914*^9}, {
  3.740228854284079*^9, 3.740228864684329*^9}, {3.740266639094225*^9, 
  3.7402666476199493`*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"89fa41be-fb01-406f-a507-7a10434ea14d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.012833333333333334`], AbsoluteThickness[1.6], 
       PointBox[{{1000., 0.278366301258405}, {2000., 0.19587722742930055`}, {
        3000., 0.20243050261090204`}, {4000., 0.21039634540056193`}, {5000., 
        0.170076522451515}, {6000., 0.16686675100432088`}, {7000., 
        0.2235838538004706}, {8000., 0.1558530046526964}, {9000., 
        0.1724915747685979}, {10000., 
        0.1659658575092908}}]}, {}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0.149727339822411},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotLabel->FormBox["\"Validation Loss List\"", TraditionalForm],
    PlotRange->{{0, 10000.}, {0.1558530046526964, 0.278366301258405}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.012833333333333334`], AbsoluteThickness[1.6], 
       PointBox[{{1000., 0.12059382661684746`}, {2000., 
        0.07799667995112639}, {3000., 0.08584164020294945}, {4000., 
        0.08610141315497459}, {5000., 0.06657870611796776}, {6000., 
        0.0650970801897347}, {7000., 0.08295306739397347}, {8000., 
        0.0595988936473926}, {9000., 0.07288211990147829}, {10000., 
        0.06504031986308595}}]}, {}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotLabel->FormBox["\"Validation Error Rate List\"", TraditionalForm],
    PlotRange->{{0, 10000.}, {0, 0.12059382661684746`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{3.740228038469507*^9, 3.740228068825748*^9, 
  3.740228865169642*^9, 3.740266648165082*^9},
 CellLabel->
  "Out[112]=",ExpressionUUID->"0378883f-9f27-4c5c-9693-921c5898272a"]
}, Open  ]],

Cell["Loss evolution plot:", "CodeText",
 CellChangeTimes->{{3.740266740351007*^9, 
  3.7402667493431177`*^9}},ExpressionUUID->"75295186-4ea5-4322-94be-\
84bb892bd611"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"finalTrainedNet", "[", "\"\<LossEvolutionPlot\>\"", "]"}]], "Input",\

 CellLabel->"In[53]:=",ExpressionUUID->"9783031e-457c-47b8-be72-3b21e1fa515f"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{
     AbsoluteThickness[1.25], {{
       InsetBox[
        FormBox["1", TraditionalForm], 
        Offset[{-2, 0}, {1000, 0.05}], {1., 1.}], 
       InsetBox[
        FormBox["2", TraditionalForm], 
        Offset[{-2, 0}, {2000, 0.05}], {1., 1.}], 
       InsetBox[
        FormBox["3", TraditionalForm], 
        Offset[{-2, 0}, {3000, 0.05}], {1., 1.}], 
       InsetBox[
        FormBox["4", TraditionalForm], 
        Offset[{-2, 0}, {4000, 0.05}], {1., 1.}], 
       InsetBox[
        FormBox["5", TraditionalForm], 
        Offset[{-2, 0}, {5000, 0.05}], {1., 1.}], 
       InsetBox[
        FormBox["6", TraditionalForm], 
        Offset[{-2, 0}, {6000, 0.05}], {1., 1.}], 
       InsetBox[
        FormBox["7", TraditionalForm], 
        Offset[{-2, 0}, {7000, 0.05}], {1., 1.}], 
       InsetBox[
        FormBox["8", TraditionalForm], 
        Offset[{-2, 0}, {8000, 0.05}], {1., 1.}], 
       InsetBox[
        FormBox["9", TraditionalForm], 
        Offset[{-2, 0}, {9000, 0.05}], {1., 1.}], 
       InsetBox[
        FormBox["10", TraditionalForm], 
        Offset[{-2, 0}, {10000, 0.05}], {1., 1.}]}, {
       InsetBox[
        FormBox[
         TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
          SuperscriptBox], TraditionalForm], 
        Offset[{3, 0}, {0, -1.}], {-1, -1.}]}}, {{
       Hue[0.083, 1., 1.], 
       LineBox[CompressedData["
1:eJw1lQs41Pkax9NWaja1dJMOJ5HLFlapsNF3i611liNkWyFbLVltE7XsM6Kp
qNlSIpem3AYx7jLGMJj5z4hWSTeyWlROq0KaYnXZPTqd/b87zzPPPJ/n+77f
7/v+/pcx3sH1+nbypEmT+t5////714e/Ghd6ucOuF5qUf/EDT9Td9dlaXnSP
5cX+SPiHvVG5upflyp1Q3fzUOFr5gGXPUPCMvKOFffdZ1uzFAX9zC+drD1ne
FIHqn9qEJTeI9X+An82BLXdvU/+TKJimpD88YUZ6LQ8rA1ptXDz6WRbEwL3W
SDPzI+LlfPBb19bt/IDqUw7ju8Al5qv7if88gieJ+w+rSn9jeVccpH3856/b
SW+Lx9d390ydc5/y7Y7DtnWwbJWM9AwB4nQdmqcnU96UE3CI5L22TnvE8p6T
WDo11sjKnrgjAcLeU3Wuc6l+7WlsFvr0Z68nzk+EUV9/4LpvyP/YGcSXddQ8
49N8jknYoG36ql/yH5ZHkrBQ0e27/BXpuckw5i26IsimPN+zcHQWT8zdTcxJ
QaQsyiqAO8CyIgWeTpilGSU9IhUh7hGc0Gvkb5aGuPAYYaIP+d9Lw7JgrYjm
3cSn0zGUqmWdrEO8/hyereEsFo6T//g56HnoidQfkH+xEEM6i7OEIaQHnser
Au6Ci0pivQt4FfH297Mc4pYLCFRfyzh7mvp5GdiQaL8x5gblWWdizC1BkB1C
3J+JW95rTcUfUn1aFkq9piSZ5z1m2S0bB3VyEn/IpfqJbEza1Lw7/qOnLH+d
g+xzm401v5IuyUHlYIR2SBH56Yhw3KQ39rNU8gsRwelPZu8NH2KVCDliraDR
FupflIu+Jb7d6SNPWP4hF5v56W8LWqn+Ri4eRvyysPcI7WuZh2Bz0b/mlRMf
zcNWq/QTWabEvXkQcA81ZGoNsrwmH7v2vKpOM6f5k/JRXeAxLTmU/IfyMW27
s4P1Ecp3vYjyfZoZJSHE2RdR4/THZmUc8ZuL4L1c4Rd9gfb1LsCdVr2kkUzy
KytA72ML5JfRPNqFcB6sc71uRvo3hShVWaefmk56fSEqOWLdRi+ab54YYfvN
vxjgEnPF+HLOspadjym/VYzEfe7iASvaz6QIFrfcfGdtIb+YIlzZt3Wa7zmq
7yrCnuDi7kdzKd+2GOP6cQk/DhGfLIZsWc+C5A6q/60YVc6u4hkxlL+uBAGi
8cNlV2lfYQleygyKVikob7QE3i8qDphkE7uX4vQnYtN331N/YSm+Svni1e5Y
8tcqw/J8Tb/dT6RvKwMi13RPVdE80jKkXU3WbLai+tnlyEr+N8yukB5ajsTO
+dqlM0lvKsdgVbzB58dJN6wAuo9Psomk5zOqAp4XAodD+mi+WxV4kHXVR6Bh
6/nzKtFuavD5jiesH399JWKlH2g5PGX7+dxKzDkaXTumYOflZ1Si93xOKn8B
68dvrURg3R+es3upf7wSl/2DTF9YsNeHb3IJzS9GL2pzqN/zEo4rI9t2yKg+
5hI8cyRHzouovvgS5IY7XB5dIf+u9/wstXPBMPVPqYJglehORCDptlWI5Ny0
t7ElDqzCgacqm3UM7XeyCtethGGyHMqrrUJqOne+5O/+36rQYrVGE+hO9XoS
DCe8rTj6jvR1EhxvHv4qTY/y90ggPnze4FoN1QslMNzY08yMkt4iwdfFspET
BbTPqAS3vThHLXuIF1dj/6dPRaF0//HdqzGxTri0hd4PfF41puLh4JR5VF9Y
jW22d+UcG+KOarQGRejGhgyxrCXFWNs73a6llG8txYp3vyZZxJC+TYrvCnb2
85KHWRZIsXBy8NnqGVQvlcK8efB7vgl7f/P7pXCSn/S2m8K+n/izaxCg+LhQ
Nkq8tgbTzaJf53hQf2gNHP/rmOymR+ebVoOelCcDO1Jp3qYaHHQb7PrcnlhT
A4u8+TqOFlRvKEPOzC750i2ku8kwZtbZ3p5J5x8lw+UNnqsPX6S8fBnat5e4
TnUlviXDGsco3/x55DchQ67xmEC3lPZfVovPkvaG2sRS/dZanLaen/BogOrj
a5HxIOldJofOp6oW7V3cqFBL4vu1uKRjH5VZT/Uz69C1wOWOMpqul8N7Lnt0
zI7+L/nBdVhlFK7Y9CHln63D6ZuJJvcMaD+mDh6pL8tWH6N5ntXhrn7Yohd7
STeQwz7Fj3eslvSNcmy6nRw8y5v4gByc1+aLHXbTPCI5ouKNMpb6kt4ux3LN
Z073e8nvDzmClpXZ1dL/Ed+iHsNpKU9vulH9lnpkbbcJ0uWQ35F6JKtFRp0b
Sa+oh4V1YvVIEfn11CPF7eAZTRjxjAZ4VZ/Syfmd+lc34NvAVSubJlP/zgac
eOkV8KaKzuNMAw60hhfqrCRubMDLf7okX/ek8x5sgOQr659vVpL/gkY0LTy/
e30g6S6N+FJ14vIXPuQf3oiD8hd34keoPqsRrl1WI7l2xNca4fPrc8ueK5T3
uhET9iG4Kn7G8lIFviz40DltBbGXAiEGWifjb1P/IQXqZqfq8/+ep1SBXZ3D
sa66xN0KOHfPe16SQfNMU8KjZnWqnxvNu1KJ2wO2Y/qddD5BShRHuCw3ciX9
lBLXw2rn/OxH+XIlWi31A8Pj6Hl8rIRGdJhrxGf9wWFgpC0cr3nMMrOYgUvG
Noa7np0HaxgcHVsuiO5k92XcGbzWkn9n4cr6YxeD53lu7huWkM5joCldctSY
3v9IYrB9dHrMXBPWjylk8OMdY2FeGPUrGMw9VDL21omdn+lgcPlUvn62P8sY
YmCsZj7pFpG/lgoze7pmKA6Rrq9CizzX1JDuJ8Zahf3beRUtupTvqsLzIU1A
+H2WmW0q+Pfv838UxvohQoWPJ09YnaHnixGoIJY67285x97fyFZhts2sAGEc
6VIVdGe8XLWimfLbVMjINSvmRVJ+vwqW8+uFv/xO+hsVwu39dkwtJ322Gkz9
kJOWP+WbqRFUxfQ5Sch/rRptz4qD7qSQ7q1Gy6KCBL1m0kPVGArouGU3QP58
NYyWtVtu8aD90tSQzveXB9vQ/mVqCO77ResUsO8TpkmNaQPKaaHx1H9PDY+M
5/E6uTSfRo0fP+oWfbuJdO0mOPpFj+ftp3zDJrTzbSUdbjSfXRMqeBZ5qQ2k
uzVh5GHb5TcC6v+mCecQMokrpOsb1QSHCbXAsPGx8n8PFH/z
        "]]}, {}}, {{
       Hue[0.59, 0.5, 0.9], 
       LineBox[{{1000, -0.5553833411280915}, {2000, -0.708016051890277}, {
         3000, -0.6937240465876829}, {4000, -0.6769618081787268}, {
         5000, -0.7693556327335125}, {6000, -0.7776301899466475}, {
         7000, -0.650559562407027}, {8000, -0.8072848206472791}, {
         9000, -0.7632321128855863}, {10000, -0.7799812458178119}}]}, {
       AbsolutePointSize[3.5], 
       Hue[0.59, 0.5, 0.76], 
       PointBox[{{1000, -0.5553833411280915}, {2000, -0.708016051890277}, {
         3000, -0.6937240465876829}, {4000, -0.6769618081787268}, {
         5000, -0.7693556327335125}, {6000, -0.7776301899466475}, {
         7000, -0.650559562407027}, {8000, -0.8072848206472791}, {
         9000, -0.7632321128855863}, {10000, -0.7799812458178119}}]}}}, 
    ImageSize -> {471, 201}, Frame -> True, Axes -> None, AspectRatio -> Full,
     BaseStyle -> {
     FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
      ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6}, 
    PlotRange -> {{0, 9990}, {-1., 0.}}, 
    GridLines -> {{1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 
      10000}, {{-1., 
        GrayLevel[0.3001]}, {-0.6989700043360187, 
        GrayLevel[0.8501]}, {-0.5228787452803375, 
        GrayLevel[0.8501]}, {-0.39794000867203755`, 
        GrayLevel[0.8501]}, {-0.30102999566398114`, 
        GrayLevel[0.8501]}, {-0.22184874961635626`, 
        GrayLevel[0.8501]}, {-0.1549019599857432, 
        GrayLevel[0.8501]}, {-0.09691001300805638, 
        GrayLevel[0.8501]}, {-0.04575749056067506, 
        GrayLevel[0.8501]}}}, PlotRangePadding -> {0, 
      Scaled[0.05]}, PlotRangeClipping -> True, Background -> GrayLevel[1], 
    FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
       FormBox["\"loss\"", TraditionalForm], None}, {None, 
       FormBox["\"rounds\"", TraditionalForm]}}, 
    ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None],FormBox[
    FormBox[
     TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.59, 0.5, 0.9], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> Hue[0.59, 0.5, 0.6000000000000001], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"Hue", "[", 
                    RowBox[{"0.59`", ",", "0.5`", ",", "0.9`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.59, 0.5, 0.9]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                Hue[0.59, 0.5, 0.9], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.083, 1., 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> Hue[0.083, 1., 0.6666666666666667], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"Hue", "[", 
                    RowBox[{"0.083`", ",", "1.`", ",", "1.`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.083, 1., 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                Hue[0.083, 1., 1.], Editable -> False, Selectable -> False]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.7402281468100567`*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"9d84ef32-7fbd-43a2-80fd-5b182bbd5a49"]
}, Open  ]],

Cell["Error rate evolution plot:", "CodeText",
 CellChangeTimes->{{3.740266755020146*^9, 
  3.74026676268007*^9}},ExpressionUUID->"46e952c4-3723-4461-9f6d-\
dedb8333e130"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"finalTrainedNet", "[", "\"\<ErrorRateEvolutionPlot\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.740228160043996*^9, 3.7402281688995447`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"1f24cbd2-b345-465d-8de0-b5061689a204"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{
     AbsoluteThickness[1.25], {{
       InsetBox[
        FormBox["1", TraditionalForm], 
        Offset[{-2, 0}, {1000, 0.18186796725480955`}], {1., 1.}], 
       InsetBox[
        FormBox["2", TraditionalForm], 
        Offset[{-2, 0}, {2000, 0.18186796725480955`}], {1., 1.}], 
       InsetBox[
        FormBox["3", TraditionalForm], 
        Offset[{-2, 0}, {3000, 0.18186796725480955`}], {1., 1.}], 
       InsetBox[
        FormBox["4", TraditionalForm], 
        Offset[{-2, 0}, {4000, 0.18186796725480955`}], {1., 1.}], 
       InsetBox[
        FormBox["5", TraditionalForm], 
        Offset[{-2, 0}, {5000, 0.18186796725480955`}], {1., 1.}], 
       InsetBox[
        FormBox["6", TraditionalForm], 
        Offset[{-2, 0}, {6000, 0.18186796725480955`}], {1., 1.}], 
       InsetBox[
        FormBox["7", TraditionalForm], 
        Offset[{-2, 0}, {7000, 0.18186796725480955`}], {1., 1.}], 
       InsetBox[
        FormBox["8", TraditionalForm], 
        Offset[{-2, 0}, {8000, 0.18186796725480955`}], {1., 1.}], 
       InsetBox[
        FormBox["9", TraditionalForm], 
        Offset[{-2, 0}, {9000, 0.18186796725480955`}], {1., 1.}], 
       InsetBox[
        FormBox["10", TraditionalForm], 
        Offset[{-2, 0}, {10000, 0.18186796725480955`}], {1., 1.}]}, {
       InsetBox[
        FormBox["\"5%\"", TraditionalForm], 
        Offset[{4, -1}, {0, 0.05}], {-1, -1.}], 
       InsetBox[
        FormBox["\"10%\"", TraditionalForm], 
        Offset[{4, -1}, {0, 0.1}], {-1, -1.}], 
       InsetBox[
        FormBox["\"15%\"", TraditionalForm], 
        Offset[{4, -1}, {0, 0.15}], {-1, -1.}], 
       InsetBox[
        FormBox["\"20%\"", TraditionalForm], 
        Offset[{4, -1}, {0, 0.2}], {-1, -1.}], 
       InsetBox[
        FormBox["\"25%\"", TraditionalForm], 
        Offset[{4, -1}, {0, 0.25}], {-1, -1.}], 
       InsetBox[
        FormBox["\"30%\"", TraditionalForm], 
        Offset[{4, -1}, {0, 0.3}], {-1, -1.}], 
       InsetBox[
        FormBox["\"35%\"", TraditionalForm], 
        Offset[{4, -1}, {0, 0.35000000000000003`}], {-1, -1.}], 
       InsetBox[
        FormBox["\"40%\"", TraditionalForm], 
        Offset[{4, -1}, {0, 0.4}], {-1, -1.}]}}, {{
       Hue[0.083, 1., 1.], 
       LineBox[CompressedData["
1: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
        "]]}, {}}, {{
       Hue[0.59, 0.5, 0.9], 
       LineBox[{{1000, 0.12059382661684746`}, {2000, 0.07799667995112639}, {
         3000, 0.08584164020294945}, {4000, 0.08610141315497459}, {
         5000, 0.06657870611796776}, {6000, 0.0650970801897347}, {
         7000, 0.08295306739397347}, {8000, 0.0595988936473926}, {
         9000, 0.07288211990147829}, {10000, 0.06504031986308595}}]}, {
       AbsolutePointSize[3.5], 
       Hue[0.59, 0.5, 0.76], 
       PointBox[{{1000, 0.12059382661684746`}, {2000, 0.07799667995112639}, {
         3000, 0.08584164020294945}, {4000, 0.08610141315497459}, {
         5000, 0.06657870611796776}, {6000, 0.0650970801897347}, {
         7000, 0.08295306739397347}, {8000, 0.0595988936473926}, {
         9000, 0.07288211990147829}, {10000, 0.06504031986308595}}]}}}, 
    ImageSize -> {471, 201}, Frame -> True, Axes -> None, AspectRatio -> Full,
     BaseStyle -> {
     FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
      ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6}, 
    PlotRange -> {{0, 9990}, {0, 0.18186796725480955`}}, 
    GridLines -> {{1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 
      10000}, {{0.01, 
        GrayLevel[0.8501]}, {0.02, 
        GrayLevel[0.8501]}, {0.03, 
        GrayLevel[0.8501]}, {0.04, 
        GrayLevel[0.8501]}, {0.06, 
        GrayLevel[0.8501]}, {0.07, 
        GrayLevel[0.8501]}, {0.08, 
        GrayLevel[0.8501]}, {0.09, 
        GrayLevel[0.8501]}, {0.11, 
        GrayLevel[0.8501]}, {0.12, 
        GrayLevel[0.8501]}, {0.13, 
        GrayLevel[0.8501]}, {0.14, 
        GrayLevel[0.8501]}, {0.16, 
        GrayLevel[0.8501]}, {0.17, 
        GrayLevel[0.8501]}, {0.18, 
        GrayLevel[0.8501]}, {0.19, 
        GrayLevel[0.8501]}, {0.21, 
        GrayLevel[0.8501]}, {0.22, 
        GrayLevel[0.8501]}, {0.23, 
        GrayLevel[0.8501]}, {0.24, 
        GrayLevel[0.8501]}, {0.26, 
        GrayLevel[0.8501]}, {0.27, 
        GrayLevel[0.8501]}, {0.28, 
        GrayLevel[0.8501]}, {0.29, 
        GrayLevel[0.8501]}, {0.31, 
        GrayLevel[0.8501]}, {0.32, 
        GrayLevel[0.8501]}, {0.33, 
        GrayLevel[0.8501]}, {0.34, 
        GrayLevel[0.8501]}, {0.36, 
        GrayLevel[0.8501]}, {0.37, 
        GrayLevel[0.8501]}, {0.38, 
        GrayLevel[0.8501]}, {0.39, 
        GrayLevel[0.8501]}, {0.05, 
        GrayLevel[0.3001]}, {0.1, 
        GrayLevel[0.3001]}, {0.15, 
        GrayLevel[0.3001]}, {0.2, 
        GrayLevel[0.3001]}, {0.25, 
        GrayLevel[0.3001]}, {0.3, 
        GrayLevel[0.3001]}, {0.35000000000000003`, 
        GrayLevel[0.3001]}, {0.4, 
        GrayLevel[0.3001]}}}, PlotRangePadding -> {{0, 0}, {
       Scaled[0.01], 0}}, PlotRangeClipping -> True, Background -> 
    GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
       FormBox["\"error rate\"", TraditionalForm], None}, {None, 
       FormBox["\"rounds\"", TraditionalForm]}}, 
    ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None],FormBox[
    FormBox[
     TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.59, 0.5, 0.9], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> Hue[0.59, 0.5, 0.6000000000000001], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"Hue", "[", 
                    RowBox[{"0.59`", ",", "0.5`", ",", "0.9`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.59, 0.5, 0.9]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                Hue[0.59, 0.5, 0.9], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.083, 1., 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> Hue[0.083, 1., 0.6666666666666667], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"Hue", "[", 
                    RowBox[{"0.083`", ",", "1.`", ",", "1.`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.083, 1., 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                Hue[0.083, 1., 1.], Editable -> False, Selectable -> False]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.740228169418496*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"e55f7e73-8690-444d-9ac6-186803e34a95"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "@", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"\"\<Properties\>\"", ",", 
         RowBox[{"FontSize", "\[Rule]", " ", "18"}]}], "]"}], ",", 
       "\"\<FinalRoundLoss\>\"", ",", "\"\<FinalRoundErrorRate\>\"", ",", 
       "\"\<FinalValidationLoss\>\"", ",", "\"\<FinalValidationErrorRate\>\"",
        ",", "\"\<LowestValidationLoss\>\"", ",", 
       "\"\<LowestValidationErrorRate\>\"", ",", "\"\<BatchSize\>\"", ",", 
       "\"\<TotalRounds\>\"", ",", "\"\<TotalBatches\>\"", ",", 
       "\"\<TotalInputs\>\"", ",", "\"\<TotalTrainingTime\>\"", ",", 
       "\"\<MeanBatchesPerSecond\>\"", ",", "\"\<MeanInputsPerSecond\>\"", 
       ",", "\"\<InitialLearningRate\>\"", ",", "\"\<FinalLearningRate\>\"", 
       ",", "\"\<OptimizationMethod\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"\"\<Values\>\"", ",", 
         RowBox[{"FontSize", "\[Rule]", " ", "18"}]}], "]"}], ",", 
       RowBox[{"finalTrainedNet", "[", "\"\<FinalRoundLoss\>\"", "]"}], ",", 
       RowBox[{"finalTrainedNet", "[", "\"\<FinalRoundErrorRate\>\"", "]"}], 
       ",", 
       RowBox[{"finalTrainedNet", "[", "\"\<FinalValidationLoss\>\"", "]"}], 
       ",", 
       RowBox[{
       "finalTrainedNet", "[", "\"\<FinalValidationErrorRate\>\"", "]"}], ",", 
       RowBox[{"finalTrainedNet", "[", "\"\<LowestValidationLoss\>\"", "]"}], 
       ",", 
       RowBox[{
       "finalTrainedNet", "[", "\"\<LowestValidationErrorRate\>\"", "]"}], 
       ",", 
       RowBox[{"finalTrainedNet", "[", "\"\<BatchSize\>\"", "]"}], ",", 
       RowBox[{"finalTrainedNet", "[", "\"\<TotalRounds\>\"", "]"}], ",", 
       RowBox[{"finalTrainedNet", "[", "\"\<TotalBatches\>\"", "]"}], ",", 
       RowBox[{"finalTrainedNet", "[", "\"\<TotalInputs\>\"", "]"}], ",", 
       RowBox[{"UnitConvert", "[", 
        RowBox[{
         RowBox[{"Quantity", "[", 
          RowBox[{
           RowBox[{"finalTrainedNet", "[", "\"\<TotalTrainingTime\>\"", "]"}],
            ",", "\"\<Seconds\>\""}], "]"}], ",", "\"\<Hours\>\""}], "]"}], 
       ",", 
       RowBox[{"finalTrainedNet", "[", "\"\<MeanBatchesPerSecond\>\"", "]"}], 
       ",", 
       RowBox[{"finalTrainedNet", "[", "\"\<MeanInputsPerSecond\>\"", "]"}], 
       ",", 
       RowBox[{"finalTrainedNet", "[", "\"\<InitialLearningRate\>\"", "]"}], 
       ",", 
       RowBox[{"finalTrainedNet", "[", "\"\<FinalLearningRate\>\"", "]"}], 
       ",", 
       RowBox[{"finalTrainedNet", "[", "\"\<OptimizationMethod\>\"", "]"}]}], 
      "}"}]}], "}"}]}], "//", "Dataset"}]], "Input",
 CellChangeTimes->{{3.740228187191751*^9, 3.740228196565256*^9}, {
  3.740228908369596*^9, 3.740228942833631*^9}, {3.740229380557478*^9, 
  3.740229398634232*^9}, {3.740229436188182*^9, 3.740229590562398*^9}, {
  3.7402296206691227`*^9, 3.740229666855385*^9}, {3.740229734608506*^9, 
  3.740229748634671*^9}, {3.740229780664337*^9, 3.740229912337343*^9}, {
  3.740229993629879*^9, 3.7402300050255547`*^9}, {3.74025297483259*^9, 
  3.740253006918106*^9}, {3.740253123241002*^9, 3.740253159460827*^9}, {
  3.740266770059379*^9, 3.7402667763942823`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"c4311d91-6c61-4b98-b85f-c15478faa14d"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 17, "Length" -> 17, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Vector[TypeSystem`AnyType, 2], 17], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`MatrixShape[17, 2], 17, {All}], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[991176766], 
        "Type" -> TypeSystem`Vector[
          TypeSystem`Vector[TypeSystem`AnyType, 2], 17], "HandleQ" -> True, 
        "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[991176766]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Pane[
                Annotation[
                 Style["Properties", FontSize -> 18], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[1, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Style["Values", FontSize -> 18], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[1, 2]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FinalRoundLoss", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[2, 1]], "Mouse"], 
                ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.143521"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[2, 2]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FinalRoundErrorRate", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[3, 1]], "Mouse"], 
                ImageSize -> {{182.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.0556253"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[3, 2]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FinalValidationLoss", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[4, 1]], "Mouse"], 
                ImageSize -> {{182.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.165966"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[4, 2]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FinalValidationErrorRate", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[5, 1]], "Mouse"], 
                ImageSize -> {{230.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.0650403"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[5, 2]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["LowestValidationLoss", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[6, 1]], "Mouse"], 
                ImageSize -> {{192.00000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.155853"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[6, 2]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["LowestValidationErrorRate", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[7, 1]], "Mouse"], 
                ImageSize -> {{240.00000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.0595989"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[7, 2]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["BatchSize", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[8, 1]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[8, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["TotalRounds", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[9, 1]], "Mouse"], 
                ImageSize -> {{105.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["10"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[9, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["TotalBatches", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[10, 1]], "Mouse"], 
                ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["10000"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[10, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["TotalInputs", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[11, 1]], "Mouse"], 
                ImageSize -> {{105.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["30000"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[11, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["TotalTrainingTime", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[12, 1]], "Mouse"], 
                ImageSize -> {{163.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"15.994085529722224`", "\"h\""}], FontColor -> 
                   RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[12, 2]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["MeanBatchesPerSecond", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[13, 1]], "Mouse"], 
                ImageSize -> {{192.00000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.173675"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[13, 2]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["MeanInputsPerSecond", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[14, 1]], "Mouse"], 
                ImageSize -> {{182.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.521026"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[14, 2]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["InitialLearningRate", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[15, 1]], "Mouse"], 
                ImageSize -> {{182.40000000000003`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.001"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[15, 2]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FinalLearningRate", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[16, 1]], "Mouse"], 
                ImageSize -> {{163.20000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.000999977"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[16, 2]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["OptimizationMethod", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[17, 1]], "Mouse"], 
                ImageSize -> {{172.8, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["ADAM", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
                  GeneralUtilities`Slice[17, 2]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2105947646][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2105947646]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2105947646][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {342., {219.634033203125, 225.365966796875}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{
  3.74022819691437*^9, {3.7402289120199633`*^9, 3.7402289432796297`*^9}, 
   3.7402293901460457`*^9, {3.740229443443001*^9, 3.740229590986732*^9}, {
   3.7402296336804953`*^9, 3.7402296547581797`*^9}, 3.740229749641614*^9, {
   3.740229793766301*^9, 3.740229852024106*^9}, {3.740229892679132*^9, 
   3.7402299127090282`*^9}, {3.740229997120871*^9, 3.740230005510417*^9}, 
   3.740252987421076*^9, {3.740253145002372*^9, 3.740253159955393*^9}, {
   3.740266772249557*^9, 3.74026677699737*^9}},
 CellLabel->
  "Out[114]=",ExpressionUUID->"11a9f7ab-00f8-4b7a-8ec6-bbc6b0d86896"]
}, {2}]],

Cell["Extract the trained net:", "CodeText",
 CellChangeTimes->{{3.740266891762395*^9, 
  3.740266912558598*^9}},ExpressionUUID->"880f7f4f-ceda-403c-a42f-\
a166e24a65e2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"finalTrainedNetEval", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{
    RowBox[{"finalTrainedNet", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
    "\"\<eval\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740175378464939*^9, 3.740175398978469*^9}, {
  3.7401928806434193`*^9, 3.740192882475292*^9}, {3.7402300616511383`*^9, 
  3.740230068802894*^9}, {3.740230174179743*^9, 3.740230185475808*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"86d1ff20-f818-4f24-9481-0459bb75857d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"500\"", 
                    "\"500\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"500\"", "\"500\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 3, "$InputSize" -> {500, 500}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "conv1a" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "conv1a"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus", "Outputs", "Output"]}], "2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2a_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Outputs", "Output"]}], "2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b1_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Outputs", "Output"]}], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b2_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3a_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b1_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Outputs", "Output"]}], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b2_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a_plus", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4a_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b1_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b2_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b3_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b3_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b3_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b4_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b4_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b4_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b5_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b5_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Outputs", "Output"]}], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b5_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b5_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a_plus", "Outputs", "Output"]}], "5b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5a_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Outputs", "Output"]}], "5b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b1_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Outputs", "Output"]}], "6a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b2_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn6a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.3, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "6a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a_plus", "Outputs", "Output"]}], "7a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "6a_plus" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn7a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "7a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "6a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a_plus", "Outputs", "Output"]}], "bn7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    4096, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 4096, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "conv1a"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Inputs", "2a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Inputs", "2b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Inputs", "2b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Inputs", "3a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Inputs", "3b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Inputs", "3b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Inputs", "4a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Inputs", "4b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Inputs", "4b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Inputs", "4b3_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Inputs", "4b4_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Inputs", "4b5_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Inputs", "5a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Inputs", "5b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Inputs", "5b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Inputs", "6a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{2}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Resize", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{500, 500}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "$Channels" -> 2, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "22", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ResizeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7401753171928596`*^9, {3.740175383270542*^9, 3.7401754019129543`*^9}, 
   3.740192883270273*^9, {3.740230176333651*^9, 3.7402301863405027`*^9}, 
   3.740252596295019*^9, 3.7402669221422358`*^9},
 CellLabel->
  "Out[115]=",ExpressionUUID->"a622e1d1-d4ce-493f-92b4-a5f662654511"]
}, Open  ]],

Cell["Set the encoder:", "CodeText",
 CellChangeTimes->{{3.740266916339209*^9, 
  3.7402669189314127`*^9}},ExpressionUUID->"662b9b0c-6e5a-4b43-9dc6-\
514c03d2e851"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"finalTrainedNetEvalEnc", "=", 
  RowBox[{"NetReplacePart", "[", 
   RowBox[{"finalTrainedNetEval", ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "enc"}]}], " ", "]"}]}]], "Input",
 CellChangeTimes->{
  3.740081863390181*^9, 3.740094333405757*^9, {3.7401754150234337`*^9, 
   3.740175417489655*^9}, {3.740192885181294*^9, 3.740192886676867*^9}, {
   3.74023019048417*^9, 3.740230204376842*^9}, {3.740252655521018*^9, 
   3.740252661329523*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"a7a202df-594d-43fd-aae7-4c37c7158af1"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"500\"", "\"500\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 3, "$InputSize" -> {500, 500}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "conv1a" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "conv1a"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus", "Outputs", "Output"]}], "2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2a_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Outputs", "Output"]}], "2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b1_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Outputs", "Output"]}], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b2_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3a_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b1_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Outputs", "Output"]}], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b2_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a_plus", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4a_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b1_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b2_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b3_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b3_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b3_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b4_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b4_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b4_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b5_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b5_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Outputs", "Output"]}], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b5_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b5_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a_plus", "Outputs", "Output"]}], "5b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5a_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Outputs", "Output"]}], "5b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b1_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Outputs", "Output"]}], "6a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b2_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn6a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.3, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "6a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a_plus", "Outputs", "Output"]}], "7a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "6a_plus" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn7a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "7a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "6a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a_plus", "Outputs", "Output"]}], "bn7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    4096, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 4096, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "conv1a"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Inputs", "2a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Inputs", "2b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Inputs", "2b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Inputs", "3a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Inputs", "3b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Inputs", "3b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Inputs", "4a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Inputs", "4b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Inputs", "4b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Inputs", "4b3_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Inputs", "4b4_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Inputs", "4b5_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Inputs", "5a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Inputs", "5b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Inputs", "5b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Inputs", "6a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{2}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Resize", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{500, 500}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "$Channels" -> 2, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {500, 500}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, "VarianceImage" -> 
                    None], 
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "22", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ResizeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox["\"\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7400858742815437`*^9, 3.740090055195977*^9, 3.740094334486903*^9, 
   3.740104921960452*^9, 3.740113672532484*^9, 3.740114324739716*^9, 
   3.740133146619397*^9, 3.74015196002283*^9, 3.740158447033702*^9, 
   3.740167947895197*^9, 3.7401754185486526`*^9, 3.740192887470496*^9, 
   3.740230205155298*^9, 3.740252602845715*^9, 3.7402531749440107`*^9, {
   3.7402669238868303`*^9, 3.7402669496823893`*^9}},
 CellLabel->
  "Out[119]=",ExpressionUUID->"9bab1508-be9d-46f5-9821-3c3ab2a2dd25"]
}, Open  ]],

Cell["Set the decoder:", "CodeText",
 CellChangeTimes->{{3.7402669537533693`*^9, 
  3.740266958526073*^9}},ExpressionUUID->"0ced2027-1286-4e65-8ccf-\
d96c45dbdd7b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"finalTrainedNetEvalDec", "=", 
  RowBox[{"NetReplacePart", "[", 
   RowBox[{"finalTrainedNetEvalEnc", ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "dec"}]}], " ", "]"}]}]], "Input",
 CellChangeTimes->{{3.7401754213749247`*^9, 3.7401754245979958`*^9}, {
  3.740175488866143*^9, 3.7401754896578407`*^9}, {3.740192889552498*^9, 
  3.7401928908429737`*^9}, {3.7402302091742268`*^9, 3.7402302119689627`*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"52d8adf6-e77b-423f-9804-fcc03c11c534"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 3, "$InputSize" -> {500, 500}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "conv1a" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "conv1a"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus", "Outputs", "Output"]}], "2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2a_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Outputs", "Output"]}], "2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b1_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Outputs", "Output"]}], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b2_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3a_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b1_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Outputs", "Output"]}], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b2_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a_plus", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4a_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b1_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b2_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b3_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b3_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b3_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b4_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b4_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b4_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b5_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b5_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Outputs", "Output"]}], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b5_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b5_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a_plus", "Outputs", "Output"]}], "5b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5a_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Outputs", "Output"]}], "5b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b1_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Outputs", "Output"]}], "6a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b2_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn6a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.3, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "6a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a_plus", "Outputs", "Output"]}], "7a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "6a_plus" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn7a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "7a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "6a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a_plus", "Outputs", "Output"]}], "bn7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    4096, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 4096, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "conv1a"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Inputs", "2a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Inputs", "2b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Inputs", "2b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Inputs", "3a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Inputs", "3b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Inputs", "3b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Inputs", "4a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Inputs", "4b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Inputs", "4b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Inputs", "4b3_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Inputs", "4b4_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Inputs", "4b5_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Inputs", "5a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Inputs", "5b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Inputs", "5b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Inputs", "6a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{2}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Resize", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{500, 500}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "$Channels" -> 2, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {500, 500}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, "VarianceImage" -> 
                    None], 
                    
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {0, 1}, "InputDepth" -> 3, "Dimensions" -> 2, 
                    "$Rank" -> 2], 
                    
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "22", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ResizeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox["\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740085884167886*^9, 3.740090056770214*^9, 
  3.740094335769924*^9, 3.740104923297072*^9, 3.740113702509366*^9, 
  3.7401143258483477`*^9, 3.740133148271043*^9, 3.740151961654234*^9, 
  3.740158448144875*^9, 3.740167951038425*^9, 3.740175425578092*^9, 
  3.74017549088295*^9, 3.740192891790915*^9, 3.740230213037594*^9, 
  3.7402531764238033`*^9, 3.740266960396728*^9},
 CellLabel->
  "Out[120]=",ExpressionUUID->"dde01553-8dc7-497f-a02e-aba08da81f2c"]
}, Open  ]],

Cell["Export the net to test:", "CodeText",
 CellChangeTimes->{{3.740266964789977*^9, 
  3.7402669723678303`*^9}},ExpressionUUID->"f6ff7bd2-ac5b-438b-853f-\
0344f02d2bf4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\</Volumes/ECG/ProjectWSS/AerialImageDataset/FinalTrainedNetEval.mx\>\"",
    ",", "finalTrainedNetEvalDec"}], "]"}]], "Input",
 CellChangeTimes->{{3.740168545962875*^9, 3.740168584870442*^9}, {
   3.740175430152635*^9, 3.740175455505168*^9}, 3.740192894268272*^9, {
   3.740230219194858*^9, 3.740230228876801*^9}, {3.7402531812590427`*^9, 
   3.740253181842587*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"3e9d4009-2339-496b-8283-0f254c5f5588"],

Cell[BoxData["\<\"/Volumes/ECG/ProjectWSS/AerialImageDataset/\
FinalTrainedNetEval.mx\"\>"], "Output",
 CellChangeTimes->{3.740168599349128*^9, 3.740175462881493*^9, 
  3.740175497143428*^9, 3.7401929032811813`*^9, 3.740230238350741*^9, 
  3.740253190432288*^9},
 CellLabel->
  "Out[119]=",ExpressionUUID->"63726151-977f-4f5c-8d2c-dd0796be586f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Net Evaluation", "Chapter",
 CellChangeTimes->{{3.740253209897274*^9, 
  3.740253213341403*^9}},ExpressionUUID->"90e6d9cb-7fa8-49f3-a496-\
a1229f22609c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netEvaluation", "=", 
  RowBox[{
  "Import", "[", 
   "\"\</Volumes/ECG/ProjectWSS/AerialImageDataset/FinalTrainedNetEval.mx\>\"\
", "]"}]}]], "Input",
 CellChangeTimes->{{3.740272158057695*^9, 3.740272170475225*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"22e59e20-f9f4-4740-87e8-6b6b6791ccc0"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 3, "$InputSize" -> {500, 500}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "conv1a" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 500, 500}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 64, 
                    "$InputSize" -> {500, 500}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "conv1a"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a_plus", "Outputs", "Output"]}], "2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2a_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1_plus", "Outputs", "Output"]}], "2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b1_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {250, 250}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "2b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2_plus", "Outputs", "Output"]}], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "2b2_plus" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 250, 250}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 128, 
                    "$InputSize" -> {250, 250}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 250, 250}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "2b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a_plus", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3a_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1_plus", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b1_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {125, 125}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "3b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2_plus", "Outputs", "Output"]}], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "3b2_plus" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 125, 125}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 256, 
                    "$InputSize" -> {125, 125}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 125, 125}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "3b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a_plus", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4a_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1_plus", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b1_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2_plus", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b2_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b3_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b3_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3_plus", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b3_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b4_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b4_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b3_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4_plus", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b4_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b5_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "4b5_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b4_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5_plus", "Outputs", "Output"]}], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "4b5_plus" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "4b5_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a_plus", "Outputs", "Output"]}], "5b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5a_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b1_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1_plus", "Outputs", "Output"]}], "5b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b1_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {2, 2}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "5b2_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b1_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2_plus", "Outputs", "Output"]}], "6a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "5b2_plus" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn6a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 512, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.3, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "6a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "5b2_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a_plus", "Outputs", "Output"]}], "7a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "6a_plus" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn7a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {4, 4}, "Dilation" -> {4, 4}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 1024, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 63, 63}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_do" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout"], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$GroupNumber" -> 1, "$InputChannels" -> 2048, 
                    "$InputSize" -> {63, 63}, "$OutputSize" -> {63, 63}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "7a_plus" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "6a_plus"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_do", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a_plus", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a_plus", "Outputs", "Output"]}], "bn7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    4096, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$GroupNumber" -> 1, 
                    "$InputChannels" -> 4096, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "conv6a_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "conv1a"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Inputs", "2a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Inputs", "2b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Inputs", "2b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Inputs", "3a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Inputs", "3b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Inputs", "3b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Inputs", "4a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Inputs", "4b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Inputs", "4b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Inputs", "4b3_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Inputs", "4b4_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Inputs", "4b5_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Inputs", "5a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Inputs", "5b1_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Inputs", "5b2_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Inputs", "6a_plus"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv6a_relu", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2, 512, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{2}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {12, 12}, 
                    "Dilation" -> {12, 12}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {63, 63}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Resize", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{500, 500}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "$Channels" -> 2, "$InputSize" -> {63, 63}, 
                    "$OutputSize" -> {500, 500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 63, 63}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Transpose", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    TwoWayRule[1, 3], 
                    TwoWayRule[1, 2]}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 500, 500}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {500, 500}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, "VarianceImage" -> 
                    None], 
                    
                    NeuralNetworks`TensorT[{3, 500, 500}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {0, 1}, "InputDepth" -> 3, "Dimensions" -> 2, 
                    "$Rank" -> 2], 
                    
                    NeuralNetworks`TensorT[{500, 500, 2}, 
                    NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "22", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"63\"", "\"63\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ResizeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", 
                    "\"500\"", "\"500\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\"", 
                    "\"500\"", "\"2\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox["\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7402721809031553`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"eeaee069-484e-42f1-8af4-ea7475ab320a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Files", "Subchapter",
 CellChangeTimes->{{3.740192174717615*^9, 3.740192178010922*^9}, 
   3.740266986200214*^9},ExpressionUUID->"007e0a2a-f02b-4cc4-b9ad-\
12c385bd4dd7"],

Cell["Take a random file from the training set:", "CodeText",
 CellChangeTimes->{{3.740267426755677*^9, 
  3.740267468709787*^9}},ExpressionUUID->"70c785ab-8337-4bee-a922-\
5dcc4ef474c0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"randomFile", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{
     "FileNames", "[", 
      "\"\</Volumes/ECG/ProjectWSS/AerialImageDataset/train/images/*.tif\>\"",
       "]"}], ",", "1"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestImage", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "randomFile", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestMask", "=", 
   RowBox[{"Import", "[", 
    RowBox[{"StringReplace", "[", 
     RowBox[{
      RowBox[{
      "randomFile", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
      ",", 
      RowBox[{"\"\<train/images/\>\"", "\[Rule]", "\"\<train/gt/\>\""}]}], 
     "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.740267128451765*^9, 3.740267131107504*^9}, {
  3.740267481772519*^9, 3.740267490096306*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"a9e21482-f804-480f-9371-ebafdcd25c7f"],

Cell["Take 100 partition of the image to feed into the net:", "CodeText",
 CellChangeTimes->{{3.740267637480259*^9, 
  3.740267687905109*^9}},ExpressionUUID->"2a62e09b-0f7d-427d-8e54-\
d8c08934113d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"imageToTest", "=", 
   RowBox[{"ImagePartition", "[", 
    RowBox[{"TestImage", ",", 
     RowBox[{"{", 
      RowBox[{"500", ",", "500"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"maskToTest", "=", 
   RowBox[{"ImagePartition", "[", 
    RowBox[{"TestMask", ",", 
     RowBox[{"{", 
      RowBox[{"500", ",", "500"}], "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.74019221118677*^9, 3.740192225991543*^9}, {
  3.740192290926613*^9, 3.740192323552926*^9}, {3.740267395800852*^9, 
  3.740267413656094*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"dcffbec6-24e9-4805-b45c-23b6fa99a8b9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"rand1", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "10"}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rand2", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "10"}], "}"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.740192567444817*^9, 3.740192605072834*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"84851593-fca4-4187-8632-37e7dd8fb173"],

Cell[BoxData[
 RowBox[{"ImageCompose", "[", 
  RowBox[{
   RowBox[{"imageToTest", "\[LeftDoubleBracket]", 
    RowBox[{"rand1", ",", "rand2"}], "\[RightDoubleBracket]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Image", "[", 
      RowBox[{"netEvaluation", "[", 
       RowBox[{"imageToTest", "\[LeftDoubleBracket]", 
        RowBox[{"rand1", ",", "rand2"}], "\[RightDoubleBracket]"}], "]"}], 
      "]"}], ",", "0.5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.74017555923033*^9, 3.740175618082994*^9}, {
   3.740189348414585*^9, 3.740189381484825*^9}, {3.7401894815327272`*^9, 
   3.7401894881104*^9}, {3.74019290379504*^9, 3.74019294197075*^9}, 
   3.740230248301661*^9, {3.740254411462594*^9, 3.7402544152484407`*^9}, {
   3.7402548816529217`*^9, 3.7402548913692923`*^9}, {3.7402550151961203`*^9, 
   3.740255043359281*^9}, {3.740255134262177*^9, 3.740255187476671*^9}, {
   3.740255281607813*^9, 3.740255290560882*^9}, {3.740269797427878*^9, 
   3.740269807742826*^9}, {3.7402700087872066`*^9, 3.740270008979704*^9}, 
   3.740272207542944*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"ddaf78ce-d5af-4a72-9775-b4eacb274288"],

Cell[BoxData[
 RowBox[{"ImageCompose", "[", 
  RowBox[{
   RowBox[{"maskToTest", "\[LeftDoubleBracket]", 
    RowBox[{"rand1", ",", "rand2"}], "\[RightDoubleBracket]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Image", "[", 
      RowBox[{"netEvaluation", "[", 
       RowBox[{"imageToTest", "\[LeftDoubleBracket]", 
        RowBox[{"rand1", ",", "rand2"}], "\[RightDoubleBracket]"}], "]"}], 
      "]"}], ",", "0.5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.74026771710958*^9, 3.7402677225201263`*^9}, {
  3.7402722653303623`*^9, 3.740272266096054*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"5bd8bca6-48bd-4149-a4d3-dcdebc4813b9"],

Cell["\<\
Compare the percentage of building in the area with the net and the mask:\
\>", "CodeText",
 CellChangeTimes->{{3.740268139362276*^9, 
  3.740268171196982*^9}},ExpressionUUID->"603f237f-2ec3-4404-8109-\
7613df97b9e7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<Net\>\"", ",", "\"\<Mask\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ImageMeasurements", "[", 
       RowBox[{
        RowBox[{"Image", "[", 
         RowBox[{"finalTrainedNetEvalDec", "[", 
          RowBox[{"imageToTest", "\[LeftDoubleBracket]", 
           RowBox[{"rand1", ",", "rand2"}], "\[RightDoubleBracket]"}], "]"}], 
         "]"}], ",", "\"\<Mean\>\""}], "]"}], ",", 
      RowBox[{"ImageMeasurements", "[", 
       RowBox[{
        RowBox[{"maskToTest", "\[LeftDoubleBracket]", 
         RowBox[{"rand1", ",", "rand2"}], "\[RightDoubleBracket]"}], ",", 
        "\"\<Mean\>\""}], "]"}]}], "}"}]}], "}"}], "//", "Dataset"}]], "Input",\

 CellChangeTimes->{{3.740267830605674*^9, 3.740267880283484*^9}},
 CellLabel->
  "In[166]:=",ExpressionUUID->"d8cd6553-db2c-4dcb-9084-ae773e497111"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 2, "Length" -> 2, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Vector[TypeSystem`AnyType, 2], 2], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`MatrixShape[2, 2], 2, {All}], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1122003332], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Vector[TypeSystem`AnyType, 2], 2], "HandleQ" -> True, 
        "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[1122003332]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Pane[
                Annotation["Net", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[805444279][
                 
                  GeneralUtilities`Slice[1, 1]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Mask", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[805444279][
                 
                  GeneralUtilities`Slice[1, 2]], "Mouse"], 
                ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes["0.3264"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[805444279][
                 
                  GeneralUtilities`Slice[2, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.308036"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[805444279][
                 
                  GeneralUtilities`Slice[2, 2]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 805444279][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 805444279]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[805444279][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[805444279][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {140., {30.134033203125, 35.865966796875}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{{3.74026788569795*^9, 3.740267906249789*^9}},
 CellLabel->
  "Out[166]=",ExpressionUUID->"f168187e-3bda-49e2-b4d5-dd51a8244d8c"]
}, {2}]]
}, Open  ]],

Cell[CellGroupData[{

Cell["GeoImage", "Subchapter",
 CellChangeTimes->{{3.740181787411449*^9, 
  3.740181792129816*^9}},ExpressionUUID->"cfb8b55d-f995-45b4-b690-\
279f16aacada"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testImage", "[", 
   RowBox[{"latitud_", ",", "longitud_", ",", "net_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"geoImage", ",", "geoImageResize"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"geoImage", "=", 
      RowBox[{"GeoImage", "[", 
       RowBox[{
        RowBox[{"GeoPosition", "[", 
         RowBox[{"{", 
          RowBox[{"latitud", ",", "longitud"}], "}"}], "]"}], ",", 
        RowBox[{"GeoRange", "\[Rule]", 
         TemplateBox[{"75","\"m\"","meters","\"Meters\""},
          "Quantity"]}], 
        StyleBox[",",
         ShowSpecialCharacters->False,
         ShowStringCharacters->True,
         NumberMarks->True], 
        RowBox[{"GeoProjection", "\[Rule]", "\"\<Mercator\>\""}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Small"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"geoImageResize", "=", 
      RowBox[{"ImageResize", "[", 
       RowBox[{"geoImage", ",", 
        RowBox[{"{", 
         RowBox[{"500", ",", "500"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ImageCompose", "[", 
        RowBox[{"geoImageResize", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Image", "[", 
            RowBox[{"net", "[", "geoImageResize", "]"}], "]"}], ",", "0.3"}], 
          "}"}]}], "]"}], "\[IndentingNewLine]", ",", 
       RowBox[{"Image", "[", 
        RowBox[{"net", "[", "geoImageResize", "]"}], "]"}]}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740253482586925*^9, 3.740253508907281*^9}, {
  3.7402535629134073`*^9, 3.7402536702306004`*^9}, {3.740254011831478*^9, 
  3.740254017292673*^9}, {3.740254061945719*^9, 3.740254082384534*^9}, {
  3.74025434488437*^9, 
  3.74025434792596*^9}},ExpressionUUID->"cf7c1d3d-b432-4fd8-a201-\
f3c70336cc61"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GeoPosition", "[", 
  TemplateBox[{"\"San Luis Potosi\"",RowBox[{"Entity", "[", 
      RowBox[{"\"City\"", ",", 
        RowBox[{"{", 
          
          RowBox[{"\"SanLuisPotosi\"", ",", "\"SanLuisPotosi\"", ",", 
            "\"Mexico\""}], "}"}]}], "]"}],
    "\"Entity[\\\"City\\\", {\\\"SanLuisPotosi\\\", \\\"SanLuisPotosi\\\", \\\
\"Mexico\\\"}]\"","\"city\""},
   "Entity"], "]"}]], "Input",
 CellChangeTimes->{{3.7402538642655573`*^9, 3.740253881351988*^9}},
 CellLabel->
  "In[143]:=",ExpressionUUID->"d033d245-8176-4f2b-a1c4-8ba78965ffc9"],

Cell[BoxData[
 RowBox[{"GeoPosition", "[", 
  RowBox[{"{", 
   RowBox[{"22.16`", ",", 
    RowBox[{"-", "100.98`"}]}], "}"}], "]"}]], "Output",
 CellChangeTimes->{{3.740253871010182*^9, 3.740253881751823*^9}},
 CellLabel->
  "Out[143]=",ExpressionUUID->"a476c2a6-a656-4aad-a893-4515bb1aab3a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"testImage", "[", 
    RowBox[{
     RowBox[{"22.16", "+", "u"}], ",", 
     RowBox[{
      RowBox[{"-", "100.98"}], "+", "u"}], ",", "finalTrainedNetEvalDec"}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"u", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "10"}], ",", 
       RowBox[{"-", "10"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "10"}], "}"}]}], "}"}], ",", 
   RowBox[{"ControlType", "\[Rule]", "Slider2D"}], ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.740254161880205*^9, 3.740254185281169*^9}},
 CellLabel->
  "In[151]:=",ExpressionUUID->"07c8373b-2cdb-4261-b885-b58753e4c490"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`u$$ = {-10, -10}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`u$$], {-10, -10}, {10, 10}}}, Typeset`size$$ = {
    342.30000019073486`, {24.548934936523438`, 12.791915893554688`}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`u$86895$$ = {0, 0}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`u$$ = {-10, -10}}, 
      "ControllerVariables" :> {
        Hold[$CellContext`u$$, $CellContext`u$86895$$, {0, 0}]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> $CellContext`testImage[
       22.16 + $CellContext`u$$, -100.98 + $CellContext`u$$, \
$CellContext`finalTrainedNetEvalDec], 
      "Specifications" :> {{$CellContext`u$$, {-10, -10}, {10, 10}}}, 
      "Options" :> {ControlType -> Slider2D, ControlPlacement -> Left}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{666., {58., 63.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.7402542022059717`*^9, 3.740254711082049*^9},
 CellLabel->
  "Out[151]=",ExpressionUUID->"b6954b98-89a1-4a19-bb1e-97921577c4fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ImageMeasurements", "[", 
  RowBox[{
   RowBox[{"Image", "[", 
    RowBox[{"finalTrainedNetEvalDec", "[", 
     RowBox[{"imageToTest", "\[LeftDoubleBracket]", 
      RowBox[{"rand1", ",", "rand2"}], "\[RightDoubleBracket]"}], "]"}], 
    "]"}], ",", "\"\<Mean\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.74017799634739*^9, 3.7401780012461653`*^9}, {
  3.7402543559454517`*^9, 3.740254402956894*^9}},
 CellLabel->
  "In[149]:=",ExpressionUUID->"eb4d60e3-5ad6-4ab0-ac64-e4e01268c24d"],

Cell[BoxData["0.138952`"], "Output",
 CellChangeTimes->{
  3.740178001588582*^9, {3.7402543715756397`*^9, 3.740254384517584*^9}, 
   3.7402544165352697`*^9},
 CellLabel->
  "Out[149]=",ExpressionUUID->"700af547-5901-4205-9cd5-93d2dbc40d99"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"testImage", "[", 
  RowBox[{
   RowBox[{"22.16", "+", "10"}], ",", 
   RowBox[{
    RowBox[{"-", "100.98"}], "+", "10"}], ",", "finalTrainedNetEvalDec"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.740253678793765*^9, 3.740253714136155*^9}, 
   3.7402537496133213`*^9, {3.7402537804508753`*^9, 3.740253807532098*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"adfbc4ad-a2df-4712-9600-9b7260dab15f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Image Matrix", "Subchapter",
 CellChangeTimes->{{3.7401886611953697`*^9, 
  3.740188663766671*^9}},ExpressionUUID->"609e8f21-422d-4528-8f10-\
763f4bcfe516"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ImageMeasurements", "[", 
  RowBox[{"areaTest", ",", "\"\<Mean\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.74017799634739*^9, 3.7401780012461653`*^9}},
 CellLabel->
  "In[129]:=",ExpressionUUID->"dbf02c69-a677-4910-8c64-80752e8c8248"],

Cell[BoxData["0.130916`"], "Output",
 CellChangeTimes->{3.740178001588582*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"3acca3d6-8852-480e-bc6f-10dfaa5765f7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Google Images", "Chapter",
 CellChangeTimes->{{3.740219646519652*^9, 
  3.740219649299715*^9}},ExpressionUUID->"3d88949b-3d36-4255-a5b5-\
abc51a1f4299"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GetSatImage", "[", 
    RowBox[{"x_", ",", "y_", ",", "zoom_", ",", "range_"}], "]"}], ":=", 
   RowBox[{"Image", "[", 
    RowBox[{"GeoGraphics", "[", 
     RowBox[{
      RowBox[{"GeoPosition", "[", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
      RowBox[{"GeoServer", "\[Rule]", 
       RowBox[{
       "{", "\"\<http://mt0.google.com/vt/lyrs=s&x=`2`&y=`3`&z=`1`\>\"", 
        "}"}]}], ",", 
      RowBox[{"GeoRange", "\[Rule]", 
       RowBox[{"Quantity", "[", 
        RowBox[{"range", ",", "\"\<Meters\>\""}], "]"}]}], ",", 
      RowBox[{"GeoZoomLevel", "\[Rule]", "zoom"}]}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GetStreetImage", "[", 
    RowBox[{"x_", ",", "y_", ",", "zoom_", ",", "range_"}], "]"}], ":=", 
   RowBox[{"Image", "[", 
    RowBox[{"GeoGraphics", "[", 
     RowBox[{
      RowBox[{"GeoPosition", "[", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
      RowBox[{"GeoBackground", "\[Rule]", 
       RowBox[{"GeoStyling", "[", "\"\<StreetMapNoLabels\>\"", "]"}]}], ",", 
      RowBox[{"GeoRange", "\[Rule]", 
       RowBox[{"Quantity", "[", 
        RowBox[{"range", ",", "\"\<Meters\>\""}], "]"}]}], ",", 
      RowBox[{"GeoZoomLevel", "\[Rule]", "zoom"}]}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.740219650372604*^9, 3.7402196503743258`*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"42565a77-19b5-49c6-a80f-70471875f250"],

Cell[CellGroupData[{

Cell[BoxData["Here"], "Input",
 CellChangeTimes->{{3.740219702325838*^9, 3.740219702806312*^9}},
 CellLabel->
  "In[128]:=",ExpressionUUID->"b9daad23-dc52-4a92-8ca6-d848bbad1169"],

Cell[BoxData[
 RowBox[{"GeoPosition", "[", 
  RowBox[{"{", 
   RowBox[{"42.37`", ",", 
    RowBox[{"-", "71.24`"}]}], "}"}], "]"}]], "Output",
 CellChangeTimes->{3.740219704846336*^9, 3.740253353685422*^9},
 CellLabel->
  "Out[128]=",ExpressionUUID->"bd681cea-da19-41f4-8723-861872f5b5ce"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{807, 598},
WindowMargins->{{175, Automatic}, {Automatic, 0}},
WindowStatusArea->None,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 7, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "LastModified"->{
  Cell[704, 24, 222, 4, 36, "TemplateInstructions",ExpressionUUID->"b4592abc-43f8-42aa-b1b7-e79936ced8f2",
   CellTags->"LastModified"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"LastModified", 2898298, 52194}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 118, 0, 160, "Title",ExpressionUUID->"6eb8d7e2-68b2-40b9-8975-a91f4583550b"],
Cell[704, 24, 222, 4, 36, "TemplateInstructions",ExpressionUUID->"b4592abc-43f8-42aa-b1b7-e79936ced8f2",
 CellTags->"LastModified"],
Cell[929, 30, 331, 5, 81, "Text",ExpressionUUID->"ad89a79b-2f79-4340-8328-8983ddc25c86"],
Cell[CellGroupData[{
Cell[1285, 39, 156, 3, 69, "Chapter",ExpressionUUID->"9aa16036-8f0f-48d0-9de3-e5a48e306255"],
Cell[1444, 44, 411, 8, 58, "Text",ExpressionUUID->"e746b011-a4ad-492e-b188-c0f52cfaab33"],
Cell[CellGroupData[{
Cell[1880, 56, 248, 5, 32, "Item",ExpressionUUID->"a4358594-8c26-4359-8d01-3d262fdfdfec"],
Cell[2131, 63, 220, 5, 32, "Item",ExpressionUUID->"d8a22e75-01aa-4e71-a725-6b93d523efb0"],
Cell[2354, 70, 271, 6, 53, "Item",ExpressionUUID->"96034f19-4ae2-4ca9-a44e-39ec552e547a"]
}, Open  ]],
Cell[2640, 79, 190, 3, 35, "Text",ExpressionUUID->"c4bee893-4629-48a8-873a-d4993680a4ef"],
Cell[CellGroupData[{
Cell[2855, 86, 156, 3, 65, "Subchapter",ExpressionUUID->"3b322aa5-fd32-4385-9846-db4e9fb055b5"],
Cell[3014, 91, 101, 0, 38, "CodeText",ExpressionUUID->"6089ff53-b34f-4060-9668-33998972c222"],
Cell[CellGroupData[{
Cell[3140, 95, 249, 4, 30, "Input",ExpressionUUID->"1eef466e-62d1-4695-a794-ad7223102db7"],
Cell[3392, 101, 294, 3, 34, "Output",ExpressionUUID->"290bcf4b-e13e-41b8-8d36-ccffc4a1e31a"]
}, Open  ]],
Cell[3701, 107, 133, 0, 38, "CodeText",ExpressionUUID->"5224de34-2b88-43a3-a37f-4968eece5fdc"],
Cell[3837, 109, 898, 23, 73, "Input",ExpressionUUID->"4edc6a39-8de7-46fc-8301-8a4558d6ca73"],
Cell[4738, 134, 99, 0, 38, "CodeText",ExpressionUUID->"2f4c354e-c924-454d-a6a3-f139ee149bfb"],
Cell[4840, 136, 602, 15, 52, "Input",ExpressionUUID->"dfa9911b-e2eb-4528-916e-f7061aa3d363"],
Cell[5445, 153, 150, 2, 38, "CodeText",ExpressionUUID->"1492a59f-437b-4ed5-8ec7-94ee6135e38a"],
Cell[5598, 157, 456, 12, 52, "Input",ExpressionUUID->"e65828dc-4251-414d-ba5d-ecd1a1455d44"],
Cell[6057, 171, 102, 0, 38, "CodeText",ExpressionUUID->"36eea839-09a3-4594-b86d-164c443b740e"],
Cell[CellGroupData[{
Cell[6184, 175, 309, 7, 30, "Input",ExpressionUUID->"1a6f468d-0782-4051-b815-c5a34a5f8fae"],
Cell[6496, 184, 225, 3, 34, "Output",ExpressionUUID->"b39ea155-117d-450e-a685-5ba7f06b79fb"]
}, Open  ]],
Cell[6736, 190, 185, 3, 38, "CodeText",ExpressionUUID->"ba41efe3-1315-4577-8c51-7176412085c8"],
Cell[CellGroupData[{
Cell[6946, 197, 149, 2, 30, "Input",ExpressionUUID->"2a39101b-a811-4095-9a56-20030a30f6b2"],
Cell[7098, 201, 221, 3, 34, "Output",ExpressionUUID->"4f69c6ae-d044-41c6-8b91-2e70f5324ab4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7356, 209, 89, 0, 67, "Section",ExpressionUUID->"b71203ef-8de2-4d85-b90e-a1874d711b1f"],
Cell[7448, 211, 187, 3, 38, "CodeText",ExpressionUUID->"ccb435df-2e41-4c62-a63f-2f1762146d26"],
Cell[7638, 216, 287, 5, 30, "Input",ExpressionUUID->"d43a2ca4-596b-4e36-b904-550908aa596e"],
Cell[7928, 223, 192, 3, 38, "CodeText",ExpressionUUID->"79348fdb-00d5-4aa6-99ad-d5b2b0eb5fa1"],
Cell[8123, 228, 396, 9, 30, "Input",ExpressionUUID->"c11a142e-09df-496f-9100-8778cc59814f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8556, 242, 82, 0, 67, "Section",ExpressionUUID->"bc292344-c874-47fc-aa3b-daec9a4ab95c"],
Cell[8641, 244, 190, 3, 38, "CodeText",ExpressionUUID->"622aa79b-6b7e-44c9-a3c1-00d7c466fc57"],
Cell[8834, 249, 241, 5, 30, "Input",ExpressionUUID->"348ae733-b7bc-45f7-b790-450278a25234"],
Cell[9078, 256, 645, 18, 52, "Input",ExpressionUUID->"f68865b2-5502-44e2-ba6d-42cded56ea35"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9760, 279, 85, 0, 67, "Section",ExpressionUUID->"4ea55356-bf1b-48a8-a4ee-fa354471679a"],
Cell[9848, 281, 249, 6, 30, "Input",ExpressionUUID->"89a8b1f0-8a87-4781-9e1c-5d6bd4bb6c50"],
Cell[10100, 289, 536, 14, 30, "Input",ExpressionUUID->"f571e71d-2992-42d1-b26c-f3bad7e62c96"],
Cell[CellGroupData[{
Cell[10661, 307, 164, 3, 45, "Subsubsection",ExpressionUUID->"97cf3c62-f1cf-43a2-aa31-de0fdcd83ffe"],
Cell[10828, 312, 107, 0, 38, "CodeText",ExpressionUUID->"6b0cffd3-a8c9-4253-bd6d-65332cdc178e"],
Cell[CellGroupData[{
Cell[10960, 316, 181, 3, 30, "Input",ExpressionUUID->"838c25cd-1a5f-4578-b784-f6822b1ff187"],
Cell[11144, 321, 210, 3, 34, "Output",ExpressionUUID->"b9f6b1bb-5ac6-4629-bd03-c648c6e960d7"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[11427, 332, 154, 3, 65, "Subchapter",ExpressionUUID->"4efcc86f-2c2d-4ddc-a02e-089f1cb81eaf"],
Cell[CellGroupData[{
Cell[11606, 339, 87, 0, 67, "Section",ExpressionUUID->"e557db27-c514-4a08-9842-fd25135ebd81"],
Cell[11696, 341, 346, 7, 58, "Text",ExpressionUUID->"6277ec90-6498-4999-930d-d6c0a53ab860"],
Cell[12045, 350, 203, 3, 38, "CodeText",ExpressionUUID->"bf18ccb7-efb9-47ed-a1cc-c66543de4080"],
Cell[12251, 355, 1933, 43, 319, "Code",ExpressionUUID->"648a0aa0-b3a9-4400-8cda-4d86e61a8bdf"],
Cell[14187, 400, 163, 3, 38, "CodeText",ExpressionUUID->"ec8bfb0f-06a4-440b-9efa-d77f64a22b86"],
Cell[CellGroupData[{
Cell[14375, 407, 359, 9, 30, "Input",ExpressionUUID->"10c6e71a-68af-4224-9c5a-5478f3379b88"],
Cell[14737, 418, 221, 3, 34, "Output",ExpressionUUID->"844f2f3c-6bd1-4faf-b456-32f08b3f3ac9"]
}, Open  ]],
Cell[14973, 424, 472, 11, 52, "Input",ExpressionUUID->"bcdb8c9e-8658-4051-8561-7afd944281b0"],
Cell[15448, 437, 615, 15, 30, "Input",ExpressionUUID->"6891584e-21b6-4a69-a0c8-f1962105b991"],
Cell[16066, 454, 222, 5, 35, "Text",ExpressionUUID->"1e494a3f-def2-4085-b63c-564180ec301f"],
Cell[16291, 461, 258, 6, 32, "Item",ExpressionUUID->"12a4f295-4c71-4540-aa23-b22ab7bceb07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16586, 472, 195, 3, 67, "Section",ExpressionUUID->"2e853638-8bb2-410e-b45c-e8c7ffc0110f"],
Cell[16784, 477, 199, 3, 35, "Text",ExpressionUUID->"7e3fc508-04ba-4f73-b7d2-a82da7027ffb"],
Cell[16986, 482, 102, 0, 38, "CodeText",ExpressionUUID->"31c176e3-24a4-490c-af98-939837a74e8c"],
Cell[17091, 484, 439, 10, 30, "Input",ExpressionUUID->"a0f86900-c676-4621-b23f-e2dd8e7b7da0"],
Cell[17533, 496, 133, 0, 38, "CodeText",ExpressionUUID->"425c2f60-58fe-4231-ae62-1c712a28606b"],
Cell[17669, 498, 505, 13, 30, "Input",ExpressionUUID->"af7e71f9-a6da-4711-ad5c-e2650d729373"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[18235, 518, 81, 0, 69, "Chapter",ExpressionUUID->"70ef821b-333a-4d27-b65f-fc94bbed1d15"],
Cell[CellGroupData[{
Cell[18341, 522, 90, 0, 65, "Subchapter",ExpressionUUID->"b7792add-1b2d-49ac-b515-c3c08ec79db1"],
Cell[18434, 524, 727, 19, 81, "Text",ExpressionUUID->"9ed36de7-8705-48f3-9c6a-635180f6aaaf"],
Cell[19164, 545, 197, 5, 38, "CodeText",ExpressionUUID->"7aa4c8ac-a952-4993-9f30-5c13e099bdf5"],
Cell[CellGroupData[{
Cell[19386, 554, 248, 6, 30, "Input",ExpressionUUID->"e2972e30-e0b9-4e7d-8211-d1f0acd67ddc"],
Cell[19637, 562, 270616, 5031, 75, "Output",ExpressionUUID->"c5a8bd58-8a3d-4f8c-b6d1-8edb70c64a7d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[290290, 5598, 156, 3, 67, "Section",ExpressionUUID->"1029d31d-c184-4a63-af5a-aa49fbf15b95"],
Cell[CellGroupData[{
Cell[290471, 5605, 191, 3, 54, "Subsection",ExpressionUUID->"fc58ad2a-ba71-4c14-96e2-2e97789e3554"],
Cell[290665, 5610, 120, 0, 38, "CodeText",ExpressionUUID->"76bebb61-c311-4bbf-9e43-88545a117156"],
Cell[CellGroupData[{
Cell[290810, 5614, 584, 14, 52, "Input",ExpressionUUID->"948ee0a2-c099-4307-a405-61677c30e7c4"],
Cell[291397, 5630, 271411, 5049, 76, "Output",ExpressionUUID->"507e253b-89b3-4738-ba55-e1ea41fb38c8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[562857, 10685, 140, 3, 54, "Subsection",ExpressionUUID->"b4803689-f318-4d0a-8cf6-7abd4a561cb4"],
Cell[563000, 10690, 189, 3, 38, "CodeText",ExpressionUUID->"b91a2fe4-fd0e-4eae-94ab-0cf7ecce3c14"],
Cell[CellGroupData[{
Cell[563214, 10697, 293, 6, 30, "Input",ExpressionUUID->"3ead8a7b-64dc-4ce6-9091-0c24ec492c7c"],
Cell[563510, 10705, 264481, 4911, 76, "Output",ExpressionUUID->"9053c9d7-33f9-4a9b-9090-a1ce7b5d2197"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[828040, 15622, 165, 3, 54, "Subsection",ExpressionUUID->"e43fe892-f5b4-4a6b-9f14-e4cff49cb28b"],
Cell[828208, 15627, 192, 3, 38, "CodeText",ExpressionUUID->"cd0d3ff6-bc54-4114-81a1-a4b518a70ebc"],
Cell[828403, 15632, 929, 24, 73, "Input",ExpressionUUID->"1ac40f1d-b38b-4092-b87c-61fa477fbfe0"],
Cell[829335, 15658, 134, 0, 38, "CodeText",ExpressionUUID->"ff3a3785-e83c-428d-b2a5-0e79343461d7"],
Cell[CellGroupData[{
Cell[829494, 15662, 348, 8, 30, "Input",ExpressionUUID->"4d5bf403-48a8-44e3-91ea-3fc8ead1407b"],
Cell[829845, 15672, 18276, 371, 75, "Output",ExpressionUUID->"a1fd24b7-c5d9-4d85-865c-b98190489ff6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[848170, 16049, 160, 3, 54, "Subsection",ExpressionUUID->"bb6322f8-4818-4bfc-86ff-1ad05e801b76"],
Cell[848333, 16054, 154, 2, 38, "CodeText",ExpressionUUID->"cc0975d9-3335-44d8-bd8a-d819ae4f3ed5"],
Cell[CellGroupData[{
Cell[848512, 16060, 673, 18, 52, "Input",ExpressionUUID->"181b5c3b-7ec8-461b-9fb7-4e9e0673e497"],
Cell[849188, 16080, 198614, 3484, 75, "Output",ExpressionUUID->"8698867c-5853-453e-9edd-01f4aaedf739"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1047851, 19570, 168, 3, 54, "Subsection",ExpressionUUID->"457706a8-31b0-4e34-9e01-ddb2df8d6ab1"],
Cell[1048022, 19575, 191, 3, 38, "CodeText",ExpressionUUID->"e5c223ff-ee13-4e34-922a-6ffee660145e"],
Cell[CellGroupData[{
Cell[1048238, 19582, 185, 3, 30, "Input",ExpressionUUID->"a01fab52-10fa-4a9d-a938-8719631622e9"],
Cell[1048426, 19587, 197887, 3463, 75, "Output",ExpressionUUID->"e312fdd1-f876-4f4d-89ef-79cbca672676"]
}, Open  ]],
Cell[1246328, 23053, 251, 4, 38, "CodeText",ExpressionUUID->"f3c0d72a-e980-4ea7-8dbf-e5ee6d4fa105"],
Cell[1246582, 23059, 430, 9, 30, "Input",ExpressionUUID->"6e6a478e-561c-4e52-981a-5aab227b07ac"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1247061, 23074, 157, 3, 67, "Section",ExpressionUUID->"ef3d612d-8d12-4265-bca9-c2d57a6ccfa6"],
Cell[CellGroupData[{
Cell[1247243, 23081, 161, 3, 54, "Subsection",ExpressionUUID->"c64564cb-2047-442f-9791-c16e8b884949"],
Cell[1247407, 23086, 116, 0, 38, "CodeText",ExpressionUUID->"804b7a98-15e4-479a-ab71-095ea70740eb"],
Cell[CellGroupData[{
Cell[1247548, 23090, 500, 13, 52, "Input",ExpressionUUID->"b08e2096-d14d-4c2a-9ba9-6b99b3cb8f5b"],
Cell[1248051, 23105, 201944, 3370, 192, "Output",ExpressionUUID->"70157105-1d7b-4b83-be58-72e5670e3a98"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1450044, 26481, 188, 3, 54, "Subsection",ExpressionUUID->"e77bc74f-7547-4eee-883d-4d128f8d81c6"],
Cell[1450235, 26486, 98, 0, 38, "CodeText",ExpressionUUID->"91fe5b57-90e3-4097-bf89-3be6419d21cf"],
Cell[CellGroupData[{
Cell[1450358, 26490, 183, 3, 30, "Input",ExpressionUUID->"32cdd7e4-3f77-4d2c-ae13-55f99770c0bc"],
Cell[1450544, 26495, 200823, 3342, 75, "Output",ExpressionUUID->"e403d47c-bd6c-46da-af28-4957c5245f28"]
}, Open  ]],
Cell[1651382, 29840, 185, 3, 38, "CodeText",ExpressionUUID->"72dab291-480d-4eaa-b652-0dbdd14d2dbc"],
Cell[CellGroupData[{
Cell[1651592, 29847, 290, 6, 30, "Input",ExpressionUUID->"e4502c17-f471-4b32-b244-057fcf519cc3"],
Cell[1651885, 29855, 227, 4, 34, "Output",ExpressionUUID->"d86567fb-9f89-4ac6-9e6a-37972d3eab1e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1652149, 29864, 167, 3, 45, "Subsubsection",ExpressionUUID->"ff1d2bd7-4d51-4480-9260-cedc6cf18b78"],
Cell[1652319, 29869, 184, 3, 38, "CodeText",ExpressionUUID->"18b07605-307f-40be-9488-3978231d024e"],
Cell[CellGroupData[{
Cell[1652528, 29876, 511, 12, 30, "Input",ExpressionUUID->"a011fe51-7d3a-4371-87a3-72592ae86bec"],
Cell[1653042, 29890, 193, 3, 34, "Output",ExpressionUUID->"e0be0152-7e28-4729-b426-b2bcc1c7b83c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1653272, 29898, 230, 6, 30, "Input",ExpressionUUID->"f976eb43-1c88-4b76-b85e-62091816cdd6"],
Cell[1653505, 29906, 193, 3, 34, "Output",ExpressionUUID->"68eea331-922c-4942-a7bd-ef59fbdddd65"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1653795, 29919, 92, 0, 69, "Chapter",ExpressionUUID->"afabc96c-6480-4a5c-8a91-b0edb93c2964"],
Cell[CellGroupData[{
Cell[1653912, 29923, 169, 3, 65, "Subchapter",ExpressionUUID->"16ca443a-0b40-4c5d-afe0-190bc837914a"],
Cell[1654084, 29928, 180, 3, 35, "Text",ExpressionUUID->"61bb5500-4fcf-4f55-8722-0f14f871e446"],
Cell[1654267, 29933, 110, 0, 38, "CodeText",ExpressionUUID->"34bff1df-7be4-489a-8749-164b0301e15d"],
Cell[CellGroupData[{
Cell[1654402, 29937, 534, 14, 73, "Input",ExpressionUUID->"5c699b60-1ec7-47d8-aeab-38743840c580"],
Cell[1654939, 29953, 223, 4, 34, "Output",ExpressionUUID->"1c6cdcc6-d6c6-45e0-8a09-990a7f8a0463"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1655199, 29962, 86, 0, 67, "Section",ExpressionUUID->"74164fd8-f240-4d80-b54c-a9b13c251c17"],
Cell[1655288, 29964, 473, 9, 81, "Text",ExpressionUUID->"b6b333ee-97c6-4b2e-9a1e-481b181b13c9"],
Cell[CellGroupData[{
Cell[1655786, 29977, 89, 0, 54, "Subsection",ExpressionUUID->"d8596816-a0bd-49e7-9b86-323df97d9a18"],
Cell[1655878, 29979, 88, 0, 38, "CodeText",ExpressionUUID->"45526cc8-a93b-47ba-a939-aba5dd6709a1"],
Cell[1655969, 29981, 533, 15, 72, "Code",ExpressionUUID->"07fcbf73-3fe3-413c-b395-d89092e54542"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1656539, 30001, 105, 0, 54, "Subsection",ExpressionUUID->"28ca32e5-eb2c-41ea-ba0b-162aa962bac0"],
Cell[1656647, 30003, 134, 0, 38, "CodeText",ExpressionUUID->"0db7d084-3db1-49d3-b1fe-9d756b910e36"],
Cell[1656784, 30005, 2275, 59, 243, "Code",ExpressionUUID->"fa2c85d2-5978-4a72-9f05-bdf743d1c6d9"],
Cell[1659062, 30066, 217, 5, 35, "Text",ExpressionUUID->"8dacb109-e97f-4fa5-87a3-81d0e75b0b06"],
Cell[CellGroupData[{
Cell[1659304, 30075, 569, 15, 30, "Input",ExpressionUUID->"c0a73cb9-bb09-4787-961b-6567b36649ce"],
Cell[CellGroupData[{
Cell[1659898, 30094, 231, 6, 24, "Print",ExpressionUUID->"9bfad53b-3adf-4473-bbe3-c230df5d6ffe"],
Cell[1660132, 30102, 231, 6, 24, "Print",ExpressionUUID->"9df52c47-ce7b-40c6-99e6-2f58e20ba4d3"]
}, Open  ]],
Cell[1660378, 30111, 226, 5, 34, "Output",ExpressionUUID->"d37b4035-1d90-4a7c-b427-059ca18dd1fe"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1660653, 30122, 88, 0, 54, "Subsection",ExpressionUUID->"8fdb7428-2d2e-42dd-b436-992c65c60038"],
Cell[1660744, 30124, 121, 0, 38, "CodeText",ExpressionUUID->"d19e1440-db9d-4bd2-a6e9-62f42e046d25"],
Cell[CellGroupData[{
Cell[1660890, 30128, 441, 10, 94, "Input",ExpressionUUID->"30722d1c-3f3e-440f-b290-fe979ca0dd32"],
Cell[1661334, 30140, 254, 6, 34, "Output",ExpressionUUID->"e3d89b37-7426-4fb7-922e-892e4f2f34de"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1661625, 30151, 316, 8, 52, "Input",ExpressionUUID->"660cb822-1de4-4849-913b-5769b077397e"],
Cell[1661944, 30161, 181, 3, 34, "Output",ExpressionUUID->"52b24864-ad22-4724-8c34-b9db8e7ed34c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1662210, 30173, 94, 0, 69, "Chapter",ExpressionUUID->"8fe39e5a-780a-4b9a-9576-c1c4fea5b1a4"],
Cell[CellGroupData[{
Cell[1662329, 30177, 97, 0, 65, "Subchapter",ExpressionUUID->"1fb6bce5-f8ed-4535-997f-4218267cba81"],
Cell[CellGroupData[{
Cell[1662451, 30181, 216, 4, 54, "Subsection",ExpressionUUID->"4e56395e-8fb4-4a1d-97c3-d9beff1bfbc3"],
Cell[1662670, 30187, 185, 3, 38, "CodeText",ExpressionUUID->"97442194-44b4-472e-bf9b-697f89c8e999"],
Cell[1662858, 30192, 534, 15, 73, "Input",ExpressionUUID->"7309f90f-f9cb-4957-81eb-70d75e448e0a"],
Cell[1663395, 30209, 168, 3, 38, "CodeText",ExpressionUUID->"b47649d6-2795-45eb-8d7a-0278297815ff"],
Cell[CellGroupData[{
Cell[1663588, 30216, 551, 15, 52, "Input",ExpressionUUID->"b87732a6-bd50-41f9-b2a4-e1ee4f7a45bf"],
Cell[1664142, 30233, 205, 4, 34, "Output",ExpressionUUID->"88065fc6-95dd-4eb7-99ea-94f8cd80b74b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1664384, 30242, 558, 15, 52, "Input",ExpressionUUID->"d19636d2-a03f-4769-ae38-270cb60d5595"],
Cell[1664945, 30259, 257, 4, 34, "Output",ExpressionUUID->"c4e3aab5-5059-418d-a949-802308d7f751"]
}, Open  ]],
Cell[1665217, 30266, 228, 5, 38, "CodeText",ExpressionUUID->"06fd4f7b-9464-4202-b736-c4d07cee60be"],
Cell[CellGroupData[{
Cell[1665470, 30275, 449, 11, 52, "Input",ExpressionUUID->"4ba87484-9a1d-439c-8395-539d93216144"],
Cell[1665922, 30288, 5050, 98, 52, "Output",ExpressionUUID->"b83141f1-c3fb-42a0-9a00-734f0430ff40"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1671033, 30393, 86, 0, 65, "Subchapter",ExpressionUUID->"c1136be3-7041-4ccd-a840-3883810ddb5f"],
Cell[1671122, 30395, 862, 18, 127, "Text",ExpressionUUID->"4315ed5c-5772-48b3-be58-1b6efbc85af4"],
Cell[1671987, 30415, 590, 10, 101, "CodeText",ExpressionUUID->"2e60b5d4-abca-4f14-91e2-91fa474b6f93"],
Cell[1672580, 30427, 2434, 61, 224, "Code",ExpressionUUID->"33679b83-e63c-4b65-b479-3fb8f307a121"],
Cell[CellGroupData[{
Cell[1675039, 30492, 172, 3, 45, "Subsubsection",ExpressionUUID->"8bd1379d-8df7-4d91-b593-d4811d56b669"],
Cell[1675214, 30497, 155, 3, 30, "Input",ExpressionUUID->"6af23282-5c1c-407b-9d82-8fc7d1527df3"],
Cell[1675372, 30502, 1081, 22, 115, "Input",ExpressionUUID->"8c97bd56-df12-4e70-9dd4-d0ef39c8a07f"],
Cell[CellGroupData[{
Cell[1676478, 30528, 286, 6, 30, "Input",ExpressionUUID->"d78b7116-912a-4b17-84bb-20c58dd89ca8"],
Cell[1676767, 30536, 152, 3, 34, "Output",ExpressionUUID->"1b81fff7-9fab-4485-8a4b-1d13954c8c73"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1676968, 30545, 153, 3, 67, "Section",ExpressionUUID->"01a2f2bb-34f5-48e0-bb3c-6f30e35a6e6a"],
Cell[1677124, 30550, 281, 7, 35, "Text",ExpressionUUID->"540f09fa-41ac-4b33-ae90-8711949386ff"],
Cell[1677408, 30559, 194, 3, 38, "CodeText",ExpressionUUID->"b9c4a3e8-539f-4be2-9489-eb718a270cec"],
Cell[1677605, 30564, 176, 4, 30, "Input",ExpressionUUID->"26a6bb4f-3c27-432f-a0fd-e8acea9cb348"],
Cell[1677784, 30570, 169, 3, 38, "CodeText",ExpressionUUID->"064802d8-d0b6-43f1-9f0a-cbad5111a89f"],
Cell[1677956, 30575, 294, 7, 30, "Input",ExpressionUUID->"24500fb0-7105-4e81-9d3e-2e10b967730f"],
Cell[1678253, 30584, 175, 3, 38, "CodeText",ExpressionUUID->"dcf61ec6-e64e-4309-b83f-db75e40ff9b1"],
Cell[CellGroupData[{
Cell[1678453, 30591, 209, 5, 30, "Input",ExpressionUUID->"be30aa53-bc37-473e-8adf-89fddce296b0"],
Cell[1678665, 30598, 236, 4, 34, "Output",ExpressionUUID->"27d08d48-c7c5-43d4-9c32-3afb8ce04ef8"]
}, Open  ]],
Cell[1678916, 30605, 274, 4, 38, "CodeText",ExpressionUUID->"6471d658-bf41-4046-87d4-185564487be5"],
Cell[CellGroupData[{
Cell[1679215, 30613, 622, 15, 73, "Input",ExpressionUUID->"6b926bc7-e768-4ee6-9096-8cdd624582dc"],
Cell[1679840, 30630, 606, 12, 42, "Message",ExpressionUUID->"9e5edf52-b64a-4b27-a6ea-586fbe209b7e"],
Cell[1680449, 30644, 181, 3, 34, "Output",ExpressionUUID->"56073a85-fd06-4139-a32b-076bb920e814"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1680691, 30654, 256, 4, 65, "Subchapter",ExpressionUUID->"081b47af-45d3-47f3-bb33-ca6bae970858"],
Cell[1680950, 30660, 233, 6, 35, "Text",ExpressionUUID->"820769f5-4afc-4981-b974-8f4bdcb39c45"],
Cell[1681186, 30668, 186, 3, 38, "CodeText",ExpressionUUID->"5a3a46c5-1a37-4213-bb2a-8ae80386ee8d"],
Cell[CellGroupData[{
Cell[1681397, 30675, 409, 9, 52, "Input",ExpressionUUID->"ac48b651-3e0e-4a6e-b7a0-562f8dc6ce66"],
Cell[1681809, 30686, 12091, 230, 185, "Output",ExpressionUUID->"16e91ac3-c8b0-4ba6-851e-779a4e31107a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1693937, 30921, 165, 3, 54, "Subsection",ExpressionUUID->"5a968080-2750-42df-8b2b-37a41349e710"],
Cell[1694105, 30926, 189, 3, 35, "Text",ExpressionUUID->"1dab89cb-c5f1-4071-b938-0236fde3b413"],
Cell[1694297, 30931, 252, 5, 38, "CodeText",ExpressionUUID->"9a045607-be67-4c2d-804f-4cea41ec6d13"],
Cell[1694552, 30938, 526, 14, 30, "Input",ExpressionUUID->"88b96074-5404-4de5-bf97-0012fc787955"],
Cell[1695081, 30954, 283, 6, 38, "CodeText",ExpressionUUID->"3df2bd2b-21f6-4048-9fe7-408cde55586e"],
Cell[1695367, 30962, 371, 11, 30, "Input",ExpressionUUID->"7d38f303-d0ae-4980-a0a3-dfdc04f9385f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1695775, 30978, 219, 4, 54, "Subsection",ExpressionUUID->"f7d09849-60fe-479b-8f36-200050c09dd6"],
Cell[1695997, 30984, 217, 4, 38, "CodeText",ExpressionUUID->"181b9607-3fe1-4120-9a0c-6f71f82e9b15"],
Cell[CellGroupData[{
Cell[1696239, 30992, 539, 13, 52, "Input",ExpressionUUID->"c8e73597-d5a9-4e9b-8635-79ec306271b3"],
Cell[1696781, 31007, 311575, 5143, 130, "Output",ExpressionUUID->"e705d4ed-c94c-43f9-8269-e6853d77a958"]
}, Open  ]],
Cell[2008371, 36153, 167, 3, 38, "CodeText",ExpressionUUID->"869bc9a7-3ed8-4966-a2b6-0185e4d6a33a"],
Cell[CellGroupData[{
Cell[2008563, 36160, 769, 17, 73, "Input",ExpressionUUID->"b15a9280-4e68-4909-b98b-46e1c8a0fa5f"],
Cell[2009335, 36179, 3494, 87, 148, "Output",ExpressionUUID->"1cf93a8d-12d8-41c2-8571-2b6003fa9acd"]
}, Open  ]],
Cell[2012844, 36269, 177, 3, 38, "CodeText",ExpressionUUID->"2e577d46-3c07-4dbd-95ca-a3c1d5e09828"],
Cell[CellGroupData[{
Cell[2013046, 36276, 744, 18, 73, "Input",ExpressionUUID->"89fa41be-fb01-406f-a507-7a10434ea14d"],
Cell[2013793, 36296, 3458, 84, 144, "Output",ExpressionUUID->"0378883f-9f27-4c5c-9693-921c5898272a"]
}, Open  ]],
Cell[2017266, 36383, 168, 3, 38, "CodeText",ExpressionUUID->"75295186-4ea5-4322-94be-84bb892bd611"],
Cell[CellGroupData[{
Cell[2017459, 36390, 173, 3, 30, "Input",ExpressionUUID->"9783031e-457c-47b8-be72-3b21e1fa515f"],
Cell[2017635, 36395, 15112, 307, 220, "Output",ExpressionUUID->"9d84ef32-7fbd-43a2-80fd-5b182bbd5a49"]
}, Open  ]],
Cell[2032762, 36705, 171, 3, 38, "CodeText",ExpressionUUID->"46e952c4-3723-4461-9f6d-dedb8333e130"],
Cell[CellGroupData[{
Cell[2032958, 36712, 247, 4, 30, "Input",ExpressionUUID->"1f24cbd2-b345-465d-8de0-b5061689a204"],
Cell[2033208, 36718, 17070, 358, 220, "Output",ExpressionUUID->"e55f7e73-8690-444d-9ac6-186803e34a95"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2050315, 37081, 3315, 66, 367, "Input",ExpressionUUID->"c4311d91-6c61-4b98-b85f-c15478faa14d"],
Cell[2053633, 37149, 20747, 388, 465, "Output",ExpressionUUID->"11a9f7ab-00f8-4b7a-8ec6-bbc6b0d86896"]
}, {2}]],
Cell[2074392, 37540, 170, 3, 38, "CodeText",ExpressionUUID->"880f7f4f-ceda-403c-a42f-a166e24a65e2"],
Cell[CellGroupData[{
Cell[2074587, 37547, 502, 10, 30, "Input",ExpressionUUID->"86d1ff20-f818-4f24-9481-0459bb75857d"],
Cell[2075092, 37559, 198933, 3489, 77, "Output",ExpressionUUID->"a622e1d1-d4ce-493f-92b4-a5f662654511"]
}, Open  ]],
Cell[2274040, 41051, 164, 3, 38, "CodeText",ExpressionUUID->"662b9b0c-6e5a-4b43-9dc6-514c03d2e851"],
Cell[CellGroupData[{
Cell[2274229, 41058, 550, 11, 30, "Input",ExpressionUUID->"a7a202df-594d-43fd-aae7-4c37c7158af1"],
Cell[2274782, 41071, 199100, 3486, 76, "Output",ExpressionUUID->"9bab1508-be9d-46f5-9821-3c3ab2a2dd25"]
}, Open  ]],
Cell[2473897, 44560, 164, 3, 38, "CodeText",ExpressionUUID->"0ced2027-1286-4e65-8ccf-d96c45dbdd7b"],
Cell[CellGroupData[{
Cell[2474086, 44567, 512, 9, 30, "Input",ExpressionUUID->"52d8adf6-e77b-423f-9804-fcc03c11c534"],
Cell[2474601, 44578, 198192, 3468, 75, "Output",ExpressionUUID->"dde01553-8dc7-497f-a02e-aba08da81f2c"]
}, Open  ]],
Cell[2672808, 48049, 171, 3, 38, "CodeText",ExpressionUUID->"f6ff7bd2-ac5b-438b-853f-0344f02d2bf4"],
Cell[CellGroupData[{
Cell[2673004, 48056, 505, 10, 52, "Input",ExpressionUUID->"3e9d4009-2339-496b-8283-0f254c5f5588"],
Cell[2673512, 48068, 345, 6, 34, "Output",ExpressionUUID->"63726151-977f-4f5c-8d2c-dd0796be586f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2673930, 48082, 159, 3, 69, "Chapter",ExpressionUUID->"90e6d9cb-7fa8-49f3-a496-a1229f22609c"],
Cell[CellGroupData[{
Cell[2674114, 48089, 319, 7, 52, "Input",ExpressionUUID->"22e59e20-f9f4-4740-87e8-6b6b6791ccc0"],
Cell[2674436, 48098, 197841, 3462, 75, "Output",ExpressionUUID->"eeaee069-484e-42f1-8af4-ea7475ab320a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2872314, 51565, 176, 3, 65, "Subchapter",ExpressionUUID->"007e0a2a-f02b-4cc4-b9ad-12c385bd4dd7"],
Cell[2872493, 51570, 187, 3, 38, "CodeText",ExpressionUUID->"70c785ab-8337-4bee-a922-5dcc4ef474c0"],
Cell[2872683, 51575, 1007, 27, 115, "Input",ExpressionUUID->"a9e21482-f804-480f-9371-ebafdcd25c7f"],
Cell[2873693, 51604, 199, 3, 38, "CodeText",ExpressionUUID->"2a62e09b-0f7d-427d-8e54-d8c08934113d"],
Cell[2873895, 51609, 663, 17, 52, "Input",ExpressionUUID->"dcffbec6-24e9-4805-b45c-23b6fa99a8b9"],
Cell[2874561, 51628, 476, 12, 52, "Input",ExpressionUUID->"84851593-fca4-4187-8632-37e7dd8fb173"],
Cell[2875040, 51642, 1143, 21, 52, "Input",ExpressionUUID->"ddaf78ce-d5af-4a72-9775-b4eacb274288"],
Cell[2876186, 51665, 651, 14, 52, "Input",ExpressionUUID->"5bd8bca6-48bd-4149-a4d3-dcdebc4813b9"],
Cell[2876840, 51681, 227, 5, 38, "CodeText",ExpressionUUID->"603f237f-2ec3-4404-8109-7613df97b9e7"],
Cell[CellGroupData[{
Cell[2877092, 51690, 909, 23, 73, "Input",ExpressionUUID->"d8cd6553-db2c-4dcb-9084-ae773e497111"],
Cell[2878004, 51715, 10109, 184, 85, "Output",ExpressionUUID->"f168187e-3bda-49e2-b4d5-dd51a8244d8c"]
}, {2}]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2888159, 51905, 156, 3, 65, "Subchapter",ExpressionUUID->"cfb8b55d-f995-45b4-b690-279f16aacada"],
Cell[2888318, 51910, 1897, 49, 144, "Input",ExpressionUUID->"cf7c1d3d-b432-4fd8-a201-f3c70336cc61"],
Cell[CellGroupData[{
Cell[2890240, 51963, 576, 13, 40, "Input",ExpressionUUID->"d033d245-8176-4f2b-a1c4-8ba78965ffc9"],
Cell[2890819, 51978, 292, 7, 34, "Output",ExpressionUUID->"a476c2a6-a656-4aad-a893-4515bb1aab3a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2891148, 51990, 746, 21, 52, "Input",ExpressionUUID->"07c8373b-2cdb-4261-b885-b58753e4c490"],
Cell[2891897, 52013, 1928, 39, 140, "Output",ExpressionUUID->"b6954b98-89a1-4a19-bb1e-97921577c4fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2893862, 52057, 509, 11, 52, "Input",ExpressionUUID->"eb4d60e3-5ad6-4ab0-ac64-e4e01268c24d"],
Cell[2894374, 52070, 240, 5, 34, "Output",ExpressionUUID->"700af547-5901-4205-9cd5-93d2dbc40d99"]
}, Open  ]],
Cell[2894629, 52078, 423, 10, 30, "Input",ExpressionUUID->"adfbc4ad-a2df-4712-9600-9b7260dab15f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2895089, 52093, 162, 3, 65, "Subchapter",ExpressionUUID->"609e8f21-422d-4528-8f10-763f4bcfe516"],
Cell[CellGroupData[{
Cell[2895276, 52100, 261, 5, 30, "Input",ExpressionUUID->"dbf02c69-a677-4910-8c64-80752e8c8248"],
Cell[2895540, 52107, 161, 3, 34, "Output",ExpressionUUID->"3acca3d6-8852-480e-bc6f-10dfaa5765f7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2895762, 52117, 158, 3, 69, "Chapter",ExpressionUUID->"3d88949b-3d36-4255-a5b5-abc51a1f4299"],
Cell[2895923, 52122, 1507, 39, 178, "Input",ExpressionUUID->"42565a77-19b5-49c6-a80f-70471875f250"],
Cell[CellGroupData[{
Cell[2897455, 52165, 179, 3, 30, "Input",ExpressionUUID->"b9daad23-dc52-4a92-8ca6-d848bbad1169"],
Cell[2897637, 52170, 289, 7, 34, "Output",ExpressionUUID->"bd681cea-da19-41f4-8723-861872f5b5ce"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

